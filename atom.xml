<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙梦尧的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-29T10:31:29.241Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sunmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/29/mycanvas/"/>
    <id>http://yoursite.com/2017/08/29/mycanvas/</id>
    <published>2017-08-29T10:32:09.063Z</published>
    <updated>2017-08-29T10:31:29.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><blockquote>
<p>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。 基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br>&lt;canvas&gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。 </p>
</blockquote>
<h4 id="什么是Canvas？"><a href="#什么是Canvas？" class="headerlink" title="什么是Canvas？"></a>什么是Canvas？</h4><ol>
<li>canvas 是一个 HTML5元素，中文翻译是画布，但是本事没有绘画的功能，需要通过javascript在上面绘制图像。</li>
<li>canvas是一个矩形区域，（算是内联可置换元素在chrome中display默认值为 inline），可以控制其中的每一像素默认大小是<font color="orange"> 300 * 150 </font>，浏览器在解析的时候会按图片进行处理</li>
<li>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>
</ol>
<h4 id="创建Canvas元素"><a href="#创建Canvas元素" class="headerlink" title="创建Canvas元素"></a>创建Canvas元素</h4><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：（在style标签中为其设置宽高属性也是起作用的但是并不推荐这么做）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Canvas坐标系"><a href="#Canvas坐标系" class="headerlink" title="Canvas坐标系"></a>Canvas坐标系</h4><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/location.jpg" alt=""></p>
<h4 id="通过JavaScript来绘制"><a href="#通过JavaScript来绘制" class="headerlink" title="通过JavaScript来绘制"></a>通过JavaScript来绘制</h4><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/01.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!-</span> 为了效果明显，加了一点样式 <span class="attr">-</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    canvas&#123;</span></div><div class="line"><span class="undefined">        border: 1px solid #ccc;</span></div><div class="line"><span class="undefined">        margin: 0 auto;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取元素*/</span></div><div class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#myCanvas'</span>)</div><div class="line"><span class="comment">/*获取绘图工具（也可以叫做绘制环境）*/</span></div><div class="line"><span class="keyword">var</span> context = myCanvas.getContext(<span class="string">'2d'</span>)</div><div class="line"><span class="comment">/*设置绘图的起始位置*/</span></div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>)</div><div class="line"><span class="comment">/*绘制路径*/</span></div><div class="line">context.lineTo(<span class="number">200</span>,<span class="number">200</span>)</div><div class="line"><span class="comment">/*描边*/</span></div><div class="line">context.stroke()</div></pre></td></tr></table></figure>
<h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><p>需要理解些概念：  </p>
<ul>
<li>路径的概念</li>
<li>路径的绘制<ul>
<li>描边 stroke()  </li>
<li>填充 fill()<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/path.jpg" alt="">  </li>
</ul>
</li>
<li>闭合路径<ul>
<li>手动闭合</li>
<li>程序闭合 closePath()</li>
</ul>
</li>
<li>填充规则(非零环绕)<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/zero.jpg" alt=""></li>
<li>开启新的路径 beginPath()</li>
</ul>
<h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><ul>
<li>画笔的状态<ul>
<li>lineWidth 线宽，默认1px</li>
<li>lineCap 线末端类型：(butt默认)、round、square </li>
<li>lineJoin 相交线的拐点 miter(默认)、round、bevel</li>
<li>strokeStyle 线的颜色</li>
<li>fillStyle 填充颜色</li>
<li>setLineDash() 设置虚线</li>
<li>getLineDash() 获取虚线宽度集合</li>
<li>lineDashOffset 设置虚线偏移量（负值向右偏移）</li>
</ul>
</li>
</ul>
<h4 id="此处的坑"><a href="#此处的坑" class="headerlink" title="此处的坑"></a>此处的坑</h4><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/02.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">canvas所绘制的线条本质就是一定数量的默认大小为1px颜色为黑色的像素点的结合，以坐标的中心绘制,但浏览器无发显示0.5px，chrome处理方式是把把线宽扩大到2px但是，毕竟这并不是真正设置2px的线宽，所以做了将颜色变浅以示区分。</span></div><div class="line"><span class="comment">解决方案：</span></div><div class="line"><span class="comment">1. 当设置线宽为单数的时候，手动将其y轴方向进行0.5px的增减，换句话说就是把这条线放到浏览器能正常显示的像素格内，避免浏览器进行线条虚化操作。</span></div><div class="line"><span class="comment">2. 将线宽设置为偶数，但要注意canvas线条位置的渲染方式，计算好真正想让线条出现的位置</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h4 id="实例练习"><a href="#实例练习" class="headerlink" title="实例练习"></a>实例练习</h4><ul>
<li><p>绘制平行线不同颜色</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/03.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*1.获取canvas元素*/</span></div><div class="line"> <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line"> <span class="comment">/*2.获取绘制环境  （获取绘制工具）*/</span></div><div class="line"> <span class="comment">/*content内容  context 上下文 */</span></div><div class="line"> <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"> <span class="comment">/*3.设置起始绘图的位置*/</span></div><div class="line"> ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"> <span class="comment">/*6.设置宽度*/</span></div><div class="line"> ctx.lineWidth = <span class="number">10</span>;</div><div class="line"> <span class="comment">/*4.绘制路径 */</span></div><div class="line"> ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line"> <span class="comment">/*7. 设置描边的颜色*/</span></div><div class="line"> ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line"> <span class="comment">/*5.描边*/</span></div><div class="line"> ctx.stroke();</div><div class="line"> <span class="comment">/*绿色*/</span></div><div class="line"> <span class="comment">/*再次绘制的时候     会使用之前设置的样式   设置的样式最后的会生效*/</span></div><div class="line"> <span class="comment">/*开启新路径*/</span></div><div class="line"> ctx.beginPath();</div><div class="line"> ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line"> ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line"> ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line"> ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制一个三角形</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/04.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    <span class="comment">/*移动画笔*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*自动闭合*/</span></div><div class="line">    ctx.closePath();</div><div class="line">    <span class="comment">// ctx.stroke();</span></div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.stroke();</div><div class="line">    <span class="comment">/*填充*/</span></div><div class="line">    ctx.fillStyle = <span class="string">'orange'</span>;</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
</li>
<li><p>镂空的正方形</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/05.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    <span class="comment">/*移动画笔*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*自动闭合*/</span></div><div class="line">    ctx.closePath();</div><div class="line">    <span class="comment">// ctx.stroke();</span></div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.stroke();</div><div class="line">    <span class="comment">/*填充*/</span></div><div class="line">    ctx.fillStyle = <span class="string">'skyblue'</span>;</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
</li>
<li><p>线的两端样式</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/06.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">   <span class="comment">/*获取绘图工具*/</span></div><div class="line">   <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">   ctx.lineWidth = <span class="number">10</span>;</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'butt'</span>;</div><div class="line">   ctx.stroke();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'round'</span>;</div><div class="line">   ctx.stroke();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'skyblue'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'square'</span>;</div><div class="line">   ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>线拐点的样式</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/07.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'miter'</span>;</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">250</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'round'</span>;</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">350</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'pink'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'bevel'</span>;</div><div class="line">    ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制渐变的线</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/08.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*1.从左到右*/</span></div><div class="line">    <span class="comment">/*2.起始颜色  白色*/</span></div><div class="line">    <span class="comment">/*3.结束颜色  红色*/</span></div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(<span class="number">99</span>+i,<span class="number">100</span>);</div><div class="line">        ctx.lineTo(<span class="number">100</span>+i,<span class="number">100</span>);</div><div class="line">        <span class="keyword">var</span> g = <span class="number">255</span> - i;</div><div class="line">        <span class="keyword">var</span> b = <span class="number">255</span> - i;</div><div class="line">        ctx.strokeStyle = <span class="string">'rgb(255,'</span>+g+<span class="string">','</span>+b+<span class="string">')'</span>;</div><div class="line">        ctx.stroke();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>绘制虚线</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/09.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">100</span>)</div><div class="line">    ctx.setLineDash([<span class="number">5</span>]);</div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</div><div class="line">    <span class="comment">/*绘制虚线的方法*/</span></div><div class="line">    <span class="comment">/*传数组  设置虚线长度的*/</span></div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>]);</div><div class="line">    <span class="comment">/*如果是偶数个数设置  */</span></div><div class="line">    <span class="comment">/*如果是奇数数个数设置     */</span></div><div class="line">    <span class="comment">/*获取的不重复的一段*/</span></div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>)</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">300</span>)</div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();<span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">100</span>);</div><div class="line">    <span class="comment">/*绘制虚线的方法*/</span></div><div class="line">    <span class="comment">/*传数组  设置虚线长度的*/</span></div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</div><div class="line">    <span class="comment">/*如果是偶数个数设置  */</span></div><div class="line">    <span class="comment">/*如果是奇数数个数设置     */</span></div><div class="line">    <span class="comment">/*获取的不重复的一段*/</span></div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制坐标系<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/10.png" alt=""><br><strong>方法一</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*1.确定间隔  20 */</span></div><div class="line">    <span class="keyword">var</span> space = <span class="number">20</span>;</div><div class="line">    <span class="comment">/*2.计算原点*/</span></div><div class="line">    <span class="keyword">var</span> width = ctx.canvas.width;</div><div class="line">    <span class="keyword">var</span> height = ctx.canvas.height;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> x0 = <span class="number">0</span> + space;</div><div class="line">    <span class="keyword">var</span> y0 = height - space;</div><div class="line"></div><div class="line">    <span class="comment">/*假设 箭头大小 8px*/</span></div><div class="line">    <span class="keyword">var</span> arrowSize = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*绘制x轴*/</span></div><div class="line">    ctx.moveTo(x0,y0);</div><div class="line">    ctx.lineTo(width-space,y0);</div><div class="line">    ctx.lineTo(width-space-arrowSize,y0+arrowSize/<span class="number">2</span>);</div><div class="line">    ctx.lineTo(width-space-arrowSize,y0-arrowSize/<span class="number">2</span>);</div><div class="line">    ctx.lineTo(width-space,y0);</div><div class="line">    ctx.stroke();</div><div class="line">    ctx.fill();</div><div class="line">    <span class="comment">/*绘制y轴*/</span></div><div class="line">    ctx.moveTo(x0,y0);</div><div class="line">    ctx.lineTo(space,space);</div><div class="line">    ctx.lineTo(space+arrowSize/<span class="number">2</span>,space+arrowSize);</div><div class="line">    ctx.lineTo(space-arrowSize/<span class="number">2</span>,space+arrowSize);</div><div class="line">    ctx.lineTo(space,space);</div><div class="line">    ctx.stroke();</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
<p><strong>方法二:面向对象方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DrawAxis = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*绘图工具*/</span></div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*间距*/</span></div><div class="line">        <span class="keyword">this</span>.space = <span class="number">20</span>;</div><div class="line">        <span class="comment">/*画布的尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</div><div class="line">        <span class="comment">/*原点*/</span></div><div class="line">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</div><div class="line">        <span class="keyword">this</span>.y0 =  <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</div><div class="line">        <span class="comment">/*箭头尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.arrowSize = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*绘制方法*/</span></div><div class="line">    DrawAxis.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*x轴*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize,<span class="keyword">this</span>.y0+<span class="keyword">this</span>.arrowSize/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize,<span class="keyword">this</span>.y0-<span class="keyword">this</span>.arrowSize/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.stroke();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">        <span class="comment">/*y轴*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize/<span class="number">2</span>,<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize/<span class="number">2</span>,<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</div><div class="line">        <span class="keyword">this</span>.ctx.stroke();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> drawAxis = <span class="keyword">new</span> DrawAxis();</div><div class="line">    drawAxis.draw();</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<ul>
<li><p>绘制坐标点</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/11.png" alt=""></p>
<p><strong>方法一</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*点坐标*/</span></div><div class="line">    <span class="keyword">var</span> dotted = &#123;</div><div class="line">        x: <span class="number">200</span>,</div><div class="line">        y: <span class="number">100</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*点大小*/</span></div><div class="line">    <span class="keyword">var</span> edge = <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*画笔的起始位置*/</span></div><div class="line">    ctx.moveTo(dotted.x - edge / <span class="number">2</span>, dotted.y - edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x + edge / <span class="number">2</span>, dotted.y - edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x + edge / <span class="number">2</span>, dotted.y + edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x - edge / <span class="number">2</span>, dotted.y + edge / <span class="number">2</span>);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
<p><strong>方法二：面向对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DrawDotted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="keyword">this</span>.edge = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*dotted 对象  x y 轴坐标*/</span></div><div class="line">    DrawDotted.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">dotted</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.beginPath();</div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.closePath();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> drawDotted = <span class="keyword">new</span> DrawDotted();</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">100</span>&#125;);</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;);</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">200</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>绘制折线图</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/12.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*假设一组  基于坐标轴的*/</span></div><div class="line">  <span class="keyword">var</span> data = [</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">80</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">120</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">300</span>, <span class="attr">y</span>: <span class="number">250</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">400</span>, <span class="attr">y</span>: <span class="number">340</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">500</span>, <span class="attr">y</span>: <span class="number">230</span>&#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> LineChart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/*绘制工具*/</span></div><div class="line">      <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">      <span class="comment">/*坐标原点*/</span></div><div class="line">      <span class="keyword">this</span>.space = <span class="number">20</span>;</div><div class="line">      <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">      <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</div><div class="line">      <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</div><div class="line">      <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</div><div class="line">      <span class="comment">/*箭头大小*/</span></div><div class="line">      <span class="keyword">this</span>.arrow = <span class="number">10</span>;</div><div class="line">      <span class="comment">/*点相关  点大小*/</span></div><div class="line">      <span class="keyword">this</span>.edge = <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*初始化方法*/</span></div><div class="line">  LineChart.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.drawAxis();</div><div class="line">      <span class="keyword">this</span>.drawDotted(data);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*绘制坐标轴*/</span></div><div class="line">  LineChart.prototype.drawAxis = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/*X轴*/</span></div><div class="line">      <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow, <span class="keyword">this</span>.y0 + <span class="keyword">this</span>.arrow/<span class="number">2</span>);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow, <span class="keyword">this</span>.y0 - <span class="keyword">this</span>.arrow/<span class="number">2</span>);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.stroke();</div><div class="line">      <span class="keyword">this</span>.ctx.fill();</div><div class="line">      <span class="comment">/*Y轴*/</span></div><div class="line">      <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow/<span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow/<span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</div><div class="line">      <span class="keyword">this</span>.ctx.stroke();</div><div class="line">      <span class="keyword">this</span>.ctx.fill();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*转换点坐标*/</span></div><div class="line">  LineChart.prototype.formatDot = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">var</span> canvasData = [];</div><div class="line">      data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> cx = item.x + that.x0;</div><div class="line">          <span class="keyword">var</span> cy = that.y0 - item.y;</div><div class="line">          canvasData.push(&#123;<span class="attr">x</span>:cx,<span class="attr">y</span>:cy&#125;);</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> canvasData;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*绘制多个点*/</span></div><div class="line">  LineChart.prototype.drawDotted = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="comment">/*转换*/</span></div><div class="line">      <span class="keyword">var</span> canvasData = <span class="keyword">this</span>.formatDot(data);</div><div class="line">      <span class="built_in">console</span>.log(canvasData);</div><div class="line">      canvasData.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, i</span>) </span>&#123;</div><div class="line">          that.ctx.beginPath();</div><div class="line">          that.ctx.moveTo(item.x - that.edge /<span class="number">2</span> , item.y - that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x + that.edge /<span class="number">2</span> , item.y - that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x + that.edge /<span class="number">2</span> , item.y + that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x - that.edge /<span class="number">2</span> , item.y + that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.closePath();</div><div class="line">          that.ctx.fill();</div><div class="line"></div><div class="line">          that.ctx.beginPath();</div><div class="line">          <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">              that.ctx.moveTo(that.x0,that.y0);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">              that.ctx.moveTo(canvasData[i<span class="number">-1</span>].x,canvasData[i<span class="number">-1</span>].y)</div><div class="line">          &#125;</div><div class="line">          that.ctx.lineTo(item.x,item.y);</div><div class="line">          that.ctx.stroke();</div><div class="line"></div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">new</span> LineChart().init(data);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="external">w3school</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">Canvas_API</a></li>
</ul>
<h3 id="Canvas图形绘制"><a href="#Canvas图形绘制" class="headerlink" title="Canvas图形绘制"></a>Canvas图形绘制</h3><h4 id="矩形绘制"><a href="#矩形绘制" class="headerlink" title="矩形绘制"></a>矩形绘制</h4><ul>
<li>rect(x,y,w,h) 没有独立路径</li>
<li>strokeRect(x,y,w,h) 有独立路径，不影响别的绘制</li>
<li>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</li>
<li>clearRect(x,y,w,h) 擦除矩形区域</li>
</ul>
<h4 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h4><ul>
<li>弧度概念</li>
<li>arc()<ul>
<li>x 圆心横坐标</li>
<li>y 圆心纵坐标</li>
<li>r 半径</li>
<li>startAngle 开始角度</li>
<li>endAngle 结束角度</li>
<li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li>
</ul>
</li>
</ul>
<h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul>
<li>ctx.font = ‘微软雅黑’ 设置字体</li>
<li>strokeText()</li>
<li>fillText(text,x,y,maxWidth)<ul>
<li>text 要绘制的文本</li>
<li>x,y 文本绘制的坐标（文本左下角）</li>
<li>maxWidth 设置文本最大宽度，可选参数</li>
</ul>
</li>
<li>ctx.textAlign文本水平对齐方式，相对绘制坐标来说的<ul>
<li>left</li>
<li>center</li>
<li>right</li>
<li>start 默认</li>
<li>end</li>
<li>direction属性css(rtl ltr) start和end于此相关<ul>
<li>如果是ltr,start和left表现一致</li>
<li>如果是rtl,start和right表现一致</li>
</ul>
</li>
</ul>
</li>
<li>ctx.textBaseline 设置基线（垂直对齐方式  ）<ul>
<li>top 文本的基线处于文本的正上方，并且有一段距离</li>
<li>middle 文本的基线处于文本的正中间</li>
<li>bottom 文本的基线处于文本的证下方，并且有一段距离</li>
<li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li>
<li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li>
<li>ideographic 和bottom相似，但是不一样</li>
</ul>
</li>
<li>measureText() 获取文本宽度obj.width</li>
</ul>
<h4 id="实例练习-1"><a href="#实例练习-1" class="headerlink" title="实例练习"></a>实例练习</h4><ul>
<li>绘制扇形</li>
<li>绘制圆角矩形</li>
<li>绘制圆</li>
<li>绘制饼图</li>
</ul>
<h3 id="做动画"><a href="#做动画" class="headerlink" title="做动画"></a>做动画</h3><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul>
<li>drawImage()<ul>
<li>三个参数drawImage(img,x,y)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y 图片绘制的左上角</li>
</ul>
</li>
<li>五个参数drawImage(img,x,y,w,h)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y 图片绘制的左上角</li>
<li>w,h 图片绘制尺寸设置(图片缩放，不是截取)</li>
</ul>
</li>
<li>九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y,w,h 图片中的一个矩形区域</li>
<li>x1,y1,w1,h1 画布中的一个矩形区域</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h4><ul>
<li>绘制精灵图</li>
<li>动起来</li>
<li>控制边界</li>
<li>键盘控制</li>
</ul>
<h4 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h4><ul>
<li>平移 移动画布的原点<ul>
<li>translate(x,y) 参数表示移动目标点的坐标</li>
</ul>
</li>
<li>缩放<ul>
<li>scale(x,y) 参数表示宽高的缩放比例</li>
</ul>
</li>
<li>旋转<ul>
<li>rotate(angle) 参数表示旋转角度</li>
</ul>
</li>
</ul>
<h3 id="flappybird小游戏"><a href="#flappybird小游戏" class="headerlink" title="flappybird小游戏"></a>flappybird小游戏</h3><h4 id="小游戏开发步骤"><a href="#小游戏开发步骤" class="headerlink" title="小游戏开发步骤"></a>小游戏开发步骤</h4><h4 id="绘制小鸟"><a href="#绘制小鸟" class="headerlink" title="绘制小鸟"></a>绘制小鸟</h4><h4 id="绘制小鸟下落"><a href="#绘制小鸟下落" class="headerlink" title="绘制小鸟下落"></a>绘制小鸟下落</h4><h4 id="绘制鸟头旋转"><a href="#绘制鸟头旋转" class="headerlink" title="绘制鸟头旋转"></a>绘制鸟头旋转</h4><h4 id="绘制小鸟上跳"><a href="#绘制小鸟上跳" class="headerlink" title="绘制小鸟上跳"></a>绘制小鸟上跳</h4><h4 id="控制多张图加载"><a href="#控制多张图加载" class="headerlink" title="控制多张图加载"></a>控制多张图加载</h4><h4 id="绘制天空"><a href="#绘制天空" class="headerlink" title="绘制天空"></a>绘制天空</h4><h4 id="绘制管道"><a href="#绘制管道" class="headerlink" title="绘制管道"></a>绘制管道</h4><h4 id="小游戏面向对象封装"><a href="#小游戏面向对象封装" class="headerlink" title="小游戏面向对象封装"></a>小游戏面向对象封装</h4><h4 id="路径判断"><a href="#路径判断" class="headerlink" title="路径判断"></a>路径判断</h4><ul>
<li>isPointInPath()</li>
<li>isPointInStroke()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Canvas&quot;&gt;&lt;a href=&quot;#Canvas&quot; class=&quot;headerlink&quot; title=&quot;Canvas&quot;&gt;&lt;/a&gt;Canvas&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dash
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/28/js%E5%9F%BA%E7%A1%8003/"/>
    <id>http://yoursite.com/2017/08/28/js基础03/</id>
    <published>2017-08-28T12:23:33.012Z</published>
    <updated>2017-07-26T07:45:00.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-函数"><a href="#1-1-函数" class="headerlink" title="1.1. 函数"></a>1.1. <strong>函数</strong></h2><h3 id="1-1-1-函数的声明和调用"><a href="#1-1-1-函数的声明和调用" class="headerlink" title="1.1.1. 函数的声明和调用"></a>1.1.1. <strong>函数的声明和调用</strong></h3><p>函数的声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//函数体 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数的调用</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>@函数的声明和调用<em>**</em></strong></p>
<h3 id="1-1-2-函数的参数"><a href="#1-1-2-函数的参数" class="headerlink" title="1.1.2. 函数的参数"></a>1.1.2. <strong>函数的参数</strong></h3><p>有参数的函数的<strong>声明</strong>（声明中的参数只是一个占位符，没有实际的值，是形式参数，即<strong>形参</strong>）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>) </span>&#123;</div><div class="line">	<span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有参数的函数的<strong>调用</strong>（调用时传入的参数才是有真正数值的参数，是实际参数，即<strong>实参</strong>）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名(参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..);</div></pre></td></tr></table></figure>
<p><strong>@函数的参数</strong></p>
<h3 id="1-1-3-函数的返回值"><a href="#1-1-3-函数的返回值" class="headerlink" title="1.1.3. 函数的返回值"></a>1.1.3. <strong>函数的返回值</strong></h3><p>在函数中通过return关键字将要返回值返回</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> 要返回的值;</div></pre></td></tr></table></figure>
<h3 id="1-1-4-函数高级概念"><a href="#1-1-4-函数高级概念" class="headerlink" title="1.1.4. 函数高级概念"></a>1.1.4. <strong>函数高级概念</strong></h3><p><strong>@参数详解</strong><br>在JS中实参的个数和形参的个数可以不一致<br><strong>@返回值详解</strong><br>函数的返回值是什么，调用这个函数就相当于调用什么，如果没有回值则为undefined<br>函数在执行完成return语句后便会退出函数，后面的代码不会执行<br><strong>@两种定义方式</strong><br>函数声明<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数表达式<br>        var fn2 = function () {<br>            //函数体<br>        };<br><strong>@匿名函数</strong><br>匿名函数（没有名字的函数）<br>     function () {<br>        //函数体<br>     }<br><strong>@递归调用</strong><br>程序调用自身的编程技巧称为递归<br><strong>@回调函数</strong><br>函数也是一种普通的数据类型<br>因此函数也可以被当作参数传递<br>被当作参数传递的函数叫做回调函数</p>
<h2 id="1-2-对象"><a href="#1-2-对象" class="headerlink" title="1.2. 对象"></a>1.2. <strong>对象</strong></h2><p>从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用<strong>属性</strong>表示，事物的行为可以用<strong>方法</strong>表示<br>从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对<strong>变量</strong>和<strong>函数</strong>进行管理<br>初期我们甚至可以把他简单地理解为一个工具箱</p>
<h3 id="1-2-1-键值对"><a href="#1-2-1-键值对" class="headerlink" title="1.2.1. 键值对"></a>1.2.1. <strong>键值对</strong></h3><p>键值对就是一种对应关系，通过键能够方便地找到值</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">键:值    <span class="selector-tag">key</span><span class="selector-pseudo">:value</span>    <span class="selector-tag">k</span><span class="selector-pseudo">:v</span></div></pre></td></tr></table></figure>
<h3 id="1-2-2-对象的声明"><a href="#1-2-2-对象的声明" class="headerlink" title="1.2.2. 对象的声明"></a>1.2.2. <strong>对象的声明</strong></h3><p>通过构造函数声明（更加通用）</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
<p>通过字面量声明（更加简便）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var obj</span>= &#123;&#125;;</div></pre></td></tr></table></figure>
<p>对象具有属性和方法<br>属性 用来描述对象的特征 一般是名词 对应变量<br>方法 用来描述对象的行为 一般是动词 对应函数</p>
<h3 id="1-2-3-属性"><a href="#1-2-3-属性" class="headerlink" title="1.2.3. 属性"></a>1.2.3. <strong>属性</strong></h3><p>属性的定义<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">对象.属性名 </span>=<span class="string"> 值</span></div></pre></td></tr></table></figure></p>
<p>属性的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure></p>
<h3 id="1-2-4-方法"><a href="#1-2-4-方法" class="headerlink" title="1.2.4. 方法"></a>1.2.4. <strong>方法</strong></h3><p>方法的定义</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//函数体 &#125;</span></div></pre></td></tr></table></figure>
<p>方法的调用</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名<span class="comment">()</span></div></pre></td></tr></table></figure>
<p><strong>@找对象练习</strong></p>
<h2 id="1-3-其他概念"><a href="#1-3-其他概念" class="headerlink" title="1.3. 其他概念"></a>1.3. <strong>其他概念</strong></h2><h3 id="1-3-1-对象字面量"><a href="#1-3-1-对象字面量" class="headerlink" title="1.3.1. 对象字面量"></a>1.3.1. <strong>对象字面量</strong></h3><p><strong>@对象字面量</strong><br>        var o = {<br>          name : “zs”,<br>            age : 18,<br>            sayHi : function() {<br>                console.log(this.name);<br>            }<br>        };</p>
<h3 id="1-3-2-对象标记法"><a href="#1-3-2-对象标记法" class="headerlink" title="1.3.2. 对象标记法"></a>1.3.2. <strong>对象标记法</strong></h3><p><strong>@对象标记法</strong><br>JavaScript Object Notation（JavaScript对象标记法）是仿照JS中对象字面量的格式去书写的一串用来记录对象数据的<strong>字符串</strong>，可以用于数据传输。将来学习AJAX会详细学习。</p>
<h3 id="1-3-3-访问属性的两种方式"><a href="#1-3-3-访问属性的两种方式" class="headerlink" title="1.3.3. 访问属性的两种方式"></a>1.3.3. <strong>访问属性的两种方式</strong></h3><p><strong>@访问属性的两种方式</strong><br>点语法（简单）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure></p>
<p>中括号（灵活）<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象<span class="string">[“属性名”]</span></div></pre></td></tr></table></figure></p>
<h3 id="1-3-4-遍历的两种方式"><a href="#1-3-4-遍历的两种方式" class="headerlink" title="1.3.4. 遍历的两种方式"></a>1.3.4. <strong>遍历的两种方式</strong></h3><p><strong>@遍历的两种方式</strong><br>通过for可以对集合进行有序的遍历<br>通过forin可以对集合进行有序的遍历<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> json) &#123; 语句 &#125;</div></pre></td></tr></table></figure></p>
<p>k变量代表的是json中的各个属性（key）和 var i = 0中的i是一个意思 名字不同而已</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-函数&quot;&gt;&lt;a href=&quot;#1-1-函数&quot; class=&quot;headerlink&quot; title=&quot;1.1. 函数&quot;&gt;&lt;/a&gt;1.1. &lt;strong&gt;函数&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-函数的声明和调用&quot;&gt;&lt;a href=&quot;#1-1-
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/28/js%E5%9F%BA%E7%A1%8002/"/>
    <id>http://yoursite.com/2017/08/28/js基础02/</id>
    <published>2017-08-28T12:23:32.994Z</published>
    <updated>2017-07-25T08:51:15.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-数组"><a href="#1-1-数组" class="headerlink" title="1.1. 数组"></a>1.1. <strong>数组</strong></h2><h3 id="1-1-1-数组的声明"><a href="#1-1-1-数组的声明" class="headerlink" title="1.1.1. 数组的声明"></a>1.1.1. <strong>数组的声明</strong></h3><p>通过构造函数声明（更加通用）</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div></pre></td></tr></table></figure>
<p>通过字面量声明（更加简便）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var arr</span> = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div></pre></td></tr></table></figure>
<h3 id="1-1-2-数组的赋值和取值"><a href="#1-1-2-数组的赋值和取值" class="headerlink" title="1.1.2. 数组的赋值和取值"></a>1.1.2. <strong>数组的赋值和取值</strong></h3><p><strong>赋值</strong></p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数组名<span class="string">[索引号]</span> = 值 //arr<span class="string">[0]</span>=<span class="number">100</span></div></pre></td></tr></table></figure>
<p><strong>取值</strong>（通过数组名和索引即可取到对应的值）</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数组名<span class="string">[索引号]</span>  //console.log(arr<span class="string">[0]</span>)</div></pre></td></tr></table></figure>
<h3 id="1-1-3-数组的遍历（循环-枚举）"><a href="#1-1-3-数组的遍历（循环-枚举）" class="headerlink" title="1.1.3. 数组的遍历（循环 枚举）"></a>1.1.3. <strong>数组的遍历（循环 枚举）</strong></h3><p><strong>@数组</strong></p>
<p>数组的索引是从0开始的</p>
<p>数组的长度可以通过arr.length获取</p>
<p>由于数组的索引从0开始，所以最后一个值的索引为arr.length-1</p>
<p><strong>通过for循环遍历数组</strong></p>
   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt;= arr.<span class="built_in">length</span> - <span class="number">1</span>; <span class="built_in">i</span>++) &#123;</div><div class="line">      	console.log(arr[i]);</div><div class="line">  	&#125;</div></pre></td></tr></table></figure>
<p>可<strong>简写</strong>为：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</code></pre><p><strong>@数组练习</strong></p>
<p><strong>@数组length的应用</strong></p>
<p>往数组中添加新元素，数组的length会增加</p>
<p>通过给arr.length赋值可以改变数组的长度</p>
<p><strong>@数组练习</strong></p>
<h3 id="1-1-4-冒泡排序"><a href="#1-1-4-冒泡排序" class="headerlink" title="1.1.4. 冒泡排序"></a>1.1.4. <strong>冒泡排序</strong></h3><p><strong>@冒泡排序</strong></p>
<p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps4C0C.tmp.jpg" alt="img"> <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps4C1D.tmp.jpg" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">58</span>];</div><div class="line"><span class="comment">//循环控制趟数</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="comment">//控制两两比较的次数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</div><div class="line">        <span class="comment">//两两比较   从小到大排序</span></div><div class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">            <span class="comment">//交换位置</span></div><div class="line">            <span class="keyword">var</span> tmp = arr[j];</div><div class="line">            arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">            arr[j + <span class="number">1</span>] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-数组&quot;&gt;&lt;a href=&quot;#1-1-数组&quot; class=&quot;headerlink&quot; title=&quot;1.1. 数组&quot;&gt;&lt;/a&gt;1.1. &lt;strong&gt;数组&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-数组的声明&quot;&gt;&lt;a href=&quot;#1-1-1-数
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/28/js%E5%9F%BA%E7%A1%8001/"/>
    <id>http://yoursite.com/2017/08/28/js基础01/</id>
    <published>2017-08-28T12:23:32.993Z</published>
    <updated>2017-07-25T08:37:02.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1. 介绍"></a>1.1. <strong>介绍</strong></h2><h3 id="1-1-1-输出语句"><a href="#1-1-1-输出语句" class="headerlink" title="1.1.1. 输出语句"></a>1.1.1. <strong>输出语句</strong></h3><p><strong>@常用输出语句</strong><br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps90F2.tmp.jpg" alt="img"> </p>
<h3 id="1-1-2-代码注释"><a href="#1-1-2-代码注释" class="headerlink" title="1.1.2. 代码注释"></a>1.1.2. <strong>代码注释</strong></h3><p><strong>@代码注释</strong><br>//单行注释<br>/<em> 多行注释 </em>/<br>书写多行注释的时候注意不要发生嵌套<br>/** + 回车 用于函数的说明</p>
<h3 id="1-1-3-书写位置"><a href="#1-1-3-书写位置" class="headerlink" title="1.1.3. 书写位置"></a>1.1.3. <strong>书写位置</strong></h3><p><strong>@书写位置</strong><br>可以写在HTML页面内的任意位置或者从外部引用（可以类比样式代码的书写位置）</p>
<h3 id="1-1-4-标签属性"><a href="#1-1-4-标签属性" class="headerlink" title="1.1.4. 标签属性"></a>1.1.4. <strong>标签属性</strong></h3><p><strong>@script标签的属性</strong><br><strong>type类型 src 地址</strong><br><strong>async</strong>异步加载，加载完成立即执行 <strong>defer</strong>异步加载，页面上的东西都执行完了才执行（了解即可!!!）</p>
<h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2. 变量"></a>1.2. <strong>变量</strong></h2><h3 id="1-2-1-变量的命名规范"><a href="#1-2-1-变量的命名规范" class="headerlink" title="1.2.1. 变量的命名规范"></a>1.2.1. <strong>变量的命名规范</strong></h3><p><strong>@变量的命名</strong><br><strong>规则(必须遵守)</strong><br>区分大小写<br>不能是关键字和保留字<br>由字母、数字、下划线、$ 组成且开头不能是数字</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tips:关键字和保留字那么多，记不住怎么办？</div><div class="line">首先，关键字就是你平时用的那些，而保留字在非严格模式下不能使用的只有：</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">enum</span> <span class="keyword">extends</span> <span class="title">super</span> <span class="title">const</span> <span class="title">export</span> <span class="title">import</span></span></div><div class="line"><span class="class"><span class="title">而且，其实如果你使用了关键webstorm是有提示的，但是常见的几个最好还是记住</span></span></div></pre></td></tr></table></figure>
<p><strong>规范(建议遵守)</strong><br>变量的名称要有实际意义<br>变量的命名遵守驼峰命名法，首字母小写,第二个单词的首字母大写 例如：userName</p>
<h3 id="1-2-2-变量的声明赋值"><a href="#1-2-2-变量的声明赋值" class="headerlink" title="1.2.2. 变量的声明赋值"></a>1.2.2. <strong>变量的声明赋值</strong></h3><p><strong>@变量的声明和赋值</strong><br>书写格式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> 变量名 = 值</div></pre></td></tr></table></figure>
<p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps90F3.tmp.jpg" alt="img"> </p>
<h3 id="1-2-3-练习"><a href="#1-2-3-练习" class="headerlink" title="1.2.3. 练习"></a>1.2.3. <strong>练习</strong></h3><p><strong>@交换两个变量的值</strong><br><strong>@不使用第三个变量</strong></p>
<h3 id="1-2-4-弱类型"><a href="#1-2-4-弱类型" class="headerlink" title="1.2.4. 弱类型"></a>1.2.4. <strong>弱类型</strong></h3><p><strong>@弱类型</strong><br>JavaScript是弱类型的语言，即声明不同数据类型的变量使用同一个关键字var</p>
<h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3. 数据类型"></a>1.3. <strong>数据类型</strong></h2><h3 id="1-3-1-数据类型"><a href="#1-3-1-数据类型" class="headerlink" title="1.3.1. 数据类型"></a>1.3.1. <strong>数据类型</strong></h3><p>声明的时候不用考虑类型，但是处理和计算的时候要考虑类型<br><strong>基本数据类型</strong><br>number数值型 string字符串型 boolean布尔型 undefined 未定义 null空<br><strong>复杂数据类型</strong><br>object对象<br><strong>使用typeof关键字可以查看变量的数据类型</strong></p>
<h3 id="1-3-2-数值类型"><a href="#1-3-2-数值类型" class="headerlink" title="1.3.2. 数值类型"></a>1.3.2. <strong>数值类型</strong></h3><p><strong>@数值类型</strong><br><strong>字面量</strong></p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">num</span> = 数字;</div></pre></td></tr></table></figure>
<p><strong>浮点数</strong><br>计算浮点数时会丢失精度<br>我们通常用整数的计算来表示浮点数的计算<br>不要以两个浮点数是否相等作为条件判断的依据（判断范围还是可以的）<br><strong>NaN</strong><br>NaN是数值类型<br>NaN不等于自身</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">( )</span></span> 不是有意义的数值返回true</div></pre></td></tr></table></figure>
<h3 id="1-3-3-字符串类型"><a href="#1-3-3-字符串类型" class="headerlink" title="1.3.3. 字符串类型"></a>1.3.3. <strong>字符串类型</strong></h3><p><strong>@字符串型</strong><br><strong>字面量</strong></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var str</span> = “字符串”;</div></pre></td></tr></table></figure>
<p><strong>字符串的长度</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.<span class="built_in">length</span></div><div class="line"><span class="built_in">length</span>就是长度的意思</div></pre></td></tr></table></figure>
<p><strong>转义符</strong></p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">\n</span> 换行 <span class="string">\’单引号</span> <span class="string">\”双引号</span> <span class="string">\斜杠</span></div></pre></td></tr></table></figure>
<p><strong>字符串的不可变性</strong><br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps90F4.tmp.jpg" alt="img"><br>由于字符串有不可变性，在大量拼接字符串的时候会非常消耗内存。</p>
<h3 id="1-3-4-布尔类型"><a href="#1-3-4-布尔类型" class="headerlink" title="1.3.4. 布尔类型"></a>1.3.4. <strong>布尔类型</strong></h3><p><strong>@布尔类型</strong><br>所有类型的值都可以转化成布尔值<br>会转化成false的值有： 空字符串 数值零NaN undefined null</p>
<h3 id="1-3-5-undefined类型"><a href="#1-3-5-undefined类型" class="headerlink" title="1.3.5. undefined类型"></a>1.3.5. <strong>undefined类型</strong></h3><p><strong>@undefined</strong><br>表示声明但未赋值的变量</p>
<h2 id="1-4-类型转换"><a href="#1-4-类型转换" class="headerlink" title="1.4. 类型转换"></a>1.4. <strong>类型转换</strong></h2><h3 id="1-4-1-转换成字符串"><a href="#1-4-1-转换成字符串" class="headerlink" title="1.4.1. 转换成字符串"></a>1.4.1. <strong>转换成字符串</strong></h3><p><strong>@转换成字符串</strong><br>将任意类型转化为字符串</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">String</span><span class="params">(值)</span></span></div></pre></td></tr></table></figure>
<p>大部分类型都有toString方法</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">值<span class="selector-class">.toString</span>()</div></pre></td></tr></table></figure>
<p>小技巧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">值+””</div></pre></td></tr></table></figure>
<h3 id="1-4-2-转化成数值型"><a href="#1-4-2-转化成数值型" class="headerlink" title="1.4.2. 转化成数值型"></a>1.4.2. <strong>转化成数值型</strong></h3><p><strong>@转换成数值</strong><br>将任意类型转化为数值型</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Number</span><span class="params">(值)</span></span></div></pre></td></tr></table></figure>
<p>将字符串转化为数值</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">parseInt</span><span class="params">(“字符串”)</span></span>  parseFloat(“字符串”)</div></pre></td></tr></table></figure>
<p>小技巧</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">值<span class="number">-0</span></div></pre></td></tr></table></figure>
<h3 id="1-4-3-转化成布尔值"><a href="#1-4-3-转化成布尔值" class="headerlink" title="1.4.3. 转化成布尔值"></a>1.4.3. <strong>转化成布尔值</strong></h3><p><strong>@转换成布尔值</strong><br>将任意类型转化为布尔值</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Boolean</span><span class="params">(值)</span></span></div></pre></td></tr></table></figure>
<p>条件判断中会自动转换</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">if</span><span class="params">(值)</span></span></div></pre></td></tr></table></figure>
<p>小技巧</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!!值</div></pre></td></tr></table></figure>
<h2 id="1-5-操作符"><a href="#1-5-操作符" class="headerlink" title="1.5. 操作符"></a>1.5. <strong>操作符</strong></h2><p><strong>@运算符</strong></p>
<h3 id="1-5-1-一元运算符"><a href="#1-5-1-一元运算符" class="headerlink" title="1.5.1. 一元运算符"></a>1.5.1. <strong>一元运算符</strong></h3><p><strong>@递增和递减</strong><br>递增++ 递减–<br>a++ 先参与运算 后自加<br>++a 先自加 后参与运算</p>
<h3 id="1-5-2-逻辑运算符"><a href="#1-5-2-逻辑运算符" class="headerlink" title="1.5.2. 逻辑运算符"></a>1.5.2. <strong>逻辑运算符</strong></h3><p><strong>@逻辑运算符</strong><br><strong>逻辑运算</strong><br>&amp;&amp;和||都采取短路运算，即<strong>第一个能够决定结果就不再看第二个</strong>了<br>&amp;&amp; 的要求比较严格 要<strong>两个都是true才是true</strong> 所以看到第一个是false就没有必要继续完后看了</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(false <span class="meta">&amp;&amp; 不管了);</span></div></pre></td></tr></table></figure>
<p>||   的要求比较宽松  要<strong>两个都是false才是false</strong> 所以看到第一个是true就没有必要继续完后看了</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(true <span class="string">|| 不管了);</span></div></pre></td></tr></table></figure>
<p><strong>短路运算（了解）</strong><br>&amp;&amp;和||不但可以操作布尔类型的值，对<strong>其他类型的值</strong>也可以进行操作，并<strong>返回可以决定表达式结果的那个值</strong>。</p>
<h3 id="1-5-3-赋值运算符"><a href="#1-5-3-赋值运算符" class="headerlink" title="1.5.3. 赋值运算符"></a>1.5.3. <strong>赋值运算符</strong></h3><p><strong>@赋值运算符</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">a</span>+=b 等价于 <span class="keyword">a</span>=<span class="keyword">a</span>+b</div></pre></td></tr></table></figure>
<p><strong>@表达式练习</strong></p>
<h3 id="1-5-4-运算符的优先级"><a href="#1-5-4-运算符的优先级" class="headerlink" title="1.5.4. 运算符的优先级"></a>1.5.4. <strong>运算符的优先级</strong></h3><p>尽量记，记不住可以查，或者使用括号</p>
<h2 id="1-6-语句"><a href="#1-6-语句" class="headerlink" title="1.6. 语句"></a>1.6. <strong>语句</strong></h2><h3 id="1-6-1-选择语句if"><a href="#1-6-1-选择语句if" class="headerlink" title="1.6.1. 选择语句if"></a>1.6.1. <strong>选择语句if</strong></h3><pre><code>if (condition) {
    statement1
} else if (condition) {
    statement2
} else {
    statement3
}
</code></pre><p><strong>@选择语句If</strong></p>
<h3 id="1-6-2-三元表达式"><a href="#1-6-2-三元表达式" class="headerlink" title="1.6.2. 三元表达式"></a>1.6.2. <strong>三元表达式</strong></h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式3</div></pre></td></tr></table></figure>
<p><strong>@三元表达式</strong></p>
<h3 id="1-6-3-选择语句switch"><a href="#1-6-3-选择语句switch" class="headerlink" title="1.6.3. 选择语句switch"></a>1.6.3. <strong>选择语句switch</strong></h3><pre><code>switch (expression) {
    case value:
        statement
        break;
    case value:
        statement
        break;
    default:
        statement
}
</code></pre><p><strong>@选择语句switch</strong></p>
<h3 id="1-6-4-循环语句for"><a href="#1-6-4-循环语句for" class="headerlink" title="1.6.4. 循环语句for"></a>1.6.4. <strong>循环语句for</strong></h3><pre><code>for (initialization; expression; post-loop-expression)｛
    statement 
｝
</code></pre><p>initialization表示：初始化表达式<br>expression表示：控制表达式<br>post-loop-expression表示：循环后表达式<br>三者都是可选的<br><strong>@循环语句for</strong></p>
<h3 id="1-6-5-break和continue"><a href="#1-6-5-break和continue" class="headerlink" title="1.6.5. break和continue"></a>1.6.5. <strong>break和continue</strong></h3><p>break跳出当前循环，执行循环后的语句<br>continue跳出当前循环，继续执行循环<br><strong>@break和continue</strong></p>
<h3 id="1-6-6-循环语句while"><a href="#1-6-6-循环语句while" class="headerlink" title="1.6.6. 循环语句while"></a>1.6.6. <strong>循环语句while</strong></h3><p><strong>while语句 </strong>先判断后执行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">while</span><span class="params">(expression)</span></span> statement</div></pre></td></tr></table></figure>
<p><strong>do while 语句</strong> 先执行后判断</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;<span class="keyword">statement</span>&#125; <span class="keyword">while</span> (expression);</div></pre></td></tr></table></figure>
<p><strong>@循环语句while</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1. 介绍&quot;&gt;&lt;/a&gt;1.1. &lt;strong&gt;介绍&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-输出语句&quot;&gt;&lt;a href=&quot;#1-1-1-输出
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/28/js%E5%9F%BA%E7%A1%8004/"/>
    <id>http://yoursite.com/2017/08/28/js基础04/</id>
    <published>2017-08-28T12:23:32.965Z</published>
    <updated>2017-07-26T07:50:54.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-对象"><a href="#1-1-对象" class="headerlink" title="1.1. 对象"></a>1.1. <strong>对象</strong></h2><h3 id="1-1-1-对象的声明和使用"><a href="#1-1-1-对象的声明和使用" class="headerlink" title="1.1.1. 对象的声明和使用"></a>1.1.1. <strong>对象的声明和使用</strong></h3><p>通过构造函数声明（更加通用）</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
<p>通过字面量声明（更加简便）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var obj</span>= &#123;&#125;;</div></pre></td></tr></table></figure>
<p>对象具有属性和方法<br>属性 用来描述对象的特征 一般是名词 对应变量<br>方法 用来描述对象的行为 一般是动词 对应函数<br><strong>属性</strong><br>属性的定义</p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">对象.属性名 </span>=<span class="string"> 值</span></div></pre></td></tr></table></figure>
<p>属性的调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure>
<p><strong>方法</strong><br>方法的定义</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//函数体 &#125;</span></div></pre></td></tr></table></figure>
<p>方法的调用</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名<span class="comment">()</span></div></pre></td></tr></table></figure>
<h2 id="1-2-关于this的指向"><a href="#1-2-关于this的指向" class="headerlink" title="1.2. 关于this的指向"></a>1.2. <strong>关于this的指向</strong></h2><h3 id="1-2-1-全局上下文"><a href="#1-2-1-全局上下文" class="headerlink" title="1.2.1. 全局上下文"></a>1.2.1. <strong>全局上下文</strong></h3><p>全局运行上下文中（在任何函数体外部），this 指代全局对象</p>
<h3 id="1-2-2-函数上下文"><a href="#1-2-2-函数上下文" class="headerlink" title="1.2.2. 函数上下文*"></a>1.2.2. <strong>函数上下文*</strong></h3><p><strong>对象方法中的this</strong>指的是该方法所属的对象<br><strong>直接调用中的this</strong>指的是全局对象<br>总之，函数上下文中（在函数内部），this指的是当前函数所属的对象</p>
<h3 id="1-2-3-构造函数中"><a href="#1-2-3-构造函数中" class="headerlink" title="1.2.3. 构造函数中"></a>1.2.3. <strong>构造函数中</strong></h3><p>当一个函数被作为构造函数使用时（前面加new关键字），new关键字会让this的指向改变，并让其成为当前函数的返回值</p>
<h2 id="1-3-批量创建对象"><a href="#1-3-批量创建对象" class="headerlink" title="1.3. 批量创建对象"></a>1.3. <strong>批量创建对象</strong></h2><h3 id="1-3-1-工厂模式创建对象"><a href="#1-3-1-工厂模式创建对象" class="headerlink" title="1.3.1. 工厂模式创建对象"></a>1.3.1. <strong>工厂模式创建对象</strong></h3><p><strong>为什么要优化创建对象的方式</strong><br>因为对象在项目中被大规模的使用，所以每一点小小的改进都会对项目整体效率带来很大的提升，现阶段同学们还不可能有深刻的体会，只是让大家了解一下，后面讲项目大家自然就明白了。<br><strong>@工厂模式创建对象</strong><br>同类型对象，只是一些属性的值不同，通过对象字面量创建对象每次都要写那么多东西很费劲，我们可以<strong>将创建对象的过程封装进一个函数，只把发生变化的属性作为参数传入</strong>，从而简化对象创建的过程。<br>但是工厂模式只是创建出来一个普通的对象并将其返回，因此无法判断实例的具体类型。</p>
<h3 id="1-3-2-构造函数创建对象"><a href="#1-3-2-构造函数创建对象" class="headerlink" title="1.3.2. 构造函数创建对象"></a>1.3.2. <strong>构造函数创建对象</strong></h3><p><strong>@this和new</strong><br>利用new 关键字可以声明的对象。new 关键字可以让构造函数中this的指向改变，并让构造函数把this返回。<br><strong>@构造函数</strong><br>构造函数也是函数，只不过会默认返回一个对象。<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2C5.tmp.jpg" alt="img"> <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2C6.tmp.jpg" alt="img"><br><strong>@构造函数创建对象</strong><br>通过构造函数创建对象更方便（不需要创建对象并返回）。更重要的是可以通过instanceof来判断实例的类型了。 </p>
<h2 id="1-4-基本类型和复杂类型"><a href="#1-4-基本类型和复杂类型" class="headerlink" title="1.4. 基本类型和复杂类型"></a>1.4. <strong>基本类型和复杂类型</strong></h2><h3 id="1-4-1-分类"><a href="#1-4-1-分类" class="headerlink" title="1.4.1. 分类"></a>1.4.1. <strong>分类</strong></h3><p><strong>基本数据类型（值类型）：直接存储值</strong><br>number、string、boolean、undefined、null（基本类型只有这五个）<br><strong>复杂数据类型（引用类型）：存储引用</strong><br>object</p>
<h3 id="1-4-2-基本类型的复制"><a href="#1-4-2-基本类型的复制" class="headerlink" title="1.4.2. 基本类型的复制*"></a>1.4.2. <strong>基本类型的复制*</strong></h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2C7.tmp.jpg" alt="img"> </p>
<h3 id="1-4-3-复杂类型的复制"><a href="#1-4-3-复杂类型的复制" class="headerlink" title="1.4.3. 复杂类型的复制"></a>1.4.3. <strong>复杂类型的复制</strong></h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2C8.tmp.jpg" alt="img"> </p>
<h3 id="1-4-4-基本类型参数"><a href="#1-4-4-基本类型参数" class="headerlink" title="1.4.4. 基本类型参数"></a>1.4.4. <strong>基本类型参数</strong></h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2C9.tmp.jpg" alt="img"> </p>
<h3 id="1-4-5-复杂类型参数"><a href="#1-4-5-复杂类型参数" class="headerlink" title="1.4.5. 复杂类型参数"></a>1.4.5. <strong>复杂类型参数</strong></h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps2CA.tmp.jpg" alt="img"><br><strong>@复杂类型参数练习</strong> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-对象&quot;&gt;&lt;a href=&quot;#1-1-对象&quot; class=&quot;headerlink&quot; title=&quot;1.1. 对象&quot;&gt;&lt;/a&gt;1.1. &lt;strong&gt;对象&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-对象的声明和使用&quot;&gt;&lt;a href=&quot;#1-1-
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/28/hello-world/"/>
    <id>http://yoursite.com/2017/08/28/hello-world/</id>
    <published>2017-08-28T03:08:44.678Z</published>
    <updated>2017-08-21T04:34:46.874Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS基础知识</title>
    <link href="http://yoursite.com/2017/06/11/JS%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/06/11/JS基础/</id>
    <published>2017-06-11T08:03:00.000Z</published>
    <updated>2017-08-28T06:31:25.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS前置知识"><a href="#JS前置知识" class="headerlink" title="JS前置知识"></a>JS前置知识</h1><h2 id="浏览器以及网站相关介绍"><a href="#浏览器以及网站相关介绍" class="headerlink" title="浏览器以及网站相关介绍"></a>浏览器以及网站相关介绍</h2><blockquote>
<p><strong>浏览器定义</strong>：可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件</p>
</blockquote>
<pre><code>我们常规使用的五大浏览器：chorme，firefox，IE，Safari以及Oprea
从内核来看：有webkit，gecko，trident，presto

1、Trident内核代表产品Internet Explorer，又称其为IE内核。Trident（又称为MSHTML），是微软开发的
一种排版引擎。使用Trident渲染引擎的浏览器包括：IE、傲游、世界之窗浏览器、Avant、腾讯TT、Netscape 
8、NetCaptor、Sleipnir、GOSURF、GreenBrowser和KKman等。
2、Gecko内核代表作品Mozilla FirefoxGecko是一套开放源代码的、以C++编写的网页排版引擎。Gecko是最
流行的排版引擎之一，仅次于Trident。使用它的最著名浏览器有Firefox、Netscape6至9。
3、WebKit内核代表作品Safari、Chromewebkit 是一个开源项目，包含了来自KDE项目和苹果公司的一些组件
，主要用于Mac OS系统，它的特点在于源码结构清晰、渲染速度极快。缺点是对网页代码的兼容性不高，导致一
些编写不标准的网页无法正常显示。主要代表作品有Safari和Google的浏览器Chrome。
4、Presto内核代表作品OperaPresto是由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。
它取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及
Script语法的事件而重新排版。
</code></pre><p><a href="http://www.cnblogs.com/vajoy/p/3735553.html" target="_blank" rel="external">各主流浏览器内核介绍</a></p>
<p><a href="http://blog.csdn.net/ofsno/article/details/51164575" target="_blank" rel="external">了解四大主流浏览器内核</a></p>
<p><a href="http://www.cnblogs.com/zichi/p/5116764.html" target="_blank" rel="external">主流浏览器内核介绍</a></p>
<h3 id="1浏览器工作原理的介绍"><a href="#1浏览器工作原理的介绍" class="headerlink" title="1浏览器工作原理的介绍"></a>1浏览器工作原理的介绍</h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/01.jpg01.jpg" alt=""><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">说明：</div><div class="line">    1、User<span class="built_in"> Interface </span> 用户界面，我们所看到的浏览器</div><div class="line">    2、Browser engine  浏览器引擎，用来查询和操作渲染引擎</div><div class="line">    3、Rendering engine 用来显示请求的内容，负责解析HTML、CSS</div><div class="line">    4、Networking   网络，负责发送网络请求</div><div class="line">    5、JavaScript Interpreter(解析者)   JavaScript解析器，负责执行JavaScript的代码</div><div class="line">    6、UI Backend   UI后端，用来绘制类似组合框和弹出窗口</div><div class="line">    7、Data Persistence(持久化)  数据持久化，数据存储  cookie、HTML5中的sessionStorage</div></pre></td></tr></table></figure></p>
<h3 id="2网站工作原理的简单介绍"><a href="#2网站工作原理的简单介绍" class="headerlink" title="2网站工作原理的简单介绍"></a>2网站工作原理的简单介绍</h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/03.jpg03.jpg" alt=""></p>
<h2 id="为什么要有js？"><a href="#为什么要有js？" class="headerlink" title="为什么要有js？"></a>为什么要有js？</h2><pre><code>js设计的最初目的
    - 判断客户端表单输入验证(以前的网速慢)
    - 后来被一度用于小广告
 js现在的意义
    -页面特效（pc端的网页特效）
    -移动端（移动web和app）
    -异步和服务器交互 ajax
    -服务器端开发（nodeJs）
    -数据库甚至烤面包机都可以运行js了 （mongodb 嵌入式开发）
    -另外还可以抢月饼（阿里巴巴月饼事件）
js的历史总结：
    - javascript诞生于1995年
    -javascript的是由网景公司的布兰登艾奇开发的
    -javascript的前名叫livescript
</code></pre><h2 id="什么是JS语言？"><a href="#什么是JS语言？" class="headerlink" title="什么是JS语言？"></a>什么是JS语言？</h2><blockquote>
<p>javascript是一种运行在<strong><em>客户端</em></strong> 的<strong><em>脚本语言</em></strong> </p>
</blockquote>
<p>客户端：即接受服务的一端，与服务端相对应，在前端开发中，通常客户端指的就是浏览器。</p>
<p>脚本语言：也叫解释型语言，特点是<strong><em>执行一行，解释一行，如果发现报错，代码就停止执行</em></strong> 。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tips：脚本语言一般会有一个宿主环境（当前脚本运行并且起作用一个环境）</div><div class="line">类似的有：<span class="keyword">as</span>（actionScript flash宿主环境）</div></pre></td></tr></table></figure>
<blockquote>
<p>javascript的三个组成部分：ECMAScript、BOM、DOM</p>
</blockquote>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/02.jpg02.jpg" alt=""></p>
<p>ECMAScript：定义了javascript的语法规范，是js语法的基础核心。</p>
<p>BOM：定义一套操作浏览器功能的API，通过这些api能够更好的操作浏览器行为。</p>
<p>DOM：定义一套操作页面元素的API，通过使用这些api来操作页面元素。</p>
<blockquote>
<p>挑选一把称手的工具</p>
</blockquote>
<pre><code>txt,Nodpad++, Editplus
Dreamweaver 
Hbuilder，WebStorm,MyEclipse, Visual Studio
Sublime，bracket,Atom,vscode
Vim gvim
……
</code></pre><hr>
<h2 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h2><blockquote>
<p>书写Javascript代码有三种方式，第一种是直接在script标签中书写，第二种是将代码写在js文件中，通过script进行引入。第三种为内嵌入html结构中书写js，但不利于后期代码开发和维护，不推荐；</p>
</blockquote>
<p>直接在script中书写javascript代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">	alert(<span class="string">"今天天气真好呀"</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过script标签引入一个JS文件，需要指定src属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过在html标签中内嵌入脚本执行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('今天天气不错！')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<font color="#ff7600">tips：如果script标签指定了src属性，说明是想要引入一个js文件，这个时候不能继续在script标签中写JS代码，即便写了，也不会执行。</font>



<blockquote>
<p>script标签的书写位置，原则上来说，可以在页面中的任意位置书写script标签。</p>
</blockquote>
<ol>
<li>写在head标签中，style标签之后。</li>
<li>写在&lt;//body&gt;标签的前面。</li>
<li>写在的后面，即页面的最后面。</li>
</ol>
<blockquote>
<p>script的一些属性</p>
</blockquote>
<ul>
<li>language已废弃</li>
<li>src 表示要引入的外部文件</li>
<li>type 表示脚本语言的类型<ul>
<li>async(了解)   async=”async”</li>
</ul>
</li>
<li>值可以省略，立即异步下载外部JS下载完毕立即执行</li>
<li>defer(了解)  defer=”defer”</li>
<li>值可以省略，脚本延迟到文档完全被解析和显示后再执行</li>
</ul>
<h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><blockquote>
<p>在实际开发，常用1和3，并且1在控制台输出不影响页面正常显示，不会阻塞代码运行，灵活操作，在实际开发中用于代码调试较多。</p>
</blockquote>
<ol>
<li>console.log 控制台输出日志</li>
<li>document.write 往页面中写入内容</li>
<li>alert 弹框警告[^注释]</li>
<li>confirm 确认框[^注释]</li>
<li>prompt 输入框[^注释]</li>
</ol>
<p>[^注释]: window 是全局对象  是浏览器中的顶级对象  window.alert()中的window 可以省略不写</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>不被程序执行的代码。用于程序员标记代码，在后期的修改，以及他人的学习时有所帮助，在JS中，分为单行注释和多行注释</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是单行注释，只能注释一行</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	这是多行注释，不能嵌套</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>注释的作用：</p>
<pre><code>1. 模块划分，方便代码查找和维护
2. 用于解释复杂代码的逻辑，方便维护和后期开发。
</code></pre><p>要求：写代码的时候必须要写注释 不加注释是不道德的</p>
<p>【永无bug.js】</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//                            _ooOoo_</span></div><div class="line"><span class="comment">//                           o8888888o</span></div><div class="line"><span class="comment">//                           88" . "88</span></div><div class="line"><span class="comment">//                           (| -_- |)</span></div><div class="line"><span class="comment">//                           O\  =  /O</span></div><div class="line"><span class="comment">//                        ____/`---'\____</span></div><div class="line"><span class="comment">//                      .'  \\|     |//  `.</span></div><div class="line"><span class="comment">//                     /  \\|||  :  |||//  \</span></div><div class="line"><span class="comment">//                    /  _||||| -:- |||||-  \</span></div><div class="line"><span class="comment">//                    |   | \\\  -  /// |   |</span></div><div class="line"><span class="comment">//                    | \_|  ''\---/''  |   |</span></div><div class="line"><span class="comment">//                    \  .-\__  `-`  ___/-. /</span></div><div class="line"><span class="comment">//                  ___`. .'  /--.--\  `. . __</span></div><div class="line"><span class="comment">//               ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></div><div class="line"><span class="comment">//              | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></div><div class="line"><span class="comment">//              \  \ `-.   \_ __\ /__ _/   .-` /  /</span></div><div class="line"><span class="comment">//         ======`-.____`-.___\_____/___.-`____.-'======</span></div><div class="line"><span class="comment">//                            `=---='</span></div><div class="line"><span class="comment">//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></div><div class="line"><span class="comment">//                      佛祖保佑       永无BUG</span></div><div class="line"></div><div class="line"><span class="comment">//    ┏┛┻━━━━━┛┻┓</span></div><div class="line"><span class="comment">//    ┃ 　　　　　      ┃</span></div><div class="line"><span class="comment">//    ┃ 　　　　　      ┃</span></div><div class="line"><span class="comment">//    ┃　┳┛　  ┗┳　 ┃</span></div><div class="line"><span class="comment">//    ┃ 　　　　　      ┃</span></div><div class="line"><span class="comment">//    ┃　　　┻　 　    ┃</span></div><div class="line"><span class="comment">//    ┃ 　　　　　      ┃</span></div><div class="line"><span class="comment">//    ┗━┓　　　┏━━━┛</span></div><div class="line"><span class="comment">//        ┃　　　┃   神兽保佑</span></div><div class="line"><span class="comment">//        ┃　　　┃   代码无BUG！</span></div><div class="line"><span class="comment">//        ┃　　　┗━━━━━━━━━┓</span></div><div class="line"><span class="comment">//        ┃　　　　　　　    ┣┓</span></div><div class="line"><span class="comment">//        ┃　　　　         ┏┛</span></div><div class="line"><span class="comment">//        ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛</span></div><div class="line"><span class="comment">//          ┃ ┫ ┫   ┃ ┫ ┫</span></div><div class="line"><span class="comment">//          ┗━┻━┛   ┗━┻━┛</span></div><div class="line"><span class="comment">//    ━━━━━━感觉萌萌哒━━━━━━</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*code is far away from bug with the animal protecting</span></div><div class="line"><span class="comment">    *  ┏┓　　　┏┓</span></div><div class="line"><span class="comment">    *┏┛┻━━━┛┻┓</span></div><div class="line"><span class="comment">    *┃　　　　　　　┃ 　</span></div><div class="line"><span class="comment">    *┃　　　━　　　┃</span></div><div class="line"><span class="comment">    *┃　┳┛　┗┳　┃</span></div><div class="line"><span class="comment">    *┃　　　　　　　┃</span></div><div class="line"><span class="comment">    *┃　　　┻　　　┃</span></div><div class="line"><span class="comment">    *┃　　　　　　　┃</span></div><div class="line"><span class="comment">    *┗━┓　　　┏━┛</span></div><div class="line"><span class="comment">    *　　┃　　　┃神兽保佑</span></div><div class="line"><span class="comment">    *　　┃　　　┃代码无BUG！</span></div><div class="line"><span class="comment">    *　　┃　　　┗━━━┓</span></div><div class="line"><span class="comment">    *　　┃　　　　　　　┣┓</span></div><div class="line"><span class="comment">    *　　┃　　　　　　　┏┛</span></div><div class="line"><span class="comment">    *　　┗┓┓┏━┳┓┏┛</span></div><div class="line"><span class="comment">    *　　　┃┫┫　┃┫┫</span></div><div class="line"><span class="comment">    *　　　┗┻┛　┗┻┛ </span></div><div class="line"><span class="comment">    *　　　</span></div><div class="line"><span class="comment">    */</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">*</span></div><div class="line"><span class="comment">*----------Dragon be here!----------/</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">　　　┏┓　　　┏┓</span></div><div class="line"><span class="comment">　　┏┛┻━━━┛┻┓</span></div><div class="line"><span class="comment">　　┃　　　　　　　┃</span></div><div class="line"><span class="comment">　　┃　　　━　　　┃</span></div><div class="line"><span class="comment">　　┃　┳┛　┗┳　┃</span></div><div class="line"><span class="comment">　　┃　　　　　　　┃</span></div><div class="line"><span class="comment">　　┃　　　┻　　　┃</span></div><div class="line"><span class="comment">　　┃　　　　　　　┃</span></div><div class="line"><span class="comment">　　┗━┓　　　┏━┛</span></div><div class="line"><span class="comment">　　　　┃　　　┃</span></div><div class="line"><span class="comment">　　　　┃　　　┃</span></div><div class="line"><span class="comment">　　　　┃　　　┗━━━┓</span></div><div class="line"><span class="comment">　　　　┃　　　　　　　┣┓</span></div><div class="line"><span class="comment">　　　　┃　　　　　　　┏┛</span></div><div class="line"><span class="comment">　　　　┗┓┓┏━┳┓┏┛</span></div><div class="line"><span class="comment">　　　　　┃┫┫　┃┫┫</span></div><div class="line"><span class="comment">　　　　　┗┻┛　┗┻┛</span></div><div class="line"><span class="comment">━━━━━━神兽出没━━━━━━ */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">　　　　　　　　┏┓　　　┏┓</span></div><div class="line"><span class="comment">　　　　　　　┏┛┻━━━┛┻┓</span></div><div class="line"><span class="comment">　　　　　　　┃　　　　　　　┃ 　</span></div><div class="line"><span class="comment">　　　　　　　┃　　　━　　　┃</span></div><div class="line"><span class="comment">　　　　　　　┃　＞　　　＜　┃</span></div><div class="line"><span class="comment">　　　　　　　┃　　　　　　　┃</span></div><div class="line"><span class="comment">　　　　　　　┃...　⌒　...　┃</span></div><div class="line"><span class="comment">　　　　　　　┃　　　　　　　┃</span></div><div class="line"><span class="comment">　　　　　　　┗━┓　　　┏━┛</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃ 神兽保佑,代码无bug</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃ 　　　　　　</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　┗━━━┓</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　　　　　┣┓</span></div><div class="line"><span class="comment">　　　　　　　　　┃　　　　　　　┏┛</span></div><div class="line"><span class="comment">　　　　　　　　　┗┓┓┏━┳┓┏┛</span></div><div class="line"><span class="comment">　　　　　　　　　　┃┫┫　┃┫┫</span></div><div class="line"><span class="comment">　　　　　　　　　　┗┻┛　┗┻┛ */</span></div><div class="line">　　　　　　　　　　</div><div class="line">　　　　　　　</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">*　　　　　　　　┏┓　　　┏┓+ +</span></div><div class="line"><span class="comment">*　　　　　　　┏┛┻━━━┛┻┓ + +</span></div><div class="line"><span class="comment">*　　　　　　　┃　　　　　　　┃ 　</span></div><div class="line"><span class="comment">*　　　　　　　┃　　　━　　　┃ ++ + + +</span></div><div class="line"><span class="comment">*　　　　　　 ████━████ ┃+</span></div><div class="line"><span class="comment">*　　　　　　　┃　　　　　　　┃ +</span></div><div class="line"><span class="comment">*　　　　　　　┃　　　┻　　　┃</span></div><div class="line"><span class="comment">*　　　　　　　┃　　　　　　　┃ + +</span></div><div class="line"><span class="comment">*　　　　　　　┗━┓　　　┏━┛</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃ + + + +</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting　　　　　　　</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　　　┃　　+　　　　　　　　　</span></div><div class="line"><span class="comment">*　　　　　　　　　┃　 　　┗━━━┓ + +</span></div><div class="line"><span class="comment">*　　　　　　　　　┃ 　　　　　　　┣┓</span></div><div class="line"><span class="comment">*　　　　　　　　　┃ 　　　　　　　┏┛</span></div><div class="line"><span class="comment">*　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span></div><div class="line"><span class="comment">*　　　　　　　　　　┃┫┫　┃┫┫</span></div><div class="line"><span class="comment">*　　　　　　　　　　┗┻┛　┗┻┛+ + + +</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span></div><div class="line"><span class="comment">// ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span></div><div class="line"><span class="comment">// ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span></div><div class="line"><span class="comment">// ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span></div><div class="line"><span class="comment">// ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span></div><div class="line"><span class="comment">//  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span></div><div class="line"><span class="comment">//  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span></div><div class="line"><span class="comment">//  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span></div><div class="line"><span class="comment">//           ░     ░ ░      ░  ░</span></div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>什么是变量<br>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p>
</li>
<li><p>为什么要使用变量<br>使用变量可以方便的获取或者修改内存中的数据</p>
</li>
</ul>
<h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><ul>
<li><p>var声明变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age; <span class="comment">//声明未赋值 其值为未定义undefined</span></div></pre></td></tr></table></figure>
</li>
<li><p>变量的赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age;</div><div class="line">age = <span class="number">18</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age, name, sex;</div><div class="line">age = <span class="number">10</span>;</div><div class="line">name = <span class="string">'zs'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个变量并赋值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">'zs'</span>;</div></pre></td></tr></table></figure>
<h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><p>后续通过交换值变量来演示</p>
<h2 id="变量的命名规则与规范"><a href="#变量的命名规则与规范" class="headerlink" title="变量的命名规则与规范"></a>变量的命名规则与规范</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">命名规则（必须遵守）：</div><div class="line"><span class="number">1.</span>由字母、数字、下划线、$符号组成，开头不能是数字。</div><div class="line"><span class="number">2.</span>不能是关键字和保留字</div><div class="line"><span class="number">3.</span>区分大小写</div><div class="line">命名规范（建议遵守）：</div><div class="line"><span class="number">1.</span> 命名要有意义</div><div class="line"><span class="number">2.</span> 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userName; <span class="keyword">var</span> borderTopColor;</div></pre></td></tr></table></figure>
<h2 id="变量练习"><a href="#变量练习" class="headerlink" title="变量练习"></a>变量练习</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>交换两个变量的值（掌握）</div><div class="line"><span class="bullet">2. </span>不使用临时变量，交换两个数值变量的值（了解）</div></pre></td></tr></table></figure>
<p>掌握：<br><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/04.jpg" alt=""></p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/05.jpg" alt=""><br>扩展：<br><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/06.jpg" alt=""></p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/07.jpg" alt=""></p>
<p>tips:javascript是一种弱类型语言，不管声明什么类型的变量，都是用var，并且变量的类型是可以变化的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">90</span>;</div><div class="line">age = <span class="string">"张三"</span>;</div></pre></td></tr></table></figure>
<hr>
<pre><code>数据类型学习目标：
     掌握四种常用的数据类型
</code></pre><h2 id="JavaScript中的数据类型"><a href="#JavaScript中的数据类型" class="headerlink" title="JavaScript中的数据类型"></a>JavaScript中的数据类型</h2><p><strong>简单(基本、值)数据类型</strong><br>            Number（数字类型）、String（字符串）、Boolean（布尔类型）<br>           Undefined、Null（特殊类型）</p>
<p>  <strong>复杂(引用)数据类型（暂时了解）</strong><br>       object</p>
<h2 id="如何查看数据类型"><a href="#如何查看数据类型" class="headerlink" title="如何查看数据类型"></a>如何查看数据类型</h2><p>使用typeof关键字查看数据类型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> name;</div><div class="line"><span class="keyword">typeof</span>(name);</div></pre></td></tr></table></figure>
<h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 十进制，我们平时使用的就是十进制，进行运算时，八进制和十六进制的值最终都会转换成十进制。</div><div class="line"><span class="number">2.</span> 八进制，<span class="number">0</span>开头的数值，数值序列：<span class="number">0</span><span class="number">-7</span></div><div class="line"><span class="number">3.</span> 十六进制，<span class="number">0</span>x开头的数值，数值序列：<span class="number">0</span><span class="number">-9</span>A-F</div><div class="line"></div><div class="line">进制了解即可，基本都是使用十进制，稍微了解一下进制之间的转换。</div></pre></td></tr></table></figure>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/08.png" alt=""></p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>科学计数法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">5e+3</span>;</div><div class="line"><span class="keyword">var</span> num1 = <span class="number">5e-2</span>;</div><div class="line"><span class="comment">//如何表示0.003和20000？</span></div></pre></td></tr></table></figure>
<p>浮点数的精度问题：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = ?</div><div class="line"><span class="number">0.07</span> * <span class="number">100</span> = ?</div></pre></td></tr></table></figure>
<p><strong><em>浮点数在运算的时候会出现精度丢失的问题，因此在做比较运算的时候，尽量不要用小数进行比较。</em></strong></p>
<h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><blockquote>
<p>javascript不能表示世界上所有的数，因此在javascript中，数值大小是有一定限制的。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Number</span><span class="selector-class">.MIN_VALUE</span>  <span class="selector-pseudo">:5e-324</span></div><div class="line"><span class="selector-tag">Number</span><span class="selector-class">.MAX_VALUE</span>  <span class="selector-pseudo">:1.7976931348623157e+308</span></div><div class="line"><span class="selector-tag">Infinity</span>   :正无穷</div><div class="line"><span class="selector-tag">-Infinity</span>  ：负无穷</div></pre></td></tr></table></figure>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/09.png" alt=""></p>
<h3 id="数值判断"><a href="#数值判断" class="headerlink" title="数值判断"></a>数值判断</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> <span class="literal">NaN</span>:表示一个非数值，当无法运算或者运算错误的时候，会得到一个<span class="literal">NaN</span>，<span class="literal">NaN</span>是<span class="built_in">number</span>类型，表示一个非数值。</div><div class="line"><span class="number">2.</span> <span class="literal">NaN</span>不等于<span class="literal">NaN</span></div><div class="line"><span class="number">3.</span> <span class="built_in">isNaN</span>用来判断是否是一个数字，当返回<span class="literal">true</span>的时候，表示不是一个数字，返回<span class="literal">false</span>表示是一个数字。</div></pre></td></tr></table></figure>
<p>【案例：判断一个数据是不是数字】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = <span class="string">"abc"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> data == <span class="string">"number"</span>&amp;&amp;!<span class="built_in">isNaN</span>(data))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"是数字"</span>);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字符串的字面量：“abc”  、 ‘abc’  字符串可以是双引号，也可以是单引号引起来。</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">思考：如何打印以下字符串。</div><div class="line">我是一个<span class="string">"正直"</span>的人 </div><div class="line">我很喜欢<span class="string">"传'</span>智<span class="string">'播客"</span></div></pre></td></tr></table></figure>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>length属性用来获取字符串的长度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abckjdlkfjd"</span>;</div><div class="line">str.length;<span class="comment">//字符串的长度</span></div></pre></td></tr></table></figure>
<p>###字符串的不可变性<br>  <img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/10.png" alt="">  </p>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>拼接字符串使用+号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//思考：</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="number">11</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span> + <span class="string">" world"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"100"</span> + <span class="string">"100"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"11"</span> + <span class="number">11</span>);</div></pre></td></tr></table></figure>
<ul>
<li>两边只要有一个是字符串，那么+就是字符串拼接功能</li>
<li>两边如果都是数字，那么就是算术功能。</li>
</ul>
<h2 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h2><p>boolean类型只有两个字面量，true和false，区分大小写。</p>
<p>所有类型的值都可以转化成true或者false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span>、<span class="string">""</span>、<span class="literal">undefined</span>、<span class="literal">null</span>、<span class="literal">false</span>、<span class="number">0</span>  这<span class="number">6</span>个值可以转换成<span class="literal">false</span>，其余的都是<span class="literal">true</span>。</div></pre></td></tr></table></figure>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/11.jpg" alt=""></p>
<h2 id="undefined类型与null类型"><a href="#undefined类型与null类型" class="headerlink" title="undefined类型与null类型"></a>undefined类型与null类型</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span>表示一个声明了没有赋值的变量</div><div class="line"><span class="literal">null</span>表示一个空的对象。</div><div class="line"></div><div class="line"><span class="literal">undefined</span>派生自<span class="literal">null</span>。</div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span>  ：<span class="literal">true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">null</span> ：<span class="literal">false</span></div></pre></td></tr></table></figure>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>如何使用谷歌浏览器，快速的查看数据类型？</p>
<p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的，这个在调试过程中时非常有用的。</p>
<h2 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h2><ol>
<li>toString()</li>
<li>String()</li>
<li>/+ “”</li>
</ol>
<h2 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h2><ol>
<li>Number()</li>
<li>parseInt</li>
<li>parseFloat</li>
<li>+num, -0等运算</li>
</ol>
<h2 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h2><pre><code>学习目标：
    1 转换成字符串类型
    2 转换成数值类型
    3 转换成布尔类型
</code></pre><ol>
<li>Boolean</li>
<li>!!</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS前置知识&quot;&gt;&lt;a href=&quot;#JS前置知识&quot; class=&quot;headerlink&quot; title=&quot;JS前置知识&quot;&gt;&lt;/a&gt;JS前置知识&lt;/h1&gt;&lt;h2 id=&quot;浏览器以及网站相关介绍&quot;&gt;&lt;a href=&quot;#浏览器以及网站相关介绍&quot; class=&quot;header
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>白话原型和原型链</title>
    <link href="http://yoursite.com/2017/01/10/%E7%99%BD%E8%AF%9D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2017/01/10/白话原型和原型链/</id>
    <published>2017-01-10T05:00:00.000Z</published>
    <updated>2017-08-25T05:51:09.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ou0923swf.bkt.clouddn.com/jm.gif" alt=""><br>关于原型和原型链的介绍，网上数不胜数，但能讲清楚这两个概念的很少，大多数都是介绍各种对象、属性之间如何指来指去，最后的结果就是箭头满天飞，大脑一团糟。本文将从这两个概念的命名入手，用通俗易懂的语言，帮助你理解这两个东西到底是何方神圣。<br><a id="more"></a></p>
<h3 id="一-背景知识"><a href="#一-背景知识" class="headerlink" title="一. 背景知识"></a>一. 背景知识</h3><p>JavaScript和Java、C++等传统面向对象的编程语言不同，它是没有类（class）的概念的（ES6 中的class也只不过是语法糖，并非真正意义上的类），而在JavaScript中，一切皆是对象（object）。在基于类的传统面向对象的编程语言中，对象由类实例化而来，实例化的过程中，类的属性和方法会拷贝到这个对象中；对象的继承实际上是类的继承，在定义子类继承于父类时，子类会将父类的属性和方法拷贝到自身当中。因此，这类语言中，对象创建和继承行为都是通过拷贝完成的。但在JavaScript中，对象的创建、对象的继承（更好的叫法是对象的代理，因为它并不是传统意义上的继承）是不存在拷贝行为的。<strong>现在让我们忘掉类、忘掉继承，这一切都不属于JavaScript。</strong></p>
<h3 id="二-原型和原型链"><a href="#二-原型和原型链" class="headerlink" title="二. 原型和原型链"></a>二. 原型和原型链</h3><p>其实，原型这个名字本身就很容易产生误解，原型在百度词条中的释义是：指原来的类型或模型。按照这个定义解释的话，对象的原型是对象创建自身的模子，模子具备的特点对象都要具有，这俨然就是拷贝的概念。我们已经说过， JavaScript的对象创建不存在拷贝，对象的原型实际上也是一个对象，它和对象本身是完全独立的两个对象。既然如此，原型存在的意义又是什么呢？原型是为了共享多个对象之间的一些共有特性（属性或方法），这个功能也是任何一门面向对象的编程语言必须具备的。A、B两个对象的原型相同，那么它们必然有一些相同的特征。</p>
<p>JavaScript中的对象，都有一个内置属性<code>[[Prototype]]</code>，指向这个对象的原型对象。当查找一个属性或方法时，如果在当前对象中找不到定义，会继续在当前对象的原型对象中查找；如果原型对象中依然没有找到，会继续在原型对象的原型中查找（原型也是对象，也有它自己的原型）；如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回undefined。可以看出，这个查找过程是一个链式的查找，每个对象都有一个到它自身原型对象的链接，这些链接组件的整个链条就是原型链。拥有相同原型的多个对象，他们的共同特征正是通过这种查找模式体现出来的。</p>
<p>在上面的查找过程，我们提到了最顶层的原型对象，这个对象就是<code>Object.prototype</code>，这个对象中保存了最常用的方法，如<code>toString</code>、<code>valueOf</code>、<code>hasOwnProperty</code>等，因此我们才能在任何对象中使用这些方法。</p>
<h4 id="1-字面量方式"><a href="#1-字面量方式" class="headerlink" title="1.字面量方式"></a>1.字面量方式</h4><p>当通过字面量方式创建对象时，它的原型就是<code>Object.prototype</code>。虽然我们无法直接访问内置属性<code>[[Prototype]]</code>，但我们可以通过<code>Object.getPrototypeOf()</code>或对象的<code>__proto__</code>（不是标准属性，但几乎所有浏览器都实现了该属性）获取对象的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(obj) === <span class="built_in">Object</span>.prototype;   <span class="comment">// true</span></div><div class="line">obj.__proto__  === <span class="built_in">Object</span>.prototype;            <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h4 id="2-函数的构造调用"><a href="#2-函数的构造调用" class="headerlink" title="2.函数的构造调用"></a>2.函数的构造调用</h4><p>通过函数的构造调用（注意，我们不把它叫做构造函数，因为JavaScript中同样没有构造函数的概念，所有的函数都是平等的，只不过用来创建对象时，函数的调用方式不同而已）也是一种常用的创建对象的方式。基于同一个函数创建出来的对象，理应可以共享一些相同的属性或方法，但这些属性或方法如果放在Object.prototype里，那么所有的对象都可以使用它们了，作用域太大，显然不合适。于是，JavaScript在定义一个函数时，同时为这个函数定义了一个 默认的prototype属性，所有共享的属性或方法，都放到这个属性所指向的对象中。由此看出，通过一个函数的构造调用创建的对象，它的原型就是这个函数的prototype指向的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name &#125;;</div><div class="line">f.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;   <span class="comment">//在prototype下存放所有对象的共享方法</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> f(<span class="string">'JavaScript'</span>);</div><div class="line">obj.getName();                  <span class="comment">// JavaScript</span></div><div class="line">obj.__proto__ === f.prototype;  <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h4 id="3-Object-create（）"><a href="#3-Object-create（）" class="headerlink" title="3.Object.create（）"></a>3.Object.create（）</h4><p>第三种常用的创建对象的方式是使用<code>Object.create()</code>。这个方法会以你传入的对象作为创建出来的对象的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj);</div><div class="line">obj2.__proto__ === obj;       <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>这种方式还可以模拟对象的“继承”行为。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name,label</span>) </span>&#123;</div><div class="line">    Foo.call( <span class="keyword">this</span>, name );   <span class="comment">//</span></div><div class="line">    <span class="keyword">this</span>.label = label;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// temp对象的原型是Foo.prototype</span></div><div class="line"><span class="keyword">var</span> temp = <span class="built_in">Object</span>.create( Foo.prototype );  </div><div class="line"></div><div class="line"><span class="comment">// 通过new Bar() 创建的对象，其原型是temp, 而temp的原型是Foo.prototype，</span></div><div class="line"><span class="comment">// 从而两个原型对象Bar.prototype和Foo.prototype 有了"继承"关系</span></div><div class="line">Bar.prototype = temp;</div><div class="line"></div><div class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.label;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Bar( <span class="string">"a"</span>, <span class="string">"obj a"</span> );</div><div class="line"></div><div class="line">a.myName(); <span class="comment">// "a"</span></div><div class="line">a.myLabel(); <span class="comment">// "obj a"</span></div><div class="line">a.__proto__.__proto__ === Foo.prototype;  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="三-proto-和prototype"><a href="#三-proto-和prototype" class="headerlink" title="三. __proto__和prototype"></a>三. <code>__proto__</code>和prototype</h3><p>这是容易混淆的两个属性。<code>__proto__</code>指向当前对象的原型，prototype是函数才具有的属性，默认情况下，new 一个函数创建出的对象，其原型都指向这个函数的prototype属性。</p>
<h3 id="四-三种特殊情况"><a href="#四-三种特殊情况" class="headerlink" title="四. 三种特殊情况"></a>四. 三种特殊情况</h3><p>1.对于JavaScript中的内置对象，如String、Number、Array、Object、Function等，因为他们是native代码实现的，他们的原型打印出来都是<code>ƒ () { [native code] }</code>。</p>
<p>2.内置对象本质上也是函数，所以可以通过他们创建对象，创建出的对象的原型指向对应内置对象的prototype属性，最顶层的原型对象依然指向Object.prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.__proto__ === <span class="built_in">String</span>.prototype;   <span class="comment">// true </span></div><div class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>).__proto__ === <span class="built_in">String</span>.prototype;  <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>).__proto__  ==== <span class="built_in">Number</span>.prototype;   <span class="comment">// true</span></div><div class="line"></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__proto__ === <span class="built_in">Array</span>.prototype;            <span class="comment">// true</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).__proto__ === <span class="built_in">Array</span>.prototype;   <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.__proto__ === <span class="built_in">Object</span>.prototype;          <span class="comment">// true (再次印证字面量创建的对象原型是Object.prototype)</span></div><div class="line">&#123;&#125;.__proto__ === <span class="built_in">Object</span>.prototype;           <span class="comment">//chrome下报错，谁知道原因的告诉声</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;).__proto__ === <span class="built_in">Object</span>.prototype;     <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">f.__proto__ === <span class="built_in">Function</span>.prototype;            <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'&#123;&#125;'</span>);</div><div class="line">f.__proto__ === <span class="built_in">Function</span>.prototype;            <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>3.<code>Object.create(null)</code> 创建出的对象，不存在原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>); </div><div class="line">a.__proto__;               <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<p>此外，函数的prototype中还有一个constructor方法，建议大家就当它不存在，它的存在让JavaScript原型的概念变得更加混乱，而且这个方法也几乎没有作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ou0923swf.bkt.clouddn.com/jm.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;关于原型和原型链的介绍，网上数不胜数，但能讲清楚这两个概念的很少，大多数都是介绍各种对象、属性之间如何指来指去，最后的结果就是箭头满天飞，大脑一团糟。本文将从这两个概念的命名入手，用通俗易懂的语言，帮助你理解这两个东西到底是何方神圣。&lt;br&gt;
    
    </summary>
    
      <category term="原型" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%9E%8B/"/>
    
    
      <category term="prototype" scheme="http://yoursite.com/tags/prototype/"/>
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发</title>
    <link href="http://yoursite.com/2016/01/10/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/01/10/模块化开发/</id>
    <published>2016-01-10T05:00:00.000Z</published>
    <updated>2017-08-28T03:20:57.079Z</updated>
    
    <content type="html"><![CDATA[<p>在前端开发中，起初只需要在<code>&lt;script&gt;&lt;/script&gt;</code>加入很少的代码来实现一些基本的交互效果，后来随着js得到了越发的重视之后，使得前端项目也变得越来越来复杂，需要更好的组织形式来分类、实现业务逻辑，然而，JavaScript本身是没有类（class）的概念的，当然也就没有模块（module）的概念了。  </p>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p>
<p>目前，通行的js模块规范主要有两种：CommonJS和AMD。</p>
<p>根据AMD规范，我们可以使用define定义模块，使用require调用模块。</p>
<p><strong>AMD规范</strong></p>
<p>AMD 即Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是CommonJS</p>
<p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<p><strong>define() 函数</strong></p>
<p>AMD规范只定义了一个函数 define，它是全局变量。函数的描述为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>id：指定义中模块的名字，可选；如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p>
<p>依赖dependencies：是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。<br>依赖参数是可选的，如果忽略此参数，它应该默认为[“require”, “exports”, “module”]。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p>
<p>工厂方法factory，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p>
<p><strong>模块名的格式</strong></p>
<p>模块名用来唯一标识定义中模块，它们同样在依赖性数组中使用：</p>
<p>模块名是用正斜杠分割的有意义单词的字符串<br>单词须为驼峰形式，或者”.”，”..”<br>模块名不允许文件扩展名的形式，如“.js”<br>模块名可以为 “相对的” 或 “顶级的”。如果首字符为“.”或“..”则为相对的模块名<br>顶级的模块名从根命名空间的概念模块解析<br>相对的模块名从 “require” 书写和调用的模块解析</p>
<p><strong>使用 require 和 exports</strong></p>
<p>创建一个名为”alpha”的模块，使用了require，exports，和名为”beta”的模块:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">"alpha"</span>, [<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, beta</span>) </span>&#123;</div><div class="line">   exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> beta.verb();</div><div class="line">     <span class="comment">//Or:</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">"beta"</span>).verb();</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p><a href="https://github.com/amdjs/amdjs-api/wiki/require" target="_blank" rel="external">require API介绍</a><br>[AMD规范中文版]<a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)" target="_blank" rel="external">https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)</a></p>
<p>目前，实现AMD的库有RequireJS 、rl 、Dojo 、Nodules 等。</p>
<p><em>*CommonJS规范</em></p>
<p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。Node.JS首先采用了js模块化的概念。</p>
<p>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。</p>
<p>输出模块变量的最好方法是使用module.exports对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> max = <span class="number">30</span>;</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">for</span> (i -= <span class="number">1</span>; i++ <span class="xml"><span class="tag">&lt; <span class="attr">max</span>; ) &#123;</span></span></div><div class="line"><span class="xml">  console.log(i);</span></div><div class="line"><span class="xml"> &#125;</span></div><div class="line"><span class="xml"> max *= 1.1;</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure>
<p>上面代码通过module.exports对象，定义了一个函数，该函数就是模块外部与内部通信的桥梁。</p>
<p>加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的module.exports对象。</p>
<p>CommonJS 规范：<a href="http://javascript.ruanyifeng.com/nodejs/commonjs.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/nodejs/commonjs.html</a></p>
<p><strong>RequireJS和SeaJS</strong></p>
<p>RequireJS由James Burke创建，他也是AMD规范的创始人。</p>
<p>define方法用于定义模块，RequireJS要求每个模块放在一个单独的文件里。</p>
<p>RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p>
<p><strong>SeaJS与RequireJS最大的区别:</strong></p>
<p>SeaJS对模块的态度是懒执行, 而RequireJS对模块的态度是预执行</p>
<p>不明白？看这篇图文并茂的文章吧：<a href="http://www.douban.com/note/283566440/" target="_blank" rel="external">http://www.douban.com/note/283566440/</a></p>
<p>RequireJS API:<a href="http://www.requirejs.cn/docs/api.html" target="_blank" rel="external">http://www.requirejs.cn/docs/api.html</a></p>
<p>RequireJS的用法：<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></p>
<p><strong>为什么要用requireJS</strong></p>
<p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>RequireJS就是为了解决这两个问题而诞生的：</p>
<p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>
<p>RequireJS文件下载：<a href="http://www.requirejs.cn/docs/download.html" target="_blank" rel="external">http://www.requirejs.cn/docs/download.html</a></p>
<p><strong>AMD和CMD</strong></p>
<p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p>
<p>在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(factory);</div></pre></td></tr></table></figure>
<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"> <span class="comment">// 模块代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require是可以把其他模块导入进来的一个参数，而export是可以把模块内的一些属性和方法导出的。</p>
<p>CMD规范地址：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a></p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p>
<p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）<br>CMD 推崇依赖就近，AMD 推崇依赖前置。看如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</div><div class="line">a.doSomething()</div><div class="line"><span class="comment">// 此处略去 100 行</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写</span></div><div class="line">b.doSomething()</div><div class="line"><span class="comment">// ... </span></div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// AMD 默认推荐的是</span></div><div class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></div><div class="line">a.doSomething()</div><div class="line"><span class="comment">// 此处略去 100 行</span></div><div class="line">b.doSomething()</div><div class="line">...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>另外一个区别是：</p>
<p>AMD:API根据使用范围有区别，但使用同一个api接口<br>CMD:每个API的职责单一<br>AMD的优点是：异步并行加载，在AMD的规范下，同时异步加载是不会产生错误的。<br>CMD的机制则不同，这种加载方式会产生错误，如果能规范化模块内容形式，也可以</p>
<p>jquery1.7以上版本会自动模块化，支持AMD模式：主要是使用define函数，sea.js虽然是CommonJS规范，但却使用了define来<strong>定义模块</strong><br>所以jQuery已经自动模块化了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line"><span class="string">'base'</span>:<span class="string">'/'</span>,</div><div class="line"><span class="string">'alias'</span>:&#123;</div><div class="line">  <span class="string">'jquery'</span>:<span class="string">'jquery.js'</span><span class="comment">//定义jQuery文件</span></div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>define函数和AMD的define类似：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module&#123;</span></span></div><div class="line"><span class="function"><span class="params">   <span class="regexp">//</span>先要载入jQuery的模块</span></span></div><div class="line"><span class="function"><span class="params">   var $ = require(<span class="string">'jquery'</span></span>);</span></div><div class="line"><span class="function">   //然后将<span class="title">jQuery</span>对象传给插件模块</span></div><div class="line"><span class="function">   <span class="title">require</span>(<span class="params"><span class="string">'./cookie'</span></span>)(<span class="params">$</span>);</span></div><div class="line"><span class="function">   //开始使用 <span class="title">$</span>.<span class="title">cookie</span>方法</span></div><div class="line"><span class="function">&#125;);</span></div></pre></td></tr></table></figure>
<p>sea.js如何使用？</p>
<p>引入sea.js的库</p>
<p>如何变成模块？</p>
<p>define</p>
<p>3.如何调用模块？</p>
<p>-exports<br>-sea.js.use<br>4.如何依赖模块？</p>
<p>-require</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    define(<span class="function"><span class="keyword">function</span> <span class="params">(require,exports,module)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">      <span class="comment">//exports : 对外的接口</span></span></div><div class="line"><span class="actionscript">      <span class="comment">//requires : 依赖的接口</span></span></div><div class="line"><span class="javascript">      <span class="built_in">require</span>(<span class="string">'./test.js'</span>);<span class="comment">//如果地址是一个模块的话，那么require的返回值就是模块中的exports</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>sea.js 开发实例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标拖拽的模块化开发实践<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#div1</span>&#123; <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">background</span>:black; <span class="attribute">position</span>:absolute; <span class="attribute">display</span>:none;&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#div2</span>&#123; <span class="attribute">width</span>:<span class="number">30px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; <span class="attribute">background</span>:yellow; <span class="attribute">position</span>:absolute; <span class="attribute">bottom</span>:<span class="number">0</span>; <span class="attribute">right</span>:<span class="number">0</span>;&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#div3</span>&#123; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background</span>:blue; <span class="attribute">position</span>:absolute; <span class="attribute">right</span>:<span class="number">0</span>; <span class="attribute">top</span>:<span class="number">0</span>;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="actionscript"><span class="comment">//A同事 ：</span></span></div><div class="line"><span class="actionscript">seajs.use(<span class="string">'./main.js'</span>);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">id</span>=<span class="string">"input1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>A同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//A同事写的main.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">'div2'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv3 = <span class="built_in">document</span>.getElementById(<span class="string">'div3'</span>);</div><div class="line"> </div><div class="line">  <span class="built_in">require</span>(<span class="string">'./drag.js'</span>).drag(oDiv3);</div><div class="line">  oInput.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    oDiv1.style.display = <span class="string">'block'</span>;</div><div class="line">    <span class="built_in">require</span>(<span class="string">'./scale.js'</span>).scale(oDiv1,oDiv2);</div><div class="line"> </div><div class="line">    <span class="built_in">require</span>.async(<span class="string">'./scale.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</div><div class="line">      ex.scale(oDiv1,oDiv2);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>B同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//B同事写的drag.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">      disX = ev.clientX - obj.offsetLeft;</div><div class="line">      disY = ev.clientY - obj.offsetTop;</div><div class="line">       </div><div class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line"> </div><div class="line"> </div><div class="line">         <span class="keyword">var</span> L = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX , <span class="built_in">document</span>.documentElement.clientWidth - obj.offsetWidth , <span class="number">0</span> );</div><div class="line">         <span class="keyword">var</span> T = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY , <span class="built_in">document</span>.documentElement.clientHeight - obj.offsetHeight , <span class="number">0</span> );</div><div class="line"> </div><div class="line">         </div><div class="line">        obj.style.left = L + <span class="string">'px'</span>;</div><div class="line">        obj.style.top = T + <span class="string">'px'</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  exports.drag = drag;<span class="comment">//对外提供接口</span></div><div class="line">   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>C同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//C同事写的scale.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">scale</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disH = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    obj2.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">      disX = ev.clientX;</div><div class="line">      disY = ev.clientY;</div><div class="line">      disW = obj1.offsetWidth;</div><div class="line">      disH = obj1.offsetHeight;</div><div class="line">       </div><div class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">         </div><div class="line">        <span class="keyword">var</span> W = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX + disW , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">        <span class="keyword">var</span> H = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY + disH , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">         </div><div class="line">        obj1.style.width = W + <span class="string">'px'</span>;</div><div class="line">        obj1.style.height = H + <span class="string">'px'</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  exports.scale = scale;</div><div class="line">   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>D同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// D同事的range.js--限定拖拽范围</span></div><div class="line"> </div><div class="line">  define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">iNum,iMax,iMin</span>)</span>&#123;</div><div class="line">       </div><div class="line">      <span class="keyword">if</span>( iNum &gt; iMax )&#123;</div><div class="line">        <span class="keyword">return</span> iMax;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>( iNum &lt; iMin )&#123;</div><div class="line">        <span class="keyword">return</span> iMin;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> iNum;</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    exports.range = range;</div><div class="line">     </div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><img src="http://files.jb51.net/file_images/article/201612/20161204001125.png" alt="img"></p>
<p><strong>requirejs开发实例</strong></p>
<p>require.config是用来定义别名的，在paths属性下配置别名。然后通过requirejs(参数一，参数二)；参数一是数组，传入我们需要引用的模块名，第二个参数是个回调函数，回调函数传入一个变量，代替刚才所引入的模块。</p>
<p>main.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//别名配置</span></div><div class="line">requirejs.config(&#123;</div><div class="line">  paths: &#123;</div><div class="line">    jquery: <span class="string">'jquery.min'</span> <span class="comment">//可以省略.js</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//引入模块，用变量$表示jquery模块</span></div><div class="line">requirejs([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">  $(<span class="string">'body'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>引入模块也可以只写require()。requirejs通过define()定义模块，定义的参数上同。在此模块内的方法和变量外部是无法访问的，只有通过return返回才行.</p>
<p><strong>define 模块</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;<span class="comment">//引入jQuery模块</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将该模块命名为math.js保存。</p>
<p><strong>main.js引入模块方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$,math</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//110</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>没有依赖</strong></p>
<p>如果定义的模块不依赖其他模块，则可以：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    name: <span class="string">"trigkit4"</span>,</div><div class="line">    age: <span class="string">"21"</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前端开发中，起初只需要在&lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;加入很少的代码来实现一些基本的交互效果，后来随着js得到了越发的重视之后，使得前端项目也变得越来越来复杂，需要更好的组织形式来分类、实现业务逻辑，然而，JavaSc
    
    </summary>
    
      <category term="模块化开发" scheme="http://yoursite.com/categories/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="模块化开发" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
