<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙梦尧的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunfeat.com/"/>
  <updated>2017-09-05T12:43:33.133Z</updated>
  <id>http://sunfeat.com/</id>
  
  <author>
    <name>Sunmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP API 设计指南</title>
    <link href="http://sunfeat.com/2017/09/02/HTTP%20API%20%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%EF%BC%88%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>http://sunfeat.com/2017/09/02/HTTP API 设计指南（基础部分）/</id>
    <published>2017-09-02T07:49:30.364Z</published>
    <updated>2017-09-05T12:43:33.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-API-设计指南（基础部分）"><a href="#HTTP-API-设计指南（基础部分）" class="headerlink" title="HTTP API 设计指南（基础部分）"></a>HTTP API 设计指南（基础部分）</h2><h3 id="隔离关注点"><a href="#隔离关注点" class="headerlink" title="隔离关注点"></a>隔离关注点</h3><p>设计时通过将请求和响应之间的不同部分隔离来让事情变得简单。保持简单的规则让我们能更关注在一些更大的更困难的问题上。</p>
<p>请求和响应将解决一个特定的资源或集合。使用路径（path）来表明身份，body来传输内容（content）还有头信息（header）来传递元数据（metadata）。查询参数同样可以用来传递头信息的内容，但头信息是首选，因为他们更灵活、更能传达不同的信息。</p>
<h3 id="强制使用安全连接（Secure-Connections）所有的访问API行为，都需要用-TLS-通过安全连接来访问。没有必要搞清或解释什么情况需要-TLS-什么情况不需要-TLS，直接强制任何访问都要通过-TLS。"><a href="#强制使用安全连接（Secure-Connections）所有的访问API行为，都需要用-TLS-通过安全连接来访问。没有必要搞清或解释什么情况需要-TLS-什么情况不需要-TLS，直接强制任何访问都要通过-TLS。" class="headerlink" title="强制使用安全连接（Secure Connections）所有的访问API行为，都需要用 TLS 通过安全连接来访问。没有必要搞清或解释什么情况需要 TLS 什么情况不需要 TLS，直接强制任何访问都要通过 TLS。"></a>强制使用安全连接（Secure Connections）所有的访问API行为，都需要用 TLS 通过安全连接来访问。没有必要搞清或解释什么情况需要 TLS 什么情况不需要 TLS，直接强制任何访问都要通过 TLS。</h3><p>理想状态下，通过拒绝所有非 TLS 请求，不响应 http 或80端口的请求以避免任何不安全的数据交换。如果现实情况中无法这样做，可以返回<code>403 Forbidden</code>响应。</p>
<p>把非 TLS 的请求重定向(Redirect)至 TLS 连接是不明智的，这种含混/不好的客户端行为不会带来明显好处。依赖于重定向的客户端访问不仅会导致双倍的服务器负载，还会使 TLS 加密失去意义，因为在首次非 TLS 调用时，敏感信息就已经暴露出去了。</p>
<h3 id="强制头信息-Accept-中提供版本号"><a href="#强制头信息-Accept-中提供版本号" class="headerlink" title="强制头信息 Accept 中提供版本号"></a>强制头信息 Accept 中提供版本号</h3><p>制定版本并在版本之间平缓过渡对于设计和维护一套API是个巨大的挑战。所以，最好在设计之初就使用一些方法来预防可能会遇到的问题。</p>
<p>为了避免API的变动导致用户使用中产生意外结果或调用失败，最好强制要求所有访问都需要指定版本号。请避免提供默认版本号，一旦提供，日后想要修改它会相当困难。</p>
<p>最适合放置版本号的位置是头信息(HTTP Headers)，在 <code>Accept</code> 段中使用自定义类型(content type)与其他元数据(metadata)一起提交。例如:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept: <span class="built_in">application</span>/vnd.heroku+json; <span class="built_in">version</span>=<span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="支持Etag缓存"><a href="#支持Etag缓存" class="headerlink" title="支持Etag缓存"></a>支持Etag缓存</h3><p>在所有返回的响应中包含<code>ETag</code>头信息，用来标识资源的版本。这让用户对资源进行缓存处理成为可能，在后续的访问请求中把<code>If-None-Match</code>头信息设置为之前得到的<code>ETag</code>值，就可以侦测到已缓存的资源是否需要更新。</p>
<h3 id="为内省而提供-Request-Id"><a href="#为内省而提供-Request-Id" class="headerlink" title="为内省而提供 Request-Id"></a>为内省而提供 Request-Id</h3><p>为每一个请求响应包含一个<code>Request-Id</code>字段，并使用UUID作为该值。通过在客户端、服务器或任何支持服务上记录该值，它能主我们提供一种机制来跟踪、诊断和调试请求。</p>
<h3 id="通过请求中的范围（Range）拆分大的响应"><a href="#通过请求中的范围（Range）拆分大的响应" class="headerlink" title="通过请求中的范围（Range）拆分大的响应"></a>通过请求中的范围（Range）拆分大的响应</h3><p>一个大的响应应该通过多个请求使用<code>Range</code>头信息来拆分，并指定如何取得。详细的请求和响应的头信息（header），状态码(status code)，范围(limit)，排序(ordering)和迭代(iteration)等，参考<a href="https://devcenter.heroku.com/articles/platform-api-reference#ranges" target="_blank" rel="external">Heroku Platform API discussion of Ranges</a>.</p>
<h2 id="HTTP-API-设计指南（请求部分）"><a href="#HTTP-API-设计指南（请求部分）" class="headerlink" title="HTTP API 设计指南（请求部分）"></a>HTTP API 设计指南（请求部分）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇指南介绍描述了 HTTP+JSON API 的一种设计模式，最初摘录整理自 Heroku 平台的 API 设计指引 <a href="https://devcenter.heroku.com/articles/platform-api-reference" target="_blank" rel="external">Heroku 平台 API 指引</a>。</p>
<p>这篇指南除了详细介绍现有的 API 外，Heroku 将来新加入的内部 API 也会符合这种设计模式，我们希望非 Heroku 员工的API设计者也能感兴趣。</p>
<p>我们的目标是保持一致性，专注业务逻辑同时避免过度设计。我们一直试图找出一种良好的、一致的、显而易见的 API 设计方法，而并不是所谓的”最终/理想模式”。</p>
<p>我们假设你熟悉基本的 HTTP+JSON API 设计方法，所以本篇指南并不包含所有的 API 设计基础。</p>
<p>我们欢迎你为这篇指南做<a href="https://github.com/interagent/http-api-design/blob/master/CONTRIBUTING.md" target="_blank" rel="external">贡献</a>。</p>
<hr>
<h3 id="返回合适的状态码"><a href="#返回合适的状态码" class="headerlink" title="返回合适的状态码"></a>返回合适的状态码</h3><p>为每一次的响应返回合适的HTTP状态码。 好的响应应该使用如下的状态码:</p>
<ul>
<li><code>200</code>: <code>GET</code>请求成功，及<code>DELETE</code>或<code>PATCH</code>同步请求完成，或者<code>PUT</code>同步更新一个已存在的资源</li>
<li><code>201</code>: <code>POST</code> 同步请求完成，或者<code>PUT</code>同步创建一个新的资源</li>
<li><code>202</code>: <code>POST</code>，<code>PUT</code>，<code>DELETE</code>，或<code>PATCH</code>请求接收，将被异步处理</li>
<li><code>206</code>: <code>GET</code> 请求成功，但是只返回一部分，参考：<a href="">上文中范围分页</a></li>
</ul>
<p>使用身份认证（authentication）和授权（authorization）错误码时需要注意：</p>
<ul>
<li><code>401 Unauthorized</code>: 用户未认证，请求失败</li>
<li><code>403 Forbidden</code>: 用户无权限访问该资源，请求失败</li>
</ul>
<p>当用户请求错误时，提供合适的状态码可以提供额外的信息：</p>
<ul>
<li><code>422 Unprocessable Entity</code>: 请求被服务器正确解析，但是包含无效字段</li>
<li><code>429 Too Many Requests</code>: 因为访问频繁，你已经被限制访问，稍后重试</li>
<li><code>500 Internal Server Error</code>: 服务器错误，确认状态并报告问题</li>
</ul>
<p>对于用户错误和服务器错误情况状态码，参考： <a href="https://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="external">HTTP response code spec</a></p>
<h3 id="提供全部可用的资源"><a href="#提供全部可用的资源" class="headerlink" title="提供全部可用的资源"></a>提供全部可用的资源</h3><p>提供全部可显现的资源 (例如： 这个对象的所有属性) ，当响应码为200或是201时返回所有可用资源，包含 <code>PUT</code>/<code>PATCH</code> 和 <code>DELETE</code><br>请求，例如:</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ curl -X <span class="keyword">DELETE</span> \</div><div class="line">  https:<span class="comment">//service.com/apps/1f9b/domains/0fd4</span></div><div class="line"></div><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line">Content-<span class="built_in">Type</span>: application/json;charset=utf<span class="number">-8</span></div><div class="line">...</div><div class="line">&#123;</div><div class="line">  <span class="string">"created_at"</span>: <span class="string">"2012-01-01T12:00:00Z"</span>,</div><div class="line">  <span class="string">"hostname"</span>: <span class="string">"subdomain.example.com"</span>,</div><div class="line">  <span class="string">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span>,</div><div class="line">  <span class="string">"updated_at"</span>: <span class="string">"2012-01-01T12:00:00Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当请求状态码为202时，不返回所有可用资源，例如：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ curl -X DELETE \</div><div class="line">  <span class="symbol">https:</span>/<span class="regexp">/service.com/apps</span><span class="regexp">/1f9b/dynos</span><span class="regexp">/05bd</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">HTTP/</span><span class="number">1.1</span> <span class="number">202</span> Accepted</div><div class="line">Content-<span class="symbol">Type:</span> application/json;charset=utf-<span class="number">8</span></div><div class="line">...</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="在请求的body体使用JSON格式数据"><a href="#在请求的body体使用JSON格式数据" class="headerlink" title="在请求的body体使用JSON格式数据"></a>在请求的body体使用JSON格式数据</h3><p>在 <code>PUT</code>/<code>PATCH</code>/<code>POST</code> 请求的正文（request bodies）中使用JSON格式数据，而不是使用 form 表单形式的数据。这与我们使用JSON格式返回请求相对应，例如:</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ curl -X POST https:<span class="string">//service.com/apps</span> \</div><div class="line">    -H <span class="string">"Content-Type: application/json"</span> \</div><div class="line">    -d '&#123;<span class="string">"name"</span>: <span class="string">"demoapp"</span>&#125;'</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"demoapp"</span>,</div><div class="line">  <span class="string">"owner"</span>: &#123;</div><div class="line">    <span class="string">"email"</span>: <span class="string">"username@example.com"</span>,</div><div class="line">    <span class="string">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用统一的资源路径格式"><a href="#使用统一的资源路径格式" class="headerlink" title="使用统一的资源路径格式"></a>使用统一的资源路径格式</h3><h4 id="资源名（Resource-names）"><a href="#资源名（Resource-names）" class="headerlink" title="资源名（Resource names）"></a>资源名（Resource names）</h4><p>使用复数形式为资源命名，除非这个资源在系统中是单例的 (例如，在大多数系统中，给定的用户帐户只有一个)。 这种方式保持了特定资源的统一性。</p>
<h4 id="行为（Actions）"><a href="#行为（Actions）" class="headerlink" title="行为（Actions）"></a>行为（Actions）</h4><p>好的末尾不需要为资源指定特殊的行为，但在特殊情况下，为某些资源指定行为却是必要的。为了描述清楚，在行为前加上一个标准的<code>actions</code>：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/resources/<span class="symbol">:resource/actions/</span><span class="symbol">:action</span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/runs/</span>&#123;run_id&#125;<span class="regexp">/actions/</span>stop</div></pre></td></tr></table></figure>
<h3 id="路径和属性要小写"><a href="#路径和属性要小写" class="headerlink" title="路径和属性要小写"></a>路径和属性要小写</h3><p>为了和域名命名规则保持一致，使用小写字母并用<code>-</code>分割路径名字，例如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service-api.com/users</div><div class="line">service-api.com/app-setups</div></pre></td></tr></table></figure>
<p>属性也使用小写字母，但是属性名要用下划线<code>_</code>分割，以便在Javascript中省略引号。 例如：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">service_class:</span> <span class="string">"first"</span></div></pre></td></tr></table></figure>
<h3 id="支持方便的无id间接引用"><a href="#支持方便的无id间接引用" class="headerlink" title="支持方便的无id间接引用"></a>支持方便的无id间接引用</h3><p>在某些情况下，让用户提供ID去定位资源是不方便的。例如，一个用户想取得他在Heroku平台app信息，但是这个app的唯一标识是UUID。这种情况下，你应该支持接口通过名字和ID都能访问，例如:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl https:<span class="regexp">//</span>service.com<span class="regexp">/apps/</span>&#123;app_id_or_name&#125;</div><div class="line">$ curl https:<span class="regexp">//</span>service.com<span class="regexp">/apps/</span><span class="number">97</span>addcf0-c182</div><div class="line">$ curl https:<span class="regexp">//</span>service.com<span class="regexp">/apps/</span>www-prod</div></pre></td></tr></table></figure>
<p>不要只接受使用名字而放弃了使用id。</p>
<h3 id="最小化路径嵌套"><a href="#最小化路径嵌套" class="headerlink" title="最小化路径嵌套"></a>最小化路径嵌套</h3><p>在一些有父路径/子路径嵌套关系的资源数据模块中，路径可能有非常深的嵌套关系，例如:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/orgs/</span>&#123;org_id&#125;<span class="regexp">/apps/</span>&#123;app_id&#125;<span class="regexp">/dynos/</span>&#123;dyno_id&#125;</div></pre></td></tr></table></figure>
<p>推荐在根(root)路径下指定资源来限制路径的嵌套深度。使用嵌套指定范围的资源。在上述例子中，dyno属于app，app属于org可以表示为：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">/orgs/</span>&#123;org_id&#125;</div><div class="line"><span class="string">/orgs/</span>&#123;org_id&#125;<span class="string">/apps</span></div><div class="line"><span class="string">/apps/</span>&#123;app_id&#125;</div><div class="line"><span class="string">/apps/</span>&#123;app_id&#125;<span class="string">/dynos</span></div><div class="line"><span class="string">/dynos/</span>&#123;dyno_id&#125;</div></pre></td></tr></table></figure>
<h2 id="HTTP-API-设计指南（响应部分）"><a href="#HTTP-API-设计指南（响应部分）" class="headerlink" title="HTTP API 设计指南（响应部分）"></a>HTTP API 设计指南（响应部分）</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>这篇指南介绍描述了 HTTP+JSON API 的一种设计模式，最初摘录整理自 Heroku 平台的 API 设计指引 <a href="https://devcenter.heroku.com/articles/platform-api-reference" target="_blank" rel="external">Heroku 平台 API 指引</a>。</p>
<p>这篇指南除了详细介绍现有的 API 外，Heroku 将来新加入的内部 API 也会符合这种设计模式，我们希望非 Heroku 员工的API设计者也能感兴趣。</p>
<p>我们的目标是保持一致性，专注业务逻辑同时避免过度设计。我们一直试图找出一种良好的、一致的、显而易见的 API 设计方法，而并不是所谓的”最终/理想模式”。</p>
<p>我们假设你熟悉基本的 HTTP+JSON API 设计方法，所以本篇指南并不包含所有的 API 设计基础。</p>
<p>我们欢迎你为这篇指南做<a href="https://github.com/interagent/http-api-design/blob/master/CONTRIBUTING.md" target="_blank" rel="external">贡献</a>。</p>
<hr>
<h3 id="提供资源的-UU-ID"><a href="#提供资源的-UU-ID" class="headerlink" title="提供资源的(UU)ID"></a>提供资源的(UU)ID</h3><p>在默认情况给每一个资源一个<code>id</code>属性。除非有更好的理由，否则请使用UUID。不要使用那种在服务器上或是资源中不是全局唯一的标识，尤其是自动增长的id。</p>
<p>生成小写的UUID格式 <code>8-4-4-4-12</code>，例如：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"id": "01234567<span class="string">-89</span>ab-cdef<span class="string">-0123</span><span class="string">-456789</span>abcdef"</div></pre></td></tr></table></figure>
<h3 id="提供标准的时间戳"><a href="#提供标准的时间戳" class="headerlink" title="提供标准的时间戳"></a>提供标准的时间戳</h3><p>为资源提供默认的创建时间 <code>created_at</code> 和更新时间 <code>updated_at</code>，例如:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"created_at"</span>: <span class="string">"2012-01-01T12:00:00Z"</span>,</div><div class="line">  <span class="string">"updated_at"</span>: <span class="string">"2012-01-01T13:00:00Z"</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有些资源不需要使用时间戳那么就忽略这两个字段。</p>
<h3 id="使用UTC（世界标准时间）时间，用ISO8601进行格式化"><a href="#使用UTC（世界标准时间）时间，用ISO8601进行格式化" class="headerlink" title="使用UTC（世界标准时间）时间，用ISO8601进行格式化"></a>使用UTC（世界标准时间）时间，用ISO8601进行格式化</h3><p>在接收和返回时都只使用UTC格式。ISO8601格式的数据，例如:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"<span class="selector-tag">finished_at</span>": "2012<span class="selector-tag">-01-01T12</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00Z"</span></div></pre></td></tr></table></figure>
<h3 id="嵌套外键关系"><a href="#嵌套外键关系" class="headerlink" title="嵌套外键关系"></a>嵌套外键关系</h3><p>使用嵌套对象序列化外键关联，例如:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"service-production"</span>,</div><div class="line">  <span class="string">"owner"</span>: &#123;</div><div class="line">    <span class="string">"id"</span>: <span class="string">"5d8201b0..."</span></div><div class="line">  &#125;,</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而不是像这样:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"service-production"</span>,</div><div class="line">  <span class="string">"owner_id"</span>: <span class="string">"5d8201b0..."</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式尽可能的把相关联的资源信息内联在一起，而不用改变资源的结构，或者引入更多的字段，例如:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"service-production"</span>,</div><div class="line">  <span class="string">"owner"</span>: &#123;</div><div class="line">    <span class="string">"id"</span>: <span class="string">"5d8201b0..."</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Alice"</span>,</div><div class="line">    <span class="string">"email"</span>: <span class="string">"alice@heroku.com"</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成结构化的错误"><a href="#生成结构化的错误" class="headerlink" title="生成结构化的错误"></a>生成结构化的错误</h3><p>响应错误的时，生成统一的、结构化的错误信息。包含一个机器可读的错误 <code>id</code>，一个人类能识别的错误信息（<code>message</code>），根据情况可以添加一个<code>url</code>来告诉客户端关于这个错误的更多信息以及如何去解决它，例如:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:      <span class="string">"rate_limit"</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Account reached its API rate limit."</span>,</div><div class="line">  <span class="attr">"url"</span>:     <span class="string">"https://docs.service.com/rate-limits"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文档化客户端可能遇到的错误信息格式，以及这些可能的错误信息<code>id</code>。</p>
<h3 id="显示频率限制状态"><a href="#显示频率限制状态" class="headerlink" title="显示频率限制状态"></a>显示频率限制状态</h3><p>客户端的访问速度限制可以维护服务器的良好状态，保证为其他客户端请求提供高性的服务。你可以使用<a href="http://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="external">token bucket algorithm</a>技术量化请求限制。</p>
<p>为每一个带有<code>RateLimit-Remaining</code>响应头的请求，返回预留的请求tokens。</p>
<h3 id="保证响应JSON最小化"><a href="#保证响应JSON最小化" class="headerlink" title="保证响应JSON最小化"></a>保证响应JSON最小化</h3><p>请求中多余的空格会增加响应大小，而且现在很多的HTTP客户端都会自己输出可读格式（”prettify”）的JSON。所以最好保证响应JSON最小化，例如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"beta"</span>:<span class="literal">false</span>,<span class="attr">"email"</span>:<span class="string">"alice@heroku.com"</span>,<span class="attr">"id"</span>:<span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span>,<span class="attr">"last_login"</span>:<span class="string">"2012-01-01T12:00:00Z"</span>,<span class="attr">"created_at"</span>:<span class="string">"2012-01-01T12:00:00Z"</span>,<span class="attr">"updated_at"</span>:<span class="string">"2012-01-01T12:00:00Z"</span>&#125;</div></pre></td></tr></table></figure>
<p>而不是这样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"beta"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"alice@heroku.com"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span>,</div><div class="line">  <span class="attr">"last_login"</span>: <span class="string">"2012-01-01T12:00:00Z"</span>,</div><div class="line">  <span class="attr">"created_at"</span>: <span class="string">"2012-01-01T12:00:00Z"</span>,</div><div class="line">  <span class="attr">"updated_at"</span>: <span class="string">"2012-01-01T12:00:00Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以提供可选的方式为客户端提供更详细可读的响应，使用查询参数（例如：<code>?pretty=true</code>）或者通过<code>Accept</code>头信息参数（例如：<code>Accept: application/vnd.heroku+json; version=3; indent=4;</code>）</p>
<h2 id="HTTP-API-设计指南（结尾）"><a href="#HTTP-API-设计指南（结尾）" class="headerlink" title="HTTP API 设计指南（结尾）"></a>HTTP API 设计指南（结尾）</h2><h3 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h3><p>这篇指南介绍描述了 HTTP+JSON API 的一种设计模式，最初摘录整理自 Heroku 平台的 API 设计指引 Heroku 平台 API 指引。</p>
<p>这篇指南除了详细介绍现有的 API 外，Heroku 将来新加入的内部 API 也会符合这种设计模式，我们希望非 Heroku 员工的API设计者也能感兴趣。</p>
<p>我们的目标是保持一致性，专注业务逻辑同时避免过度设计。我们一直试图找出一种良好的、一致的、显而易见的 API 设计方法，而并不是所谓的”最终/理想模式”。</p>
<p>我们假设你熟悉基本的 HTTP+JSON API 设计方法，所以本篇指南并不包含所有的 API 设计基础。</p>
<p>我们欢迎你为这篇指南做贡献。</p>
<h3 id="提供机器可读的JSON模式"><a href="#提供机器可读的JSON模式" class="headerlink" title="提供机器可读的JSON模式"></a>提供机器可读的JSON模式</h3><p>提供一个机器可读的模式来恰当的表现你的API。使用<br>prmd管理你的模式，并且确保用prmd verify验证是有效的。</p>
<h3 id="提供人类可读的文档"><a href="#提供人类可读的文档" class="headerlink" title="提供人类可读的文档"></a>提供人类可读的文档</h3><p>提供人类可读的文档让客户端开发人员可以理解你的API。</p>
<p>如果你用prmd创建了一个概要并且按上述要求描述，你可以为所有节点很容易的使用prmd doc生成Markdown文档。</p>
<p>除了节点信息，提供一个API概述信息:</p>
<p>验证授权，包含如何取得和如何使用token。<br>API稳定及版本管理，包含如何选择所需要的版本。<br>一般情况下的请求和响应的头信息。<br>错误的序列化格式。<br>不同编程语言客户端使用API的例子。</p>
<h3 id="提供可执行的例子"><a href="#提供可执行的例子" class="headerlink" title="提供可执行的例子"></a>提供可执行的例子</h3><p>提供可执行的示例让用户可以直接在终端里面看到API的调用情况，最大程度的让这些示例可以简单的使用，以减少用户尝试使用API的工作量。例如:</p>
<p>$ export TOKEN=… # acquire from dashboard<br>$ curl -is <a href="https://$TOKEN@service.com/users" target="_blank" rel="external">https://$TOKEN@service.com/users</a><br>如果你使用prmd生成Markdown文档，每个节点都会自动获取一些示例。</p>
<h3 id="描述稳定性"><a href="#描述稳定性" class="headerlink" title="描述稳定性"></a>描述稳定性</h3><p>描述您的API的稳定性或是它在各种各样节点环境中的完备性和稳定性，例如：加上 原型版（prototype）/开发版（development）/产品版（production）等标记。</p>
<p>更多关于可能的稳定性和改变管理的方式，查看 Heroku API compatibility policy</p>
<p>一旦你的API宣布产品正式版本及稳定版本时，不要在当前API版本中做一些不兼容的改变。如果你需要，请创建一个新的版本的API。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-API-设计指南（基础部分）&quot;&gt;&lt;a href=&quot;#HTTP-API-设计指南（基础部分）&quot; class=&quot;headerlink&quot; title=&quot;HTTP API 设计指南（基础部分）&quot;&gt;&lt;/a&gt;HTTP API 设计指南（基础部分）&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Canvas实现的刮刮乐效果</title>
    <link href="http://sunfeat.com/2017/03/10/Canvas%E5%AE%9E%E7%8E%B0%E5%88%AE%E5%88%AE%E4%B9%90%E6%95%88%E6%9E%9C/"/>
    <id>http://sunfeat.com/2017/03/10/Canvas实现刮刮乐效果/</id>
    <published>2017-03-10T05:23:00.000Z</published>
    <updated>2017-09-01T12:46:31.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用canvas实现的简单刮刮乐效果</p>
</blockquote>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/guaguale/%E5%88%AE%E5%88%AE%E4%B9%90.gif" alt=""></p>
<a id="more"></a>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>刮刮乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>index.css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-tag">canvas</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>)</div><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image()</div><div class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 设置填充方案</span></div><div class="line">  <span class="keyword">var</span> pat = ctx.createPattern(img, <span class="string">'no-repeat'</span>)</div><div class="line">  ctx.strokeStyle = pat</div><div class="line">  <span class="comment">//设置线的样式 （包括线宽，线帽，拐点）</span></div><div class="line">  ctx.lineWidth = <span class="number">25</span></div><div class="line">  ctx.lineCap = <span class="string">'round'</span></div><div class="line">  ctx.lineJoin = <span class="string">'round'</span></div><div class="line">  <span class="comment">//设置一个阈值</span></div><div class="line">  <span class="keyword">var</span> isDown = <span class="literal">false</span></div><div class="line">  <span class="comment">//绑定鼠标按下事件</span></div><div class="line">  ctx.canvas.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    ctx.moveTo(e.clientX - ctx.canvas.offsetLeft, e.clientY -ctx.canvas.offsetTop)</div><div class="line">    isDown = <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  <span class="comment">//绑定鼠标移动事件</span></div><div class="line">  ctx.canvas.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isDown) &#123;</div><div class="line">      ctx.lineTo(e.clientX - ctx.canvas.offsetLeft, e.clientY -ctx.canvas.offsetTop)</div><div class="line">      ctx.stroke()</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">//绑定鼠标抬起事件</span></div><div class="line">  ctx.canvas.addEventListener(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    isDown = <span class="literal">false</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 设置图片资源路径 */</span></div><div class="line">img.src = <span class="string">'../images/xiexie.png'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用canvas实现的简单刮刮乐效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ou0923swf.bkt.clouddn.com/image/guaguale/%E5%88%AE%E5%88%AE%E4%B9%90.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://sunfeat.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://sunfeat.com/tags/canvas/"/>
    
      <category term="刮刮乐" scheme="http://sunfeat.com/tags/%E5%88%AE%E5%88%AE%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Canvas相关知识</title>
    <link href="http://sunfeat.com/2017/03/10/mycanvas/"/>
    <id>http://sunfeat.com/2017/03/10/mycanvas/</id>
    <published>2017-03-10T05:00:00.000Z</published>
    <updated>2017-09-01T12:21:16.880Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。 基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br>&lt;canvas&gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。 </p>
</blockquote>
<a id="more"></a>
<h2 id="什么是Canvas？"><a href="#什么是Canvas？" class="headerlink" title="什么是Canvas？"></a>什么是Canvas？</h2><ol>
<li>canvas 是一个 HTML5元素，中文翻译是画布，但是本事没有绘画的功能，需要通过javascript在上面绘制图像。</li>
<li>canvas是一个矩形区域，（算是内联可置换元素在chrome中display默认值为 inline），可以控制其中的每一像素默认大小是<font color="orange"> 300 * 150 </font>，浏览器在解析的时候会按图片进行处理</li>
<li>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>
</ol>
<h2 id="创建Canvas元素"><a href="#创建Canvas元素" class="headerlink" title="创建Canvas元素"></a>创建Canvas元素</h2><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：（在style标签中为其设置宽高属性也是起作用的但是并不推荐这么做）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Canvas坐标系"><a href="#Canvas坐标系" class="headerlink" title="Canvas坐标系"></a>Canvas坐标系</h2><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/location.jpg" alt=""></p>
<h2 id="通过JavaScript来绘制"><a href="#通过JavaScript来绘制" class="headerlink" title="通过JavaScript来绘制"></a>通过JavaScript来绘制</h2><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/01.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!-</span> 为了效果明显，加了一点样式 <span class="attr">-</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    canvas&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">        margin: 0 auto;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取元素*/</span></div><div class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#myCanvas'</span>)</div><div class="line"><span class="comment">/*获取绘图工具（也可以叫做绘制环境）*/</span></div><div class="line"><span class="keyword">var</span> context = myCanvas.getContext(<span class="string">'2d'</span>)</div><div class="line"><span class="comment">/*设置绘图的起始位置*/</span></div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>)</div><div class="line"><span class="comment">/*绘制路径*/</span></div><div class="line">context.lineTo(<span class="number">200</span>,<span class="number">200</span>)</div><div class="line"><span class="comment">/*描边*/</span></div><div class="line">context.stroke()</div></pre></td></tr></table></figure>
<h2 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h2><h3 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h3><p>需要理解些概念：  </p>
<ul>
<li>路径的概念</li>
<li>路径的绘制<ul>
<li>描边 stroke()  </li>
<li>填充 fill()<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/path.jpg" alt="">  </li>
</ul>
</li>
<li>闭合路径<ul>
<li>手动闭合</li>
<li>程序闭合 closePath()</li>
</ul>
</li>
<li>填充规则(非零环绕)<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/zero.jpg" alt=""></li>
<li>开启新的路径 beginPath()</li>
</ul>
<h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><ul>
<li>画笔的状态<ul>
<li>lineWidth 线宽，默认1px</li>
<li>lineCap 线末端类型：(butt默认)、round、square </li>
<li>lineJoin 相交线的拐点 miter(默认)、round、bevel</li>
<li>strokeStyle 线的颜色</li>
<li>fillStyle 填充颜色</li>
<li>setLineDash() 设置虚线</li>
<li>getLineDash() 获取虚线宽度集合</li>
<li>lineDashOffset 设置虚线偏移量（负值向右偏移）</li>
</ul>
</li>
</ul>
<h3 id="此处的坑"><a href="#此处的坑" class="headerlink" title="此处的坑"></a>此处的坑</h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/02.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">canvas所绘制的线条本质就是一定数量的默认大小为1px颜色为黑色的像素点的结合，以坐标的中心绘制,但浏览器无发显示0.5px，chrome处理方式是把把线宽扩大到2px但是，毕竟这并不是真正设置2px的线宽，所以做了将颜色变浅以示区分。</span></div><div class="line"><span class="comment">解决方案：</span></div><div class="line"><span class="comment">1. 当设置线宽为单数的时候，手动将其y轴方向进行0.5px的增减，换句话说就是把这条线放到浏览器能正常显示的像素格内，避免浏览器进行线条虚化操作。</span></div><div class="line"><span class="comment">2. 将线宽设置为偶数，但要注意canvas线条位置的渲染方式，计算好真正想让线条出现的位置</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h3 id="实例练习"><a href="#实例练习" class="headerlink" title="实例练习"></a>实例练习</h3><ul>
<li><p>绘制平行线不同颜色</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/03.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*1.获取canvas元素*/</span></div><div class="line"> <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line"> <span class="comment">/*2.获取绘制环境  （获取绘制工具）*/</span></div><div class="line"> <span class="comment">/*content内容  context 上下文 */</span></div><div class="line"> <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"> <span class="comment">/*3.设置起始绘图的位置*/</span></div><div class="line"> ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"> <span class="comment">/*6.设置宽度*/</span></div><div class="line"> ctx.lineWidth = <span class="number">10</span>;</div><div class="line"> <span class="comment">/*4.绘制路径 */</span></div><div class="line"> ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line"> <span class="comment">/*7. 设置描边的颜色*/</span></div><div class="line"> ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line"> <span class="comment">/*5.描边*/</span></div><div class="line"> ctx.stroke();</div><div class="line"> <span class="comment">/*绿色*/</span></div><div class="line"> <span class="comment">/*再次绘制的时候     会使用之前设置的样式   设置的样式最后的会生效*/</span></div><div class="line"> <span class="comment">/*开启新路径*/</span></div><div class="line"> ctx.beginPath();</div><div class="line"> ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line"> ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line"> ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line"> ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制一个三角形</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/04.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    <span class="comment">/*移动画笔*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*自动闭合*/</span></div><div class="line">    ctx.closePath();</div><div class="line">    <span class="comment">// ctx.stroke();</span></div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.stroke();</div><div class="line">    <span class="comment">/*填充*/</span></div><div class="line">    ctx.fillStyle = <span class="string">'orange'</span>;</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
</li>
<li><p>镂空的正方形</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/05.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    <span class="comment">/*移动画笔*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*自动闭合*/</span></div><div class="line">    ctx.closePath();</div><div class="line">    <span class="comment">// ctx.stroke();</span></div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.stroke();</div><div class="line">    <span class="comment">/*填充*/</span></div><div class="line">    ctx.fillStyle = <span class="string">'skyblue'</span>;</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
</li>
<li><p>线的两端样式</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/06.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">   <span class="comment">/*获取绘图工具*/</span></div><div class="line">   <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">   ctx.lineWidth = <span class="number">10</span>;</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'butt'</span>;</div><div class="line">   ctx.stroke();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'round'</span>;</div><div class="line">   ctx.stroke();</div><div class="line"></div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">   ctx.strokeStyle = <span class="string">'skyblue'</span>;</div><div class="line">   ctx.lineCap = <span class="string">'square'</span>;</div><div class="line">   ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>线拐点的样式</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/07.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'miter'</span>;</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">250</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'green'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'round'</span>;</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>);</div><div class="line">    ctx.lineTo(<span class="number">150</span>,<span class="number">350</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>,<span class="number">300</span>);</div><div class="line">    ctx.strokeStyle = <span class="string">'pink'</span>;</div><div class="line">    ctx.lineJoin = <span class="string">'bevel'</span>;</div><div class="line">    ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制渐变的线</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/08.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*1.从左到右*/</span></div><div class="line">    <span class="comment">/*2.起始颜色  白色*/</span></div><div class="line">    <span class="comment">/*3.结束颜色  红色*/</span></div><div class="line">    ctx.lineWidth = <span class="number">10</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(<span class="number">99</span>+i,<span class="number">100</span>);</div><div class="line">        ctx.lineTo(<span class="number">100</span>+i,<span class="number">100</span>);</div><div class="line">        <span class="keyword">var</span> g = <span class="number">255</span> - i;</div><div class="line">        <span class="keyword">var</span> b = <span class="number">255</span> - i;</div><div class="line">        ctx.strokeStyle = <span class="string">'rgb(255,'</span>+g+<span class="string">','</span>+b+<span class="string">')'</span>;</div><div class="line">        ctx.stroke();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>绘制虚线</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/09.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">100</span>)</div><div class="line">    ctx.setLineDash([<span class="number">5</span>]);</div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</div><div class="line">    <span class="comment">/*绘制虚线的方法*/</span></div><div class="line">    <span class="comment">/*传数组  设置虚线长度的*/</span></div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>]);</div><div class="line">    <span class="comment">/*如果是偶数个数设置  */</span></div><div class="line">    <span class="comment">/*如果是奇数数个数设置     */</span></div><div class="line">    <span class="comment">/*获取的不重复的一段*/</span></div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">300</span>)</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">300</span>)</div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();<span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">500</span>,<span class="number">100</span>);</div><div class="line">    <span class="comment">/*绘制虚线的方法*/</span></div><div class="line">    <span class="comment">/*传数组  设置虚线长度的*/</span></div><div class="line">    ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</div><div class="line">    <span class="comment">/*如果是偶数个数设置  */</span></div><div class="line">    <span class="comment">/*如果是奇数数个数设置     */</span></div><div class="line">    <span class="comment">/*获取的不重复的一段*/</span></div><div class="line">    <span class="built_in">console</span>.log(ctx.getLineDash());</div><div class="line">    ctx.stroke();</div></pre></td></tr></table></figure>
</li>
<li><p>绘制坐标系<br><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/10.png" alt=""><br><strong>方法一</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*1.确定间隔  20 */</span></div><div class="line">    <span class="keyword">var</span> space = <span class="number">20</span>;</div><div class="line">    <span class="comment">/*2.计算原点*/</span></div><div class="line">    <span class="keyword">var</span> width = ctx.canvas.width;</div><div class="line">    <span class="keyword">var</span> height = ctx.canvas.height;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> x0 = <span class="number">0</span> + space;</div><div class="line">    <span class="keyword">var</span> y0 = height - space;</div><div class="line"></div><div class="line">    <span class="comment">/*假设 箭头大小 8px*/</span></div><div class="line">    <span class="keyword">var</span> arrowSize = <span class="number">10</span>;</div><div class="line">    <span class="comment">/*绘制x轴*/</span></div><div class="line">    ctx.moveTo(x0,y0);</div><div class="line">    ctx.lineTo(width-space,y0);</div><div class="line">    ctx.lineTo(width-space-arrowSize,y0+arrowSize/<span class="number">2</span>);</div><div class="line">    ctx.lineTo(width-space-arrowSize,y0-arrowSize/<span class="number">2</span>);</div><div class="line">    ctx.lineTo(width-space,y0);</div><div class="line">    ctx.stroke();</div><div class="line">    ctx.fill();</div><div class="line">    <span class="comment">/*绘制y轴*/</span></div><div class="line">    ctx.moveTo(x0,y0);</div><div class="line">    ctx.lineTo(space,space);</div><div class="line">    ctx.lineTo(space+arrowSize/<span class="number">2</span>,space+arrowSize);</div><div class="line">    ctx.lineTo(space-arrowSize/<span class="number">2</span>,space+arrowSize);</div><div class="line">    ctx.lineTo(space,space);</div><div class="line">    ctx.stroke();</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
<p><strong>方法二:面向对象方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DrawAxis = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*绘图工具*/</span></div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*间距*/</span></div><div class="line">        <span class="keyword">this</span>.space = <span class="number">20</span>;</div><div class="line">        <span class="comment">/*画布的尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</div><div class="line">        <span class="comment">/*原点*/</span></div><div class="line">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</div><div class="line">        <span class="keyword">this</span>.y0 =  <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</div><div class="line">        <span class="comment">/*箭头尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.arrowSize = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*绘制方法*/</span></div><div class="line">    DrawAxis.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*x轴*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize,<span class="keyword">this</span>.y0+<span class="keyword">this</span>.arrowSize/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize,<span class="keyword">this</span>.y0-<span class="keyword">this</span>.arrowSize/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.stroke();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">        <span class="comment">/*y轴*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize/<span class="number">2</span>,<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrowSize/<span class="number">2</span>,<span class="keyword">this</span>.space+<span class="keyword">this</span>.arrowSize);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</div><div class="line">        <span class="keyword">this</span>.ctx.stroke();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> drawAxis = <span class="keyword">new</span> DrawAxis();</div><div class="line">    drawAxis.draw();</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<ul>
<li><p>绘制坐标点</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/11.png" alt=""></p>
<p><strong>方法一</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</div><div class="line">    <span class="comment">/*获取绘图工具*/</span></div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    <span class="comment">/*3d目前还不支持*/</span><span class="comment">/*webgl*/</span></div><div class="line"></div><div class="line">    <span class="comment">/*点坐标*/</span></div><div class="line">    <span class="keyword">var</span> dotted = &#123;</div><div class="line">        x: <span class="number">200</span>,</div><div class="line">        y: <span class="number">100</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*点大小*/</span></div><div class="line">    <span class="keyword">var</span> edge = <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*画笔的起始位置*/</span></div><div class="line">    ctx.moveTo(dotted.x - edge / <span class="number">2</span>, dotted.y - edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x + edge / <span class="number">2</span>, dotted.y - edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x + edge / <span class="number">2</span>, dotted.y + edge / <span class="number">2</span>);</div><div class="line">    ctx.lineTo(dotted.x - edge / <span class="number">2</span>, dotted.y + edge / <span class="number">2</span>);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fill();</div></pre></td></tr></table></figure>
<p><strong>方法二：面向对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DrawDotted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="keyword">this</span>.edge = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*dotted 对象  x y 轴坐标*/</span></div><div class="line">    DrawDotted.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">dotted</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.beginPath();</div><div class="line">        <span class="keyword">this</span>.ctx.moveTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.lineTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</div><div class="line">        <span class="keyword">this</span>.ctx.closePath();</div><div class="line">        <span class="keyword">this</span>.ctx.fill();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> drawDotted = <span class="keyword">new</span> DrawDotted();</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">100</span>&#125;);</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;);</div><div class="line">    drawDotted.draw(&#123;<span class="attr">x</span>:<span class="number">200</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>绘制折线图</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/canvas/12.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*假设一组  基于坐标轴的*/</span></div><div class="line">  <span class="keyword">var</span> data = [</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">80</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">120</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">300</span>, <span class="attr">y</span>: <span class="number">250</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">400</span>, <span class="attr">y</span>: <span class="number">340</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">500</span>, <span class="attr">y</span>: <span class="number">230</span>&#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> LineChart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/*绘制工具*/</span></div><div class="line">      <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">      <span class="comment">/*坐标原点*/</span></div><div class="line">      <span class="keyword">this</span>.space = <span class="number">20</span>;</div><div class="line">      <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">      <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</div><div class="line">      <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</div><div class="line">      <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</div><div class="line">      <span class="comment">/*箭头大小*/</span></div><div class="line">      <span class="keyword">this</span>.arrow = <span class="number">10</span>;</div><div class="line">      <span class="comment">/*点相关  点大小*/</span></div><div class="line">      <span class="keyword">this</span>.edge = <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*初始化方法*/</span></div><div class="line">  LineChart.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.drawAxis();</div><div class="line">      <span class="keyword">this</span>.drawDotted(data);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*绘制坐标轴*/</span></div><div class="line">  LineChart.prototype.drawAxis = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/*X轴*/</span></div><div class="line">      <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow, <span class="keyword">this</span>.y0 + <span class="keyword">this</span>.arrow/<span class="number">2</span>);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow, <span class="keyword">this</span>.y0 - <span class="keyword">this</span>.arrow/<span class="number">2</span>);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width - <span class="keyword">this</span>.space, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.stroke();</div><div class="line">      <span class="keyword">this</span>.ctx.fill();</div><div class="line">      <span class="comment">/*Y轴*/</span></div><div class="line">      <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow/<span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow/<span class="number">2</span>, <span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</div><div class="line">      <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space, <span class="keyword">this</span>.space);</div><div class="line">      <span class="keyword">this</span>.ctx.stroke();</div><div class="line">      <span class="keyword">this</span>.ctx.fill();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*转换点坐标*/</span></div><div class="line">  LineChart.prototype.formatDot = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">var</span> canvasData = [];</div><div class="line">      data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> cx = item.x + that.x0;</div><div class="line">          <span class="keyword">var</span> cy = that.y0 - item.y;</div><div class="line">          canvasData.push(&#123;<span class="attr">x</span>:cx,<span class="attr">y</span>:cy&#125;);</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> canvasData;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*绘制多个点*/</span></div><div class="line">  LineChart.prototype.drawDotted = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="comment">/*转换*/</span></div><div class="line">      <span class="keyword">var</span> canvasData = <span class="keyword">this</span>.formatDot(data);</div><div class="line">      <span class="built_in">console</span>.log(canvasData);</div><div class="line">      canvasData.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, i</span>) </span>&#123;</div><div class="line">          that.ctx.beginPath();</div><div class="line">          that.ctx.moveTo(item.x - that.edge /<span class="number">2</span> , item.y - that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x + that.edge /<span class="number">2</span> , item.y - that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x + that.edge /<span class="number">2</span> , item.y + that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.lineTo(item.x - that.edge /<span class="number">2</span> , item.y + that.edge/<span class="number">2</span>);</div><div class="line">          that.ctx.closePath();</div><div class="line">          that.ctx.fill();</div><div class="line"></div><div class="line">          that.ctx.beginPath();</div><div class="line">          <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">              that.ctx.moveTo(that.x0,that.y0);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">              that.ctx.moveTo(canvasData[i<span class="number">-1</span>].x,canvasData[i<span class="number">-1</span>].y)</div><div class="line">          &#125;</div><div class="line">          that.ctx.lineTo(item.x,item.y);</div><div class="line">          that.ctx.stroke();</div><div class="line"></div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">new</span> LineChart().init(data);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="external">w3school</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">Canvas_API</a></li>
</ul>
<h3 id="Canvas图形绘制"><a href="#Canvas图形绘制" class="headerlink" title="Canvas图形绘制"></a>Canvas图形绘制</h3><h4 id="矩形绘制"><a href="#矩形绘制" class="headerlink" title="矩形绘制"></a>矩形绘制</h4><ul>
<li>rect(x,y,w,h) 没有独立路径</li>
<li>strokeRect(x,y,w,h) 有独立路径，不影响别的绘制</li>
<li>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</li>
<li>clearRect(x,y,w,h) 擦除矩形区域</li>
</ul>
<h4 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h4><ul>
<li>弧度概念</li>
<li>arc()<ul>
<li>x 圆心横坐标</li>
<li>y 圆心纵坐标</li>
<li>r 半径</li>
<li>startAngle 开始角度</li>
<li>endAngle 结束角度</li>
<li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li>
</ul>
</li>
</ul>
<h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul>
<li>ctx.font = ‘微软雅黑’ 设置字体</li>
<li>strokeText()</li>
<li>fillText(text,x,y,maxWidth)<ul>
<li>text 要绘制的文本</li>
<li>x,y 文本绘制的坐标（文本左下角）</li>
<li>maxWidth 设置文本最大宽度，可选参数</li>
</ul>
</li>
<li>ctx.textAlign文本水平对齐方式，相对绘制坐标来说的<ul>
<li>left</li>
<li>center</li>
<li>right</li>
<li>start 默认</li>
<li>end</li>
<li>direction属性css(rtl ltr) start和end于此相关<ul>
<li>如果是ltr,start和left表现一致</li>
<li>如果是rtl,start和right表现一致</li>
</ul>
</li>
</ul>
</li>
<li>ctx.textBaseline 设置基线（垂直对齐方式  ）<ul>
<li>top 文本的基线处于文本的正上方，并且有一段距离</li>
<li>middle 文本的基线处于文本的正中间</li>
<li>bottom 文本的基线处于文本的证下方，并且有一段距离</li>
<li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li>
<li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li>
<li>ideographic 和bottom相似，但是不一样</li>
</ul>
</li>
<li>measureText() 获取文本宽度obj.width</li>
</ul>
<h4 id="实例练习-1"><a href="#实例练习-1" class="headerlink" title="实例练习"></a>实例练习</h4><ul>
<li>绘制扇形</li>
<li>绘制圆角矩形</li>
<li>绘制圆</li>
<li>绘制饼图</li>
</ul>
<h3 id="做动画"><a href="#做动画" class="headerlink" title="做动画"></a>做动画</h3><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul>
<li>drawImage()<ul>
<li>三个参数drawImage(img,x,y)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y 图片绘制的左上角</li>
</ul>
</li>
<li>五个参数drawImage(img,x,y,w,h)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y 图片绘制的左上角</li>
<li>w,h 图片绘制尺寸设置(图片缩放，不是截取)</li>
</ul>
</li>
<li>九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<ul>
<li>img 图片对象、canvas对象、video对象</li>
<li>x,y,w,h 图片中的一个矩形区域</li>
<li>x1,y1,w1,h1 画布中的一个矩形区域</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h4><ul>
<li>绘制精灵图</li>
<li>动起来</li>
<li>控制边界</li>
<li>键盘控制</li>
</ul>
<h4 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h4><ul>
<li>平移 移动画布的原点<ul>
<li>translate(x,y) 参数表示移动目标点的坐标</li>
</ul>
</li>
<li>缩放<ul>
<li>scale(x,y) 参数表示宽高的缩放比例</li>
</ul>
</li>
<li>旋转<ul>
<li>rotate(angle) 参数表示旋转角度</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。 基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。&lt;br&gt;&amp;lt;canvas&amp;gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://sunfeat.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://sunfeat.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Standard Style(JavaScript 标准编码风格)</title>
    <link href="http://sunfeat.com/2017/01/20/JavaScript+Standard+Style(JavaScript+%E6%A0%87%E5%87%86%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC)/"/>
    <id>http://sunfeat.com/2017/01/20/JavaScript+Standard+Style(JavaScript+标准编码风格)/</id>
    <published>2017-01-20T05:00:00.000Z</published>
    <updated>2017-09-01T11:21:05.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ou0923swf.bkt.clouddn.com/image/standard/1.png" alt="img"><br>让我们看一看 @feross 的 <a href="https://github.com/feross/standard" target="_blank" rel="external">JavaScript 标准风格</a> ，这是一个流行的 JavaScript 风格指南。它可以帮助你减少团队之间的摩擦，增加程序员的幸福感。<br><a id="more"></a></p>
<p>这是 <a href="http://standardjs.com/rules.html" target="_blank" rel="external">一组规则</a> ，可以使 JavaScript 代码更加一致 ，并且可以防止类似于 tabs缩进 和 空格缩进优缺点这一类无聊的话题讨论。你可以采用多种风格之一，并且与其他 （如 <a href="http://jslint.com/" target="_blank" rel="external">JSLint</a> ， <a href="http://jshint.com/about/" target="_blank" rel="external">JSHint</a> 和 <a href="http://eslint.org/docs/rules/" target="_blank" rel="external">ESLint</a> ）是同一种类型的 JavaScript 检测器。</p>
<p>如果你还不知道什么是linter (检查工具)，或者为什么需要，请查看我们对 <a href="http://www.css88.com/archives/7593" target="_blank" rel="external">JavaScript 检查(Linting)工具的比较</a>。</p>
<h2 id="风格的重要性"><a href="#风格的重要性" class="headerlink" title="风格的重要性"></a>风格的重要性</h2><p>如果你已经从事编码工作有一段时间了的话，那你肯定会有一种自己喜欢的风格。当你成百上千次以特定的模式编写代码时，你会发现你的编码方式是令人愉悦的。突然间来了个人，开始把挂在行尾的大括号单起一行。你可能会发牢骚。深呼吸冷静思考一下，你放置括号的位置 或 关键字后加空格 不会让你的程序更加正确，这只是个人喜好。</p>
<p>每种编程语言都有一种主流编码风格，比如像 Python，官方提供的 <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">风格指南</a> 被认为是编写程序的正确方式。那么你是否还会继续讨厌缩进用4个空格的人呢？（注：Python 官方提供的风格指南，建议使用4个空格缩进）。</p>
<p>用主流风格进行编码将有助于你的程序更能适应语言的生态环境。您还会发现，如果您熟悉该语言的主流编码风格，并且一开始就同意这种编码风格，那么您可以更容易地为开源项目贡献代码，同样也更容易让其他人来为你的开源项目贡献代码。</p>
<p>JavaScript 没有官方的编码风格指南，或许 Douglas Crockford 的 <a href="https://www.youtube.com/watch?v=hQVTIJBZook" target="_blank" rel="external">The Good Parts</a> 是一个实际上的标准。他的书（注：《JavaScript 语言精粹》）提供了一种编写可靠的方法来 JavaScript 程序，他强调了我们应该积极避免的某些特性。他发布了 JSLint 来支持这些观点，而其他的检查工具也紧随其后。大多数的检查工具是高度可配置的，让你选择最适合你自己的风格，并将其强加于别人或团队！JavaScript Standard Style(注：这个项目名，所以没翻译，意思为 JavaScript 标准编码风格) 则不同。你最喜欢的编码风格无关紧要，重要的是，任何选择都可以让每个人理解和合作。</p>
<blockquote>
<p>采用 standard 编码风格意味着 代码清晰性和社区约定的重要性要高于个人的编码风格。这不一定适用于所有项目和开发文化，但是开放项目源码对于新手来说可能非常不适应。建立清晰的、自动的编码风格，满足贡献者期望可以使项目发展更健康。</p>
</blockquote>
<p>如果你正在为自己编写一个程序，没有其他人需要为你做贡献，那就使用那些让你最快乐的工具和编码风格。当你在一个团队中工作时，你应该尽量减少摩擦，保持专业，不要因为小事而浪费太多的时间。</p>
<p>在介绍自己的风格之前，花点时间学习现有代码库的风格。</p>
<h2 id="JavaScript-Standard-Style-（JavaScript-标准编码风格）"><a href="#JavaScript-Standard-Style-（JavaScript-标准编码风格）" class="headerlink" title="JavaScript Standard Style （JavaScript 标准编码风格）"></a>JavaScript Standard Style （JavaScript 标准编码风格）</h2><ul>
<li><strong>使用两个空格</strong> – 进行缩进</li>
<li><strong>字符串使用单引号</strong> – 需要转义的地方除外</li>
<li><strong>不再有冗余的变量</strong> – 这是导致 <em>大量</em> bug 的源头!</li>
<li><strong>无分号</strong> – 这里有3篇文章说明不用分号的好处：<a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding" target="_blank" rel="external">文章1</a><a href="http://inimino.org/~inimino/blog/javascript_semicolons" target="_blank" rel="external">文章2</a><a href="https://www.youtube.com/watch?v=gsfbh17Ax9I" target="_blank" rel="external">文章3</a></li>
<li><strong>行首不要以 (, [, or ` 开头</strong></li>
<li>这是省略分号时<strong>唯一</strong>会造成问题的地方 – <em>工具里已加了自动检测！</em></li>
<li>[详情][4]</li>
<li><strong>关键字后加空格</strong><code>if (condition) { ... }</code></li>
<li><strong>函数名后加空格</strong><code>function name (arg) { ... }</code></li>
<li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code>。</li>
<li>一定要处理 Node.js 中错误回调传递进来的 <code>err</code> 参数。</li>
<li>使用浏览器全局变量时加上 <code>window</code> 前缀 – <code>document</code> 和 <code>navigator</code> 除外</li>
<li>避免无意中使用到了这些命名看上去很普通的全局变量， <code>open</code>, <code>length</code>,<br><code>event</code> 还有 <code>name</code>。</li>
<li><strong>请参阅 完整的规则列表</strong></li>
</ul>
<p>最有争议的规则无疑是不用分号。多年来人们一直认为，始终使用分号是避免错误的最佳实践，Crockford 做了很多工作来促进这一点，使用封号有很深的根源，在 C 语言里，分号是严格要求的，否则程序不会运行。</p>
<p>JavaScript Standard Style(JavaScript 标准编码风格) 改变了我的想法，不用分号的 JavaScript 非常好。</p>
<p>分号自动插入是 JavaScript 的一个特性，它可以减少噪点、简化程序，我从来没有遇到过由于缺少分号而导致的bug，我也不相信你会遇到。查看 <a href="https://www.youtube.com/watch?v=gsfbh17Ax9I" target="_blank" rel="external">JavaScript 中有必需使用分号的吗?</a> 以了解更多。</p>
<p>并不是所有人都同意，forks <a href="https://github.com/Flet/semistandard" target="_blank" rel="external">semistandard</a> 和 <a href="https://github.com/JedWatson/happiness" target="_blank" rel="external">happiness</a> 有点唱反调，强调使用分号。我发现这些 forks 有点伤感，因为它们错过忽略了整个标准的要点。</p>
<blockquote>
<p><strong>如果我不同意某条规则，可以改吗？</strong></p>
<p>不行。制定这套 <code>standard</code> 规范的目的就是让大家都不必再花时间浪费在无谓的代码风格之争上面了。关于缩进该用制表符还是空格这个问题已经争论了很久了，永远也没有答案。争论这个都可以把需求提前写完了。遵循 <code>standard</code> 规范，你就不用再犹豫了，毕竟不管怎样争论总归会选择一种风格的。希望大家也能在个人语义和普适价值上做一个权衡。</p>
</blockquote>
<p>就我个人而言，我已经开始喜欢不使用分号的编码风格了，也许是因为需要编写 Ruby、Python 和 CoffeeScript 的缘故，这些都不使用分号的语法。无论什么原因，当看不到分号的时候，我发现程序更清晰了。</p>
<h2 id="良好的程序层次结构"><a href="#良好的程序层次结构" class="headerlink" title="良好的程序层次结构"></a>良好的程序层次结构</h2><p>程序员应该重视：</p>
<ol>
<li>正确性</li>
<li>可读性</li>
<li>幸福感</li>
<li>高效率</li>
</ol>
<p>事实证明，采用 JavaScript Standard Style(JavaScript 标准编码风格)，对以上每一条都有好处。</p>
<h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>在所有程序中使用的任何东西，都必须做你想要的，并且没有错误。</p>
<p>编码风格并不会使程序更正确，但是在发布之前，检查工具可以帮你捕获一些错误。</p>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>作为一个专业的开发人员，除了提供一份能正常运行的程序代码之外，代码的可读性是最重要的。阅读和尝试理解程序比编写代码要花费更多的精力和时间，因此请为未来的自己和维护代码的其他人进行可读性优化。</p>
<p>清晰可预测的风格使代码更容易阅读和理解。</p>
<h3 id="程序员的幸福感"><a href="#程序员的幸福感" class="headerlink" title="程序员的幸福感"></a>程序员的幸福感</h3><p>我喜欢 JavaScript Standard Style(JavaScript 标准编码风格) 的原因之一是，它把重点放在人而不是机器上。程序员的幸福感在这个列表中排名第三的唯一原因是团队合作中更需要可读性，功能代码的正确性应该放在我们自己的幸福感之前，这是毋庸置疑的。</p>
<blockquote>
<p>你想享受生活，不是吗？如果你很快就能完成工作，而且你的工作又有趣，那不就是我们想要的享受生活吗？这在一定程度上就是我们生活的目的。你的生活会更加美好。</p>
<p>– Yukihiro Matsumoto （注：松本行弘是一位日本计算机科学家和程序员。他是Ruby程序设计语言的主要设计者和实现者。）</p>
</blockquote>
<p>人生苦短，不能因个人偏好的不同而引起意见分歧，设定一个标准并后续推进不是更好吗？如果一个标准的编码风格能够避免团队之间的分歧和摩擦，那么你就会更快乐。</p>
<h3 id="高效率"><a href="#高效率" class="headerlink" title="高效率"></a>高效率</h3><p>列在最后，但并非最不重要。</p>
<p>如果你必须在这些要点上进行权衡，那么你应该更加重视代码正确性、可读性，并且使程序员对快速编写代码感到愉悦。</p>
<p>计算机处理速度很快。如果程序高效，那就没事了。如果您发现性能不佳，请花时间寻找性能瓶颈并使代码更高效。</p>
<p>人类处理问题的速度相对来说很慢。让事情变得更有效率对我们来说更有价值。采用一种标准编码风格的清晰性使您的代码能够更快地理解并贡献代码。花在分歧上的时间也少了很多，这是最受欢迎的。</p>
<h2 id="实施-JavaScript-Standard-Style-JavaScript-标准编码风格"><a href="#实施-JavaScript-Standard-Style-JavaScript-标准编码风格" class="headerlink" title="实施 JavaScript Standard Style(JavaScript 标准编码风格)"></a>实施 JavaScript Standard Style(JavaScript 标准编码风格)</h2><p>你可以不用任何工具就可以采用这个标准，只要通读一下 <a href="http://standardjs.com/rules.html" target="_blank" rel="external">规则</a> 就可以，特别注意哪些和你以前习惯不同的规则。尝试一个星期，看看你是否喜欢。如果你不是特别反感，那就用它吧！</p>
<p>还有一个 npm 包，用于检查你的JavaScript代码。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install standard --<span class="built_in">global</span></div></pre></td></tr></table></figure>
<p>通过这个检测器，运行 <code>standard</code> 将执行目录中的所有 JavaScript 文件。</p>
<p>此外，还有所有常见的 <a href="http://standardjs.com/#text-editor-plugins" target="_blank" rel="external">文本编辑器插件</a> ，这里是如何在 Atom 中安装检测器。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apm <span class="keyword">install</span> linter</div><div class="line">apm <span class="keyword">install</span> linter-js-standard</div></pre></td></tr></table></figure>
<p><img src="file:///E:/%E7%BD%91%E6%98%93%E4%BA%91%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98/smy000@126.com/cda1eb2dd97245df9854222bd587095c/1471869780atom-linter.png" alt="img"></p>
<p>就我个人而言，当你正在输入代码的时候，自动打印风格警告提示会让你分心。如果你有同样的感觉，在你完成工作后，再来检查会更好。JavaScript 标准编码风格 命令也有一个自动修复某些风格错误的 flag，这可能会节省一些时间。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">standard <span class="comment">--fix</span></div></pre></td></tr></table></figure>
<h2 id="采用-JavaScript-Standard-Style-JavaScript-标准编码风格"><a href="#采用-JavaScript-Standard-Style-JavaScript-标准编码风格" class="headerlink" title="采用 JavaScript Standard Style(JavaScript 标准编码风格)"></a>采用 JavaScript Standard Style(JavaScript 标准编码风格)</h2><p>你应该采用 JavaScript Standard Style(JavaScript 标准编码风格) 吗？那么这完全取决于你。</p>
<p>如果你没有合适的风格指南，那就准备好面对分歧和冲突吧。</p>
<p>如果你已经完善了一套理想的规则，并希望在整个代码库中执行它，那么 ESLint 可能就是你最好的选择。</p>
<p>如果你不想浪费时间在无聊的语法细节上，那就请用JavaScript Standard Style(JavaScript 标准编码风格) 吧，欢迎评论说出你的想法。</p>
<p>原文链接：<a href="https://www.sitepoint.com/why-use-javascript-style-guide/" target="_blank" rel="external">https://www.sitepoint.com/why-use-javascript-style-guide/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ou0923swf.bkt.clouddn.com/image/standard/1.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;让我们看一看 @feross 的 &lt;a href=&quot;https://github.com/feross/standard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 标准风格&lt;/a&gt; ，这是一个流行的 JavaScript 风格指南。它可以帮助你减少团队之间的摩擦，增加程序员的幸福感。&lt;br&gt;
    
    </summary>
    
      <category term="标准编码风格" scheme="http://sunfeat.com/categories/%E6%A0%87%E5%87%86%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
    
      <category term="标准编码风格" scheme="http://sunfeat.com/tags/%E6%A0%87%E5%87%86%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>字符串的常用方法</title>
    <link href="http://sunfeat.com/2017/01/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://sunfeat.com/2017/01/10/字符串的常用方法/</id>
    <published>2017-01-10T05:11:00.000Z</published>
    <updated>2017-09-06T13:26:09.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串slice-截取方法-不会改变原字符串，返回新字符串"><a href="#字符串slice-截取方法-不会改变原字符串，返回新字符串" class="headerlink" title="字符串slice()截取方法(不会改变原字符串，返回新字符串)"></a>字符串slice()截取方法(不会改变原字符串，返回新字符串)</h3><blockquote>
<p>字符串slice截取方法  MDN这样说  slice() 方法提取字符串中的一部分，并返回这个新的字符串。</p>
</blockquote>
<h4 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'The morning is upon us.'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>,<span class="number">5</span>));  <span class="comment">//returns 'e m' 表示从索引第2个字符开始，截取到索引为5的字符包含2，不包含5;[2，5);</span></div></pre></td></tr></table></figure>
<h4 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">'The morning is upon us.'</span>;</div><div class="line"><span class="keyword">var</span> str2 = str1.slice(<span class="number">4</span>,<span class="number">-1</span>);  <span class="comment">//[4,-1) 表示从索引第4个字符开始，截取到最后一个字符 包含4，不包含-1;</span></div><div class="line"><span class="built_in">console</span>.log(str2);  <span class="comment">//morning is upon us;</span></div></pre></td></tr></table></figure>
<h4 id="写法3"><a href="#写法3" class="headerlink" title="写法3"></a>写法3</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str3 = <span class="string">'The morning is upon us.'</span>;</div><div class="line">str3.slice(<span class="number">-3</span>);     <span class="comment">// returns 'us.' 表示字符串从右往左数第三个字符截取到最后</span></div><div class="line">str3.slice(<span class="number">-3</span>, <span class="number">-1</span>); <span class="comment">// returns 'us'   表示字符串从右往左数第三个字符截取到最后一个字符 [3,-1);</span></div><div class="line">str3.slice(<span class="number">0</span>, <span class="number">-1</span>);  <span class="comment">// returns 'The morning is upon us' [0，-1)</span></div></pre></td></tr></table></figure>
<h4 id="写法4"><a href="#写法4" class="headerlink" title="写法4"></a>写法4</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str4 = <span class="string">'The morning is upon us.'</span>;</div><div class="line">str4.slice(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">//returns 'o'</span></div><div class="line"><span class="built_in">console</span>.log(str4.slice(<span class="number">5</span>, <span class="number">2</span>) === <span class="string">''</span>);<span class="comment">// true 返回空字符串</span></div></pre></td></tr></table></figure>
<h3 id="字符串substr-方法-不会改变原字符串，返回新字符串"><a href="#字符串substr-方法-不会改变原字符串，返回新字符串" class="headerlink" title="字符串substr()方法(不会改变原字符串，返回新字符串)"></a>字符串substr()方法(不会改变原字符串，返回新字符串)</h3><blockquote>
<p>字符串substr方法 MDN这样说  substr() 方法返回字符串中从指定位置开始到指定长度的子字符串</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">语法str.substr(<span class="built_in">start</span>[, <span class="built_in">length</span>])</div><div class="line">参数<span class="built_in">start</span></div><div class="line">开始提取字符的位置。如果为负值，则被看作 strLength + <span class="built_in">start</span>，其中 strLength 为字符串的长度（例如，如果 <span class="built_in">start</span> 为 <span class="number">-3</span>，则被看作 strLength<span class="number">-3</span>）。</div><div class="line">参数<span class="built_in">length</span></div><div class="line">可选。提取的字符数。不填则默认截取到最后一个字符。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sstr1 = <span class="string">"abcdefghij"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(1,2): "</span>    + sstr1.substr(<span class="number">1</span>,<span class="number">2</span>));   <span class="comment">// (1,2): "bc"  表示从索引为1开始 截取2个字符</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(-3,2): "</span>   + sstr1.substr(<span class="number">-3</span>,<span class="number">2</span>));  <span class="comment">// (-3,2): hi   表示从右往左数第三个开始截取 截取2个字符  （MDN说 如果 start 为 -3，则被看作 strLength-3）10-3=7 从索引为7的字符截取2个</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(-3): "</span>     + sstr1.substr(<span class="number">-3</span>));    <span class="comment">// (-3): hij    表示从右往左数第三个开始截取 截取到最后</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(1): "</span>      + sstr1.substr(<span class="number">1</span>));     <span class="comment">// (1): bcdefghij  表示从索引为1的数字开始 截取到最后</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(-10,2): "</span>      + sstr1.substr(<span class="number">-10</span>,<span class="number">2</span>));     <span class="comment">// (1): ab  表示从索引为0的数字开始 截取到2个</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"(-21, 2): "</span> + sstr1.substr(<span class="number">-21</span>,<span class="number">2</span>)); <span class="comment">// (-21, 2): ab  如果 start 为负值且 abs(start) 大于字符串的长度，则 substr 使用 0 作为开始提取的索引。表示从索引为0的位置截取2个字符</span></div><div class="line"></div><div class="line"><span class="comment">//注 字符串substr方法  str.substr(start[, length])  不支持负的 start 索引  有兼容问题 解决兼容问题见MDN</span></div></pre></td></tr></table></figure>
<h3 id="字符串substring-方法-不改变原字符串，返回新字符串"><a href="#字符串substring-方法-不改变原字符串，返回新字符串" class="headerlink" title="字符串substring()方法(不改变原字符串，返回新字符串)"></a>字符串substring()方法(不改变原字符串，返回新字符串)</h3><blockquote>
<p>字符串substring()方法  返回字符串两个索引之间（或到字符串末尾）的子串。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">语法 <span class="selector-tag">str</span><span class="selector-class">.substring</span>(<span class="selector-tag">indexStart</span><span class="selector-attr">[, indexEnd]</span>)</div><div class="line">参数<span class="selector-tag">indexStart</span>  </div><div class="line">一个 0 到字符串长度之间的整数。</div><div class="line"><span class="selector-tag">indexEnd</span></div><div class="line">可选。一个 0 到字符串长度之间的整数。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> anyString = <span class="string">"Mozilla"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 输出 "Moz"</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//表示从索引为0截取到索引到3的字符串 [0，3）包含索引0 不包含索引3；</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">3</span>,<span class="number">0</span>)); <span class="comment">// 如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。 所以输出结果同上；</span></div><div class="line"></div><div class="line"><span class="comment">// 输出 "lla"</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">4</span>,<span class="number">7</span>)); <span class="comment">//如果任一参数大于 stringName.length，则被当作 stringName.length。表示从索引为4截取到最后啦。</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">7</span>,<span class="number">4</span>)); <span class="comment">// 如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。 所以输出结果同上；</span></div><div class="line"></div><div class="line"><span class="comment">// 输出 "Mozill"</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>,<span class="number">6</span>)); <span class="comment">//[0，6）；</span></div><div class="line"><span class="comment">// 输出 "Mozilla"</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>,<span class="number">7</span>));<span class="comment">//[0，7）</span></div><div class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>,<span class="number">10</span>));<span class="comment">//如果任一参数大于 stringName.length，则被当作 stringName.length。</span></div><div class="line"></div><div class="line"><span class="comment">//注 如果 indexStart 等于 indexEnd，substring 返回一个空字符串。</span></div><div class="line"><span class="comment">// 如果省略 indexEnd，substring 提取字符一直到字符串末尾。</span></div><div class="line"><span class="comment">// 如果任一参数小于 0 或为 NaN，则被当作 0。</span></div><div class="line"><span class="comment">// 如果任一参数大于 stringName.length，则被当作 stringName.length。</span></div></pre></td></tr></table></figure>
<h3 id="字符串toUpperCase-方法-不改变原字符串，返回新字符串"><a href="#字符串toUpperCase-方法-不改变原字符串，返回新字符串" class="headerlink" title="字符串toUpperCase()方法(不改变原字符串，返回新字符串)"></a>字符串toUpperCase()方法(不改变原字符串，返回新字符串)</h3><blockquote>
<p>toUpperCase 将调用该方法的字符串值转换为大写形式，并返回。toUpperCase 方法不影响字符串本身的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="string">"alphabet"</span>.toUpperCase()); <span class="comment">// "ALPHABET"</span></div></pre></td></tr></table></figure>
<h3 id="字符串toLowerCase-方法-不改变原字符串，返回新字符串"><a href="#字符串toLowerCase-方法-不改变原字符串，返回新字符串" class="headerlink" title="字符串toLowerCase()方法(不改变原字符串，返回新字符串)"></a>字符串toLowerCase()方法(不改变原字符串，返回新字符串)</h3><blockquote>
<p>字符串toLowerCase() 将调用该方法的字符串值转为小写形式，并返回。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="string">"ALPHABET"</span>.toLowerCase() ); <span class="comment">// "alphabet"</span></div></pre></td></tr></table></figure>
<h3 id="字符串split-方法-不改变原字符串，返回一个新字符串数组"><a href="#字符串split-方法-不改变原字符串，返回一个新字符串数组" class="headerlink" title="字符串split()方法(不改变原字符串，返回一个新字符串数组)"></a>字符串split()方法(不改变原字符串，返回一个新字符串数组)</h3><blockquote>
<p>split() 方法通过把字符串分割成子字符串来把一个 String 对象分割成一个字符串数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">语法str.split([separator][, limit])</div><div class="line">separator  指定用来分割字符串的字符（串）。</div><div class="line">limit</div><div class="line">一个整数，限定返回的分割片段数量。split 方法仍然分割每一个匹配的 separator，但是返回的数组只会截取最多 limit 个元素。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = <span class="string">"Hello World. How are you doing?"</span>;</div><div class="line"><span class="keyword">var</span> splits = myString.split(<span class="string">""</span>); <span class="comment">//如果 separator 是一个空字符串，则 str 将被转换为由字符串中字符组成的一个数组。</span></div><div class="line"><span class="built_in">console</span>.log(splits); <span class="comment">//返回结果["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d", ".", " ", "H", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u", " ", "d", "o", "i", "n", "g", "?"]  用心去体会</span></div><div class="line"><span class="built_in">console</span>.log(myString.split()) <span class="comment">// 如果忽略 separator，则返回整个字符串的数组形式。 ["Hello World. How are you doing?"]</span></div><div class="line"><span class="built_in">console</span>.log(myString.split(<span class="string">" "</span>)); <span class="comment">// 当找到一个 seperator 时，separator 会从字符串中被移除，返回存进一个数组当中的子字符串。["Hello", "World.", "How", "are", "you", "doing?"] 说白了separator就是分割元素；</span></div></pre></td></tr></table></figure>
<h3 id="字符串indexOf-方法-不改变原字符串，返回一个number类型的值"><a href="#字符串indexOf-方法-不改变原字符串，返回一个number类型的值" class="headerlink" title="字符串indexOf() 方法(不改变原字符串，返回一个number类型的值)"></a>字符串indexOf() 方法(不改变原字符串，返回一个number类型的值)</h3><blockquote>
<p>indexOf() 方法返回指定值在字符串对象中首次出现的位置。从 fromIndex 位置开始查找，如果不存在，则返回 -1。</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">语法 str.indexOf(searchValue[, fromIndex])</div><div class="line">参数</div><div class="line">searchValue</div><div class="line">一个字符串表示被查找的值。</div><div class="line">fromIndex 可选</div><div class="line">表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 <span class="number">0</span>。如果 fromIndex &lt; <span class="number">0</span> 则查找整个字符串（如同传进了 <span class="number">0</span>）。如果 fromIndex &gt;= str.length，则该方法返回 <span class="number">-1</span>，除非被查找的字符串是一个空字符串，此时返回 str.length。</div><div class="line">描述</div><div class="line">字符串中的字符被从左向右索引。首字符的索引（index）为 <span class="number">0</span>，字符串 stringName 的最后一个字符的索引是 stringName.length - <span class="number">1</span>。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Blue"</span>);     <span class="comment">// returns  0</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Blute"</span>);    <span class="comment">// returns -1</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Blute"</span>);    <span class="comment">// returns -1</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Whale"</span>, <span class="number">5</span>); <span class="comment">// returns  5</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">""</span>, <span class="number">9</span>);      <span class="comment">// returns  9</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">""</span>, <span class="number">10</span>);     <span class="comment">// returns 10</span></div><div class="line"><span class="string">"Blue Whale"</span>.indexOf(<span class="string">""</span>, <span class="number">11</span>);     <span class="comment">// returns 10</span></div></pre></td></tr></table></figure>
<h3 id="字符串charAt-方法-不改变原字符串，返回一个字符"><a href="#字符串charAt-方法-不改变原字符串，返回一个字符" class="headerlink" title="字符串charAt()方法(不改变原字符串，返回一个字符)"></a>字符串charAt()方法(不改变原字符串，返回一个字符)</h3><blockquote>
<p>语法 str.charAt(index)  charAt() 方法返回字符串中指定位置的字符。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> anyString = <span class="string">"Brave new world"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 0   is '"</span> + anyString.charAt(<span class="number">0</span>)   + <span class="string">"'"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 1   is '"</span> + anyString.charAt(<span class="number">1</span>)   + <span class="string">"'"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 2   is '"</span> + anyString.charAt(<span class="number">2</span>)   + <span class="string">"'"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 3   is '"</span> + anyString.charAt(<span class="number">3</span>)   + <span class="string">"'"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 4   is '"</span> + anyString.charAt(<span class="number">4</span>)   + <span class="string">"'"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"The character at index 999 is '"</span> + anyString.charAt(<span class="number">999</span>) + <span class="string">"'"</span>);</div><div class="line"></div><div class="line"><span class="comment">//上面代码的输出为：</span></div><div class="line"><span class="comment">//    The character at index 0 is 'B'</span></div><div class="line"><span class="comment">//    The character at index 1 is 'r'</span></div><div class="line"><span class="comment">//    The character at index 2 is 'a'</span></div><div class="line"><span class="comment">//    The character at index 3 is 'v'</span></div><div class="line"><span class="comment">//    The character at index 4 is 'e'</span></div><div class="line"><span class="comment">//    The character at index 999 is ''</span></div></pre></td></tr></table></figure>
<h2 id="一个简单应用"><a href="#一个简单应用" class="headerlink" title="一个简单应用"></a>一个简单应用</h2><p><strong>已知有字符串foo=“get-element-by-id”,写一个function将其转化成驼峰表示法“getElementById”。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">'get-element-by-id'</span></div><div class="line"><span class="built_in">console</span>.log(createCamel(foo))</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCamel</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = str.split(<span class="string">'-'</span>) </div><div class="line">  <span class="keyword">var</span> str2 = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (i) &#123;</div><div class="line">      arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase()+arr[i].substring(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    str2 += arr[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> str2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串slice-截取方法-不会改变原字符串，返回新字符串&quot;&gt;&lt;a href=&quot;#字符串slice-截取方法-不会改变原字符串，返回新字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串slice()截取方法(不会改变原字符串，返回新字符串)&quot;&gt;&lt;
    
    </summary>
    
      <category term="字符串方法" scheme="http://sunfeat.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="字符串方法" scheme="http://sunfeat.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>白话原型和原型链</title>
    <link href="http://sunfeat.com/2017/01/10/%E7%99%BD%E8%AF%9D%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://sunfeat.com/2017/01/10/白话原型和原型链/</id>
    <published>2017-01-10T05:00:00.000Z</published>
    <updated>2017-09-02T02:07:37.619Z</updated>
    
    <content type="html"><![CDATA[<p>关于原型和原型链的介绍，网上数不胜数，但能讲清楚这两个概念的很少，大多数都是介绍各种对象、属性之间如何指来指去，最后的结果就是箭头满天飞，大脑一团糟。本文将从这两个概念的命名入手，用通俗易懂的语言，帮助你理解这两个东西到底是何方神圣。<br><a id="more"></a></p>
<h3 id="一-背景知识"><a href="#一-背景知识" class="headerlink" title="一. 背景知识"></a>一. 背景知识</h3><p>JavaScript和Java、C++等传统面向对象的编程语言不同，它是没有类（class）的概念的（ES6 中的class也只不过是语法糖，并非真正意义上的类），而在JavaScript中，一切皆是对象（object）。在基于类的传统面向对象的编程语言中，对象由类实例化而来，实例化的过程中，类的属性和方法会拷贝到这个对象中；对象的继承实际上是类的继承，在定义子类继承于父类时，子类会将父类的属性和方法拷贝到自身当中。因此，这类语言中，对象创建和继承行为都是通过拷贝完成的。但在JavaScript中，对象的创建、对象的继承（更好的叫法是对象的代理，因为它并不是传统意义上的继承）是不存在拷贝行为的。<strong>现在让我们忘掉类、忘掉继承，这一切都不属于JavaScript。</strong></p>
<h3 id="二-原型和原型链"><a href="#二-原型和原型链" class="headerlink" title="二. 原型和原型链"></a>二. 原型和原型链</h3><p>其实，原型这个名字本身就很容易产生误解，原型在百度词条中的释义是：指原来的类型或模型。按照这个定义解释的话，对象的原型是对象创建自身的模子，模子具备的特点对象都要具有，这俨然就是拷贝的概念。我们已经说过， JavaScript的对象创建不存在拷贝，对象的原型实际上也是一个对象，它和对象本身是完全独立的两个对象。既然如此，原型存在的意义又是什么呢？原型是为了共享多个对象之间的一些共有特性（属性或方法），这个功能也是任何一门面向对象的编程语言必须具备的。A、B两个对象的原型相同，那么它们必然有一些相同的特征。</p>
<p>JavaScript中的对象，都有一个内置属性<code>[[Prototype]]</code>，指向这个对象的原型对象。当查找一个属性或方法时，如果在当前对象中找不到定义，会继续在当前对象的原型对象中查找；如果原型对象中依然没有找到，会继续在原型对象的原型中查找（原型也是对象，也有它自己的原型）；如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回undefined。可以看出，这个查找过程是一个链式的查找，每个对象都有一个到它自身原型对象的链接，这些链接组件的整个链条就是原型链。拥有相同原型的多个对象，他们的共同特征正是通过这种查找模式体现出来的。</p>
<p>在上面的查找过程，我们提到了最顶层的原型对象，这个对象就是<code>Object.prototype</code>，这个对象中保存了最常用的方法，如<code>toString</code>、<code>valueOf</code>、<code>hasOwnProperty</code>等，因此我们才能在任何对象中使用这些方法。</p>
<h4 id="1-字面量方式"><a href="#1-字面量方式" class="headerlink" title="1.字面量方式"></a>1.字面量方式</h4><p>当通过字面量方式创建对象时，它的原型就是<code>Object.prototype</code>。虽然我们无法直接访问内置属性<code>[[Prototype]]</code>，但我们可以通过<code>Object.getPrototypeOf()</code>或对象的<code>__proto__</code>（不是标准属性，但几乎所有浏览器都实现了该属性）获取对象的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(obj) === <span class="built_in">Object</span>.prototype;   <span class="comment">// true</span></div><div class="line">obj.__proto__  === <span class="built_in">Object</span>.prototype;            <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h4 id="2-函数的构造调用"><a href="#2-函数的构造调用" class="headerlink" title="2.函数的构造调用"></a>2.函数的构造调用</h4><p>通过函数的构造调用（注意，我们不把它叫做构造函数，因为JavaScript中同样没有构造函数的概念，所有的函数都是平等的，只不过用来创建对象时，函数的调用方式不同而已）也是一种常用的创建对象的方式。基于同一个函数创建出来的对象，理应可以共享一些相同的属性或方法，但这些属性或方法如果放在Object.prototype里，那么所有的对象都可以使用它们了，作用域太大，显然不合适。于是，JavaScript在定义一个函数时，同时为这个函数定义了一个 默认的prototype属性，所有共享的属性或方法，都放到这个属性所指向的对象中。由此看出，通过一个函数的构造调用创建的对象，它的原型就是这个函数的prototype指向的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name &#125;;</div><div class="line">f.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;   <span class="comment">//在prototype下存放所有对象的共享方法</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> f(<span class="string">'JavaScript'</span>);</div><div class="line">obj.getName();                  <span class="comment">// JavaScript</span></div><div class="line">obj.__proto__ === f.prototype;  <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h4 id="3-Object-create（）"><a href="#3-Object-create（）" class="headerlink" title="3.Object.create（）"></a>3.Object.create（）</h4><p>第三种常用的创建对象的方式是使用<code>Object.create()</code>。这个方法会以你传入的对象作为创建出来的对象的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj);</div><div class="line">obj2.__proto__ === obj;       <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>这种方式还可以模拟对象的“继承”行为。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name,label</span>) </span>&#123;</div><div class="line">    Foo.call( <span class="keyword">this</span>, name );   <span class="comment">//</span></div><div class="line">    <span class="keyword">this</span>.label = label;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// temp对象的原型是Foo.prototype</span></div><div class="line"><span class="keyword">var</span> temp = <span class="built_in">Object</span>.create( Foo.prototype );  </div><div class="line"></div><div class="line"><span class="comment">// 通过new Bar() 创建的对象，其原型是temp, 而temp的原型是Foo.prototype，</span></div><div class="line"><span class="comment">// 从而两个原型对象Bar.prototype和Foo.prototype 有了"继承"关系</span></div><div class="line">Bar.prototype = temp;</div><div class="line"></div><div class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.label;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Bar( <span class="string">"a"</span>, <span class="string">"obj a"</span> );</div><div class="line"></div><div class="line">a.myName(); <span class="comment">// "a"</span></div><div class="line">a.myLabel(); <span class="comment">// "obj a"</span></div><div class="line">a.__proto__.__proto__ === Foo.prototype;  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="三-proto-和prototype"><a href="#三-proto-和prototype" class="headerlink" title="三. __proto__和prototype"></a>三. <code>__proto__</code>和prototype</h3><p>这是容易混淆的两个属性。<code>__proto__</code>指向当前对象的原型，prototype是函数才具有的属性，默认情况下，new 一个函数创建出的对象，其原型都指向这个函数的prototype属性。</p>
<h3 id="四-三种特殊情况"><a href="#四-三种特殊情况" class="headerlink" title="四. 三种特殊情况"></a>四. 三种特殊情况</h3><p>1.对于JavaScript中的内置对象，如String、Number、Array、Object、Function等，因为他们是native代码实现的，他们的原型打印出来都是<code>ƒ () { [native code] }</code>。</p>
<p>2.内置对象本质上也是函数，所以可以通过他们创建对象，创建出的对象的原型指向对应内置对象的prototype属性，最顶层的原型对象依然指向Object.prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.__proto__ === <span class="built_in">String</span>.prototype;   <span class="comment">// true </span></div><div class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>).__proto__ === <span class="built_in">String</span>.prototype;  <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>).__proto__  ==== <span class="built_in">Number</span>.prototype;   <span class="comment">// true</span></div><div class="line"></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__proto__ === <span class="built_in">Array</span>.prototype;            <span class="comment">// true</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).__proto__ === <span class="built_in">Array</span>.prototype;   <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.__proto__ === <span class="built_in">Object</span>.prototype;          <span class="comment">// true (再次印证字面量创建的对象原型是Object.prototype)</span></div><div class="line">&#123;&#125;.__proto__ === <span class="built_in">Object</span>.prototype;           <span class="comment">//chrome下报错，谁知道原因的告诉声</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;).__proto__ === <span class="built_in">Object</span>.prototype;     <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">f.__proto__ === <span class="built_in">Function</span>.prototype;            <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'&#123;&#125;'</span>);</div><div class="line">f.__proto__ === <span class="built_in">Function</span>.prototype;            <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>3.<code>Object.create(null)</code> 创建出的对象，不存在原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>); </div><div class="line">a.__proto__;               <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<p>此外，函数的prototype中还有一个constructor方法，建议大家就当它不存在，它的存在让JavaScript原型的概念变得更加混乱，而且这个方法也几乎没有作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于原型和原型链的介绍，网上数不胜数，但能讲清楚这两个概念的很少，大多数都是介绍各种对象、属性之间如何指来指去，最后的结果就是箭头满天飞，大脑一团糟。本文将从这两个概念的命名入手，用通俗易懂的语言，帮助你理解这两个东西到底是何方神圣。&lt;br&gt;
    
    </summary>
    
      <category term="原型" scheme="http://sunfeat.com/categories/%E5%8E%9F%E5%9E%8B/"/>
    
    
      <category term="prototype" scheme="http://sunfeat.com/tags/prototype/"/>
    
      <category term="原型链" scheme="http://sunfeat.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="原型" scheme="http://sunfeat.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对字符串进行加密(自定义简单版)</title>
    <link href="http://sunfeat.com/2017/01/10/JavaScript%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86(%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%89%88)/"/>
    <id>http://sunfeat.com/2017/01/10/JavaScript对字符串进行加密(自定义简单版)/</id>
    <published>2017-01-10T03:00:00.000Z</published>
    <updated>2017-09-02T02:06:23.305Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ou0923swf.bkt.clouddn.com/jm.gif" alt=""></p>
<blockquote>
<p>原理就是先把字符串通过charCodeAt()方法转化成对应的unicode，再把unicode统一减去100（任意数值，这里去值为100），把得到的unicode码通过String.fromCharCode()方法转换成对应的字符，代码如下：</p>
</blockquote>
 <a id="more"></a>
<p><strong>index.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串加密<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"加密"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span>加密/解密的结果显示区域~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"解密"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//获取dom元素</span></div><div class="line">  <span class="keyword">var</span> aIpt = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>);</div><div class="line">  <span class="comment">//注册点击加密事件</span></div><div class="line">  aIpt[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> txtVal = aIpt[<span class="number">0</span>].value;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="built_in">console</span>.log(txtVal);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;txtVal.length;i++)&#123;</div><div class="line">      str += <span class="built_in">String</span>.fromCharCode(txtVal.charCodeAt(i)<span class="number">-100</span>);</div><div class="line">    &#125;</div><div class="line">    oDiv.innerHTML = str;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//注册点击解密事件</span></div><div class="line">  aIpt[<span class="number">3</span>].onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> txtVal = aIpt[<span class="number">2</span>].value;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="built_in">console</span>.log(txtVal);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; txtVal.length; i++) &#123;</div><div class="line">      str += <span class="built_in">String</span>.fromCharCode(txtVal.charCodeAt(i)+<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    oDiv.innerHTML = str;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ou0923swf.bkt.clouddn.com/jm.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理就是先把字符串通过charCodeAt()方法转化成对应的unicode，再把unicode统一减去100（任意数值，这里去值为100），把得到的unicode码通过String.fromCharCode()方法转换成对应的字符，代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="加密" scheme="http://sunfeat.com/categories/%E5%8A%A0%E5%AF%86/"/>
    
    
      <category term="字符串加密" scheme="http://sunfeat.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>使用SVG + CSS实现动态霓虹灯文字效果</title>
    <link href="http://sunfeat.com/2017/01/01/%E4%BD%BF%E7%94%A8SVG%20+%20CSS%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E9%9C%93%E8%99%B9%E7%81%AF%E6%96%87%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>http://sunfeat.com/2017/01/01/使用SVG + CSS实现动态霓虹灯文字效果/</id>
    <published>2017-01-01T05:00:00.000Z</published>
    <updated>2017-09-02T07:25:02.784Z</updated>
    
    <content type="html"><![CDATA[<p>早上无意间进入一个网站，看到他们的LOGO效果略屌，如图：</p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/nihongdeng%E9%9C%93%E8%99%B9%E7%81%AF%E6%96%87%E5%AD%972.gif" alt="img"></p>
<a id="more"></a>
<p>刚开始以为是gif动画之类的，审查元素发现居然是用SVG + CSS3动画实现的，顿时激起了我的(hao)欲(qi)望(xin)，决定要一探究竟，查看代码之后，发现原理居然是如此简单：<strong>多个SVG描边动画使用不同的animation-delay即可！</strong></p>
<hr>
<p>对于一个形状SVG元素或文本SVG元素，可以使用stroke-dasharray来控制描边的间隔样式，并且可以用stroke-dashoffset来控制描边的偏移量，借此可以实现描边动画效果，更具体的资料可以看看张大神的《<a href="http://www.zhangxinxu.com/wordpress/2014/04/animateion-line-drawing-svg-path-%E5%8A%A8%E7%94%BB-%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">纯CSS实现帅气的SVG路径描边动画效果</a>》</p>
<p>我们先实现一个简单的文字描边动画：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">        segmentfault.com</div><div class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">64px</span>;</div><div class="line">    <span class="attribute">font-weight</span>: bold;</div><div class="line">    <span class="attribute">text-transform</span>: uppercase;</div><div class="line">    <span class="attribute">fill</span>: none;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#3498db</span>;</div><div class="line">    <span class="attribute">stroke-width</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">stroke-dasharray</span>: <span class="number">90</span> <span class="number">310</span>;</div><div class="line">    <span class="attribute">animation</span>: stroke <span class="number">6s</span> infinite linear;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> stroke &#123;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">stroke-dashoffset</span>: -<span class="number">400</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>演示地址：<a href="http://output.jsbin.com/demiculoqe" target="_blank" rel="external">http://output.jsbin.com/demic…</a></p>
<p>然后我们同时使用多个描边动画，并设置不同的animation-delay：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"text text-1"</span>&gt;</span></div><div class="line">        segmentfault.com</div><div class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"text text-2"</span>&gt;</span></div><div class="line">        segmentfault.com</div><div class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"text text-3"</span>&gt;</span></div><div class="line">        segmentfault.com</div><div class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"text text-4"</span>&gt;</span></div><div class="line">        segmentfault.com</div><div class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：要使用多少种颜色，就放多少个text</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">64px</span>;</div><div class="line">    <span class="attribute">font-weight</span>: bold;</div><div class="line">    <span class="attribute">text-transform</span>: uppercase;</div><div class="line">    <span class="attribute">fill</span>: none;</div><div class="line">    <span class="attribute">stroke-width</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">stroke-dasharray</span>: <span class="number">90</span> <span class="number">310</span>;</div><div class="line">    <span class="attribute">animation</span>: stroke <span class="number">6s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.text-1</span>&#123;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#3498db</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#3498db</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.5s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.text-2</span>&#123;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#f39c12</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#f39c12</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: -<span class="number">3s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.text-3</span>&#123;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#e74c3c</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#e74c3c</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: -<span class="number">4.5s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.text-4</span>&#123;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#9b59b6</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#9b59b6</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: -<span class="number">6s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> stroke &#123;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">stroke-dashoffset</span>: -<span class="number">400</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大功告成，演示地址：<a href="http://output.jsbin.com/vuyuvojiro" target="_blank" rel="external">http://output.jsbin.com/vuyuv…</a></p>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/nihongdeng%E9%9C%93%E8%99%B9%E7%81%AF%E6%96%87%E5%AD%97.gif" alt=""></p>
<p>需要注意的几个点：</p>
<ol>
<li>各个元素的animation-delay与animation的总时长的设置要协调</li>
<li>stroke-dashoffset与stroke-dasharray的设置要协调</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早上无意间进入一个网站，看到他们的LOGO效果略屌，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ou0923swf.bkt.clouddn.com/image/nihongdeng%E9%9C%93%E8%99%B9%E7%81%AF%E6%96%87%E5%AD%972.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css案例" scheme="http://sunfeat.com/categories/css%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="霓虹灯效果" scheme="http://sunfeat.com/tags/%E9%9C%93%E8%99%B9%E7%81%AF%E6%95%88%E6%9E%9C/"/>
    
      <category term="svg" scheme="http://sunfeat.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础知识（上篇）</title>
    <link href="http://sunfeat.com/2016/06/12/JS%E5%9F%BA%E7%A1%80/"/>
    <id>http://sunfeat.com/2016/06/12/JS基础/</id>
    <published>2016-06-12T08:03:00.000Z</published>
    <updated>2017-09-08T03:46:07.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS前置知识"><a href="#JS前置知识" class="headerlink" title="JS前置知识"></a>JS前置知识</h1><h2 id="浏览器以及网站相关介绍"><a href="#浏览器以及网站相关介绍" class="headerlink" title="浏览器以及网站相关介绍"></a>浏览器以及网站相关介绍</h2><blockquote>
<p><strong>浏览器定义</strong>：可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件</p>
</blockquote>
<pre><code>我们常规使用的五大浏览器：chorme，firefox，IE，Safari以及Oprea
从内核来看：有webkit，gecko，trident，presto

1、Trident内核代表产品Internet Explorer，又称其为IE内核。Trident（又称为MSHTML），是微软开发的一种排版引擎。使用Trident渲染引擎的浏览器包括：IE、傲游、世界之窗浏览器、Avant、腾讯TT、Netscape 8、NetCaptor、Sleipnir、GOSURF、GreenBrowser和KKman等。
2、Gecko内核代表作品Mozilla FirefoxGecko是一套开放源代码的、以C++编写的网页排版引擎。Gecko是最流行的排版引擎之一，仅次于Trident。使用它的最著名浏览器有Firefox、Netscape6至9。
3、WebKit内核代表作品Safari、Chromewebkit 是一个开源项目，包含了来自KDE项目和苹果公司的一些组件，主要用于Mac OS系统，它的特点在于源码结构清晰、渲染速度极快。缺点是对网页代码的兼容性不高，导致一些编写不标准的网页无法正常显示。主要代表作品有Safari和Google的浏览器Chrome。
4、Presto内核代表作品OperaPresto是由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。它取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及Script语法的事件而重新排版。
</code></pre><p><a href="http://www.cnblogs.com/vajoy/p/3735553.html" target="_blank" rel="external">各主流浏览器内核介绍</a></p>
<p><a href="http://blog.csdn.net/ofsno/article/details/51164575" target="_blank" rel="external">了解四大主流浏览器内核</a></p>
<p><a href="http://www.cnblogs.com/zichi/p/5116764.html" target="_blank" rel="external">主流浏览器内核介绍</a></p>
<h3 id="1浏览器工作原理的介绍"><a href="#1浏览器工作原理的介绍" class="headerlink" title="1浏览器工作原理的介绍"></a>1浏览器工作原理的介绍</h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/01.jpg" alt=""></p>
<pre><code>说明：
1、User Interface  用户界面，我们所看到的浏览器
2、Browser engine  浏览器引擎，用来查询和操作渲染引擎
3、Rendering engine 用来显示请求的内容，负责解析HTML、CSS
4、Networking   网络，负责发送网络请求
5、JavaScript Interpreter(解析者)   JavaScript解析器，负责执行JavaScript的代码
6、UI Backend   UI后端，用来绘制类似组合框和弹出窗口
7、Data Persistence(持久化)  数据持久化，数据存储  cookie、HTML5中的sessionStorage
</code></pre><h3 id="2网站工作原理的简单介绍"><a href="#2网站工作原理的简单介绍" class="headerlink" title="2网站工作原理的简单介绍"></a>2网站工作原理的简单介绍</h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/03.jpg" alt=""></p>
<h2 id="为什么要有js？"><a href="#为什么要有js？" class="headerlink" title="为什么要有js？"></a>为什么要有js？</h2><pre><code>js设计的最初目的
    - 判断客户端表单输入验证(以前的网速慢)
    - 后来被一度用于小广告
 js现在的意义
    -页面特效（pc端的网页特效）
    -移动端（移动web和app）
    -异步和服务器交互 ajax
    -服务器端开发（nodeJs）
    -数据库甚至烤面包机都可以运行js了 （mongodb 嵌入式开发）
js的历史总结：
    -javascript诞生于1995年
    -javascript的是由网景公司的布兰登艾奇开发的
    -javascript的前名叫livescript
</code></pre><h2 id="什么是JS语言？"><a href="#什么是JS语言？" class="headerlink" title="什么是JS语言？"></a>什么是JS语言？</h2><blockquote>
<p>javascript是一种运行在<strong><em>客户端</em></strong> 的<strong><em>脚本语言</em></strong> </p>
</blockquote>
<p>客户端：即接受服务的一端，与服务端相对应，在前端开发中，通常客户端指的就是浏览器。</p>
<p>脚本语言：也叫解释型语言，特点是<strong><em>执行一行，解释一行，如果发现报错，代码就停止执行</em></strong> 。</p>
<pre><code>tips：脚本语言一般会有一个宿主环境（当前脚本运行并且起作用一个环境）
类似的有：as（actionScript flash宿主环境）
</code></pre><blockquote>
<p>javascript的三个组成部分：ECMAScript、BOM、DOM</p>
</blockquote>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/02.jpg" alt=""></p>
<p>ECMAScript：定义了javascript的语法规范，是js语法的基础核心。</p>
<p>BOM：定义一套操作浏览器功能的API，通过这些api能够更好的操作浏览器行为。</p>
<p>DOM：定义一套操作页面元素的API，通过使用这些api来操作页面元素。</p>
<h2 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h2><blockquote>
<p>书写Javascript代码有三种方式，第一种是直接在script标签中书写，第二种是将代码写在js文件中，通过script进行引入。第三种为内嵌入html结构中书写js，但不利于后期代码开发和维护，不推荐；</p>
</blockquote>
<p>直接在script中书写javascript代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">	alert(<span class="string">"今天天气真好呀"</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过script标签引入一个JS文件，需要指定src属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过在html标签中内嵌入html结构执行(但这种方式并不推荐 不利于后期代码开发和维护)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('今天天气不错！')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<font color="#ff7600">tips：如果script标签指定了src属性，说明是想要引入一个js文件，这个时候不能继续在script标签中写JS代码，即便写了，也不会执行。</font>



<blockquote>
<p>script标签的书写位置，原则上来说，可以在页面中的任意位置书写script标签。</p>
</blockquote>
<ol>
<li>写在head标签中，style标签之后。</li>
<li>写在&lt;//body&gt;标签的前面。</li>
<li>写在的后面，即页面的最后面。</li>
</ol>
<blockquote>
<p>script的一些属性</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">JavaScript</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<ul>
<li><p>language已废弃,用于说明代码使用的脚本语言</p>
</li>
<li><p>src 表示要引入的外部文件</p>
</li>
<li><p>type 表示脚本语言的类型(type=”text/javascript” 在html5的结构可以省略不写)</p>
<ul>
<li>async(了解)   async=”async”</li>
</ul>
</li>
<li><p>值可以省略，立即异步下载外部JS下载完毕立即执行</p>
</li>
<li><p>defer(了解)  defer=”defer”</p>
</li>
<li><p>值可以省略，脚本延迟到文档完全被解析和显示后再执行</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myJs.js"</span> <span class="attr">async</span>=<span class="string">"async"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--async立即异步下载外部JS,JS下载完毕立即执行--&gt;</span></div><div class="line"><span class="comment">&lt;!--defer立即异步下载外部JS,JS下载完毕延迟到最后执行--&gt;</span></div><div class="line"><span class="comment">&lt;!--这两个属性可以省略属性值--&gt;</span></div></pre></td></tr></table></figure>
<h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><blockquote>
<p>在实际开发，常用1和3，并且1在控制台输出不影响页面正常显示，不会阻塞代码运行，灵活操作，在实际开发中用于代码调试较多。</p>
</blockquote>
<ol>
<li><p>console.log 控制台输出日志</p>
</li>
<li><p>document.write 往页面中写入内容</p>
</li>
<li><p>alert 弹框警告[^注释]</p>
</li>
<li><p>confirm 确认框[^注释]</p>
</li>
<li><p>prompt 输入框[^注释]</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"内容"</span>);<span class="comment">//在控制台打印输出内容</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">"内容"</span>);<span class="comment">//在页面书写内容</span></div><div class="line">alert(<span class="string">"内容"</span>);<span class="comment">//弹窗显示内容</span></div><div class="line"><span class="built_in">console</span>.warn(<span class="string">"警告框 一般系统在使用"</span>);</div><div class="line"><span class="built_in">console</span>.error(<span class="string">"错误提示信息，一般系统在使用"</span>);</div><div class="line"><span class="built_in">console</span>.info(<span class="string">"输出信息"</span>);</div><div class="line">confirm(<span class="string">"请回答是或者否"</span>);</div></pre></td></tr></table></figure>
<p>[^注释]: window 是全局对象  是浏览器中的顶级对象  window.alert()中的window 可以省略不写</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>不被程序执行的代码。用于程序员标记代码，在后期的修改，以及他人的学习时有所帮助，在JS中，分为单行注释和多行注释</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是单行注释，只能注释一行</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	这是多行注释，不能嵌套</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>注释的作用：</p>
<pre><code>1. 模块划分，方便代码查找和维护
2. 用于解释复杂代码的逻辑，方便维护和后期开发。
</code></pre><p><a href="http://jsbin.com/gokusop/edit?js" target="_blank" rel="external">永无bug.js</a></p>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>什么是变量<br>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p>
</li>
<li><p>为什么要使用变量<br>使用变量可以方便的获取或者修改内存中的数据</p>
</li>
</ul>
<h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><ul>
<li><p>var声明变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age; <span class="comment">//声明未赋值 其值为未定义undefined</span></div></pre></td></tr></table></figure>
</li>
<li><p>变量的赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age;</div><div class="line">age = <span class="number">18</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age, name, sex;</div><div class="line">age = <span class="number">10</span>;</div><div class="line">name = <span class="string">'zs'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个变量并赋值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">'zs'</span>;</div></pre></td></tr></table></figure>
<h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><p>后续通过交换值变量来演示</p>
<h2 id="变量的命名规则与规范"><a href="#变量的命名规则与规范" class="headerlink" title="变量的命名规则与规范"></a>变量的命名规则与规范</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">命名规则（必须遵守）：</div><div class="line"><span class="number">1.</span>由字母、数字、下划线、$符号组成，开头不能是数字。</div><div class="line"><span class="number">2.</span>不能是关键字和保留字</div><div class="line"><span class="number">3.</span>区分大小写</div><div class="line">命名规范（建议遵守）：</div><div class="line"><span class="number">1.</span> 命名要有意义</div><div class="line"><span class="number">2.</span> 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userName; <span class="keyword">var</span> borderTopColor;</div></pre></td></tr></table></figure>
<h2 id="变量练习"><a href="#变量练习" class="headerlink" title="变量练习"></a>变量练习</h2><h3 id="第一种方式：普通临时变量交换方式"><a href="#第一种方式：普通临时变量交换方式" class="headerlink" title="第一种方式：普通临时变量交换方式"></a>第一种方式：普通临时变量交换方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于所有类型</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">  这是用到的最广泛的一种方式，经实战测试分析，性能也很高</span></div><div class="line"><span class="comment">  (在JS中,这种方式效率确实很高，而且就算是其它语言中，只要tmp变量提前创建，性能也不会很低，反而是一些杂技派和少数派性能方面很低)</span></div><div class="line"><span class="comment">  基本上可以说: 经典的才是最优雅的</span></div><div class="line"><span class="comment">*/</span></div><div class="line">tmp = a</div><div class="line">a = b</div><div class="line">b = tmp</div></pre></td></tr></table></figure>
<h3 id="第二种-利用一个新的对象来进行数据交换"><a href="#第二种-利用一个新的对象来进行数据交换" class="headerlink" title="第二种:利用一个新的对象来进行数据交换"></a>第二种:利用一个新的对象来进行数据交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于所有类型</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种方式在实战中应用的很少</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a = &#123;<span class="attr">a</span> : b, <span class="attr">b</span> : a&#125;</div><div class="line">b = a.b</div><div class="line">a = a.a</div></pre></td></tr></table></figure>
<h3 id="第三种-利用一个新的数组来进行数据交换"><a href="#第三种-利用一个新的数组来进行数据交换" class="headerlink" title="第三种:利用一个新的数组来进行数据交换"></a>第三种:利用一个新的数组来进行数据交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于所有类型</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种方式在各大论坛中都有看到有人使用，但经测试实际性能并不高</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a = [b, b=a][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="第四种-利用数组交换变量-需EJS支持"><a href="#第四种-利用数组交换变量-需EJS支持" class="headerlink" title="第四种:利用数组交换变量(需EJS支持)"></a>第四种:利用数组交换变量(需EJS支持)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于所有类型</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这也是在ES6出来后看到有人用的，实际在现有的浏览器中测试，性能很低</span></div><div class="line"><span class="comment">*/</span></div><div class="line">[a, b] = [b, a]</div></pre></td></tr></table></figure>
<h3 id="第五种-利用try-catch交换"><a href="#第五种-利用try-catch交换" class="headerlink" title="第五种:利用try catch交换"></a>第五种:利用try catch交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于所有类型</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种方法应该是基本没人使用的，也没有什么实用性，而且性能也是属于在各种方法中垫底的</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;<span class="keyword">return</span> b&#125;</div><div class="line">    <span class="keyword">finally</span>&#123;b=a&#125;&#125;</div><div class="line">)()</div></pre></td></tr></table></figure>
<h3 id="第六种-异或操作交换变量第一种方式"><a href="#第六种-异或操作交换变量第一种方式" class="headerlink" title="第六种:异或操作交换变量第一种方式"></a>第六种:异或操作交换变量第一种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于数字或字符串</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">异或方法在数字或字符串时用到的比较普遍，而且性能也不低</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a = (b = (a ^= b) ^ b) ^ a</div></pre></td></tr></table></figure>
<h3 id="第七种-异或操作交换变量第二种方式"><a href="#第七种-异或操作交换变量第二种方式" class="headerlink" title="第七种:异或操作交换变量第二种方式"></a>第七种:异或操作交换变量第二种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 适用于数字或字符串</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">异或方法在数字或字符串时用到的比较普遍，而且性能也不低</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a ^=b</div><div class="line">b ^=a</div><div class="line">a ^=b</div></pre></td></tr></table></figure>
<h3 id="第八种-数字之间的加减运算来实现，第一种加减方式"><a href="#第八种-数字之间的加减运算来实现，第一种加减方式" class="headerlink" title="第八种:数字之间的加减运算来实现，第一种加减方式"></a>第八种:数字之间的加减运算来实现，第一种加减方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 仅适用于数字</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种用法在只用于数字间的交换时，性能也不弱</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a = a + b;</div><div class="line">b = a - b; </div><div class="line">a = a - b;</div></pre></td></tr></table></figure>
<h3 id="第九种-数字之间的加减运算来实现，第一种加减方式"><a href="#第九种-数字之间的加减运算来实现，第一种加减方式" class="headerlink" title="第九种:数字之间的加减运算来实现，第一种加减方式"></a>第九种:数字之间的加减运算来实现，第一种加减方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 仅适用于数字</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种用法在只用于数字间的交换时，性能也不弱</span></div><div class="line"><span class="comment">*/</span></div><div class="line">a = b -a +(b = a)</div></pre></td></tr></table></figure>
<h3 id="第十种-利用eval计算"><a href="#第十种-利用eval计算" class="headerlink" title="第十种:利用eval计算"></a>第十种:利用eval计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 仅适用于数字和字符串</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种方式仅用于研究，实战慎用</span></div><div class="line"><span class="comment">这种模式执行一万次耗时等于其它执行一亿次...</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">eval</span>(<span class="string">"a="</span>+b+<span class="string">";b="</span>+a);</div></pre></td></tr></table></figure>
<h3 id="第十一种-数组中，利用splice交换两个元素的位置"><a href="#第十一种-数组中，利用splice交换两个元素的位置" class="headerlink" title="第十一种:数组中，利用splice交换两个元素的位置"></a>第十一种:数组中，利用splice交换两个元素的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  适用性: 仅适用于数组元素</span></div><div class="line"><span class="comment">  简要说明:</span></div><div class="line"><span class="comment">这种方式看起来挺优雅的，但实际上性能远远比不上临时变量那种</span></div><div class="line"><span class="comment">*/</span></div><div class="line">arr[<span class="number">0</span>] = arr.splice(<span class="number">2</span>, <span class="number">1</span>, arr[<span class="number">0</span>])[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="各种交换方式的性能对比"><a href="#各种交换方式的性能对比" class="headerlink" title="各种交换方式的性能对比"></a>各种交换方式的性能对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">上述列举了几种方式都有一一做过对比分析，基本上可以得出的结论是:</div><div class="line"></div><div class="line">还是老老实实的用回临时变量交换吧，经典，优雅，而且保证不会出什么幺蛾子</div><div class="line"></div><div class="line">在chrome中运行了一亿次后得出的结论(每次运行<span class="number">100</span>万次,一共<span class="number">100</span>个循环，得到的分析结果)</div><div class="line">可以看出,tmp变量交换最快,<span class="keyword">try</span> <span class="keyword">catch</span>最慢</div><div class="line"></div><div class="line">在chrome (支持es6)中运行了<span class="number">100</span>万次后得出的结论(每次运行<span class="number">1</span>万次,一共<span class="number">100</span>个循环，得到的分析结果)</div><div class="line">可以看出,<span class="built_in">eval</span>最慢,splice性能较低，tmp变量交换很稳定</div></pre></td></tr></table></figure>
<p><a href="https://jsperf.com/exchange-variables-gracefully/2" target="_blank" rel="external">Exchange Variables Gracefully</a></p>
<p>tips:javascript是一种弱类型语言，不管声明什么类型的变量，都是用var，并且变量的类型是可以变化的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">90</span>;</div><div class="line">age = <span class="string">"张三"</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="JavaScript中的数据类型"><a href="#JavaScript中的数据类型" class="headerlink" title="JavaScript中的数据类型"></a>JavaScript中的数据类型</h2><p><strong>简单(基本、值)数据类型</strong><br>    Number（数字类型）、String（字符串）、Boolean（布尔类型）<br>    Undefined、Null（特殊类型）</p>
<p>  <strong>复杂(引用)数据类型</strong><br>       object</p>
<h2 id="如何查看数据类型"><a href="#如何查看数据类型" class="headerlink" title="如何查看数据类型"></a>如何查看数据类型</h2><p>使用typeof关键字查看数据类型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> name;</div><div class="line"><span class="keyword">typeof</span>(name);</div></pre></td></tr></table></figure>
<h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 十进制，我们平时使用的就是十进制，进行运算时，八进制和十六进制的值最终都会转换成十进制。</div><div class="line"><span class="number">2.</span> 八进制，<span class="number">0</span>开头的数值，数值序列：<span class="number">0</span><span class="number">-7</span></div><div class="line"><span class="number">3.</span> 十六进制，<span class="number">0</span>x开头的数值，数值序列：<span class="number">0</span><span class="number">-9</span>A-F</div><div class="line"></div><div class="line">进制了解即可，基本都是使用十进制，稍微了解一下进制之间的转换。</div></pre></td></tr></table></figure>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>科学计数法：</p>
<p>科学记数法是指把一个数表示成a×10的n次幂的形式（1≤a&lt;10，n 为整数。）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">5e+3</span>; <span class="comment">//5000</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">5e-2</span>; <span class="comment">//0.05</span></div></pre></td></tr></table></figure>
<p>浮点数的精度问题：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = ? <span class="comment">//0.30000000000000004</span></div><div class="line"><span class="number">0.07</span> * <span class="number">100</span> = ? <span class="comment">//7.000000000000001</span></div></pre></td></tr></table></figure>
<p><strong><em>浮点数在运算的时候会出现精度丢失的问题，因此在做比较运算的时候，尽量不要用小数进行比较。</em></strong></p>
<h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><blockquote>
<p>javascript不能表示世界上所有的数，因此在javascript中，数值大小是有一定限制的。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Number</span><span class="selector-class">.MIN_VALUE</span>  <span class="selector-pseudo">:5e-324</span></div><div class="line"><span class="selector-tag">Number</span><span class="selector-class">.MAX_VALUE</span>  <span class="selector-pseudo">:1.7976931348623157e+308</span></div><div class="line"><span class="selector-tag">Infinity</span>   :正无穷</div><div class="line"><span class="selector-tag">-Infinity</span>  :负无穷</div></pre></td></tr></table></figure>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/09.png" alt=""></p>
<h3 id="数值判断"><a href="#数值判断" class="headerlink" title="数值判断"></a>数值判断</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> <span class="literal">NaN</span>:表示一个非数值，当无法运算或者运算错误的时候，会得到一个<span class="literal">NaN</span>，<span class="literal">NaN</span>是<span class="built_in">number</span>类型，表示一个非数值。</div><div class="line"><span class="number">2.</span> <span class="literal">NaN</span>不等于<span class="literal">NaN</span></div><div class="line"><span class="number">3.</span> <span class="built_in">isNaN</span>用来判断是否是一个数字，当返回<span class="literal">true</span>的时候，表示不是一个数字，返回<span class="literal">false</span>表示是一个数字。</div></pre></td></tr></table></figure>
<p>【要求：判断一个数据是不是数字】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = <span class="string">"abc"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> data == <span class="string">"number"</span>&amp;&amp;!<span class="built_in">isNaN</span>(data))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"是数字"</span>);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字符串的字面量：“abc”  、 ‘abc’  字符串可以是双引号，也可以是单引号引起来。单双引号可以嵌套使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我是一个"正直"的人 </span></div><div class="line"><span class="comment">//我很喜欢"传'智'播客"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'我是一个"正直"的人'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'我很喜欢吃"好吃\'的\'东西"'</span>);</div></pre></td></tr></table></figure>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>length属性用来获取字符串的长度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abckjdlkfjd"</span>;</div><div class="line">str.length;<span class="comment">//字符串的长度</span></div></pre></td></tr></table></figure>
<p>###字符串的不可变性<br>  <img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/10.png" alt=""></p>
<h4 id="什么是不可变性-Immutability-？"><a href="#什么是不可变性-Immutability-？" class="headerlink" title="什么是不可变性(Immutability)？"></a>什么是不可变性(Immutability)？</h4><p>还是先来看看关于可变性(Mutability)的教条式定义：“liable or subject to change or alteration(译者注：真他妈难翻，就简单理解成’易于改变的’吧)”。在编程领域里，我们用可变性(Mutability)来描述这样一种对象，它在创建之后状态依旧可被改变。那当我们说不可变(Immutable)时，就是可变(Mutable)的对立面了(译者注：原谅我翻的废话又多起来) － 意思是，创建之后，就再也不能被修改了。</p>
<p>如果我说的又让你感到诡异了，原谅我小小的提醒一下，其实我们平时使用的很多东西事实上都是不可变的哦！</p>
<p>var statement = ‘I am an immutable value’;<br>var otherStr = statement.slice(8, 17);<br>我猜没人会吃惊，statement.slice(8, 17)并没有改变statement变量吧(译者注：如果你吃惊了，赶紧去补基本知识吧)？事实上，string对象上的所有方法里，没有一个会修改原string，它们一律返回新的string。原因简单了，因为string就是是不可变的(Immutable) - 它们不能被修改，我们能做的就是基于原string操作后得到一个新string。</p>
<p>注意了，string可不是javascript里唯一内置的不可变(Immutable)数据类型哦。number也是不可变(Immutable)的。否则的话，你试想下这个表达式2 + 3，如果2的含义能被修改，那代码该怎么写啊|_|。听起来荒谬吧，但我们在编程中却常常对object和array做出这种事儿。</p>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>拼接字符串使用+号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//思考：</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="number">11</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span> + <span class="string">" world"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"100"</span> + <span class="string">"100"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"11"</span> + <span class="number">11</span>);</div></pre></td></tr></table></figure>
<ul>
<li>两边只要有一个是字符串，那么+就是字符串拼接功能</li>
<li>两边如果都是数字，那么就是算术功能。</li>
</ul>
<h2 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h2><p>boolean类型只有两个字面量，true和false，区分大小写。</p>
<p>所有类型的值都可以转化成true或者false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span>、<span class="string">""</span>、<span class="literal">undefined</span>、<span class="literal">null</span>、<span class="literal">false</span>、<span class="number">0</span>  这<span class="number">6</span>个值可以转换成<span class="literal">false</span>，其余的都是<span class="literal">true</span>。</div></pre></td></tr></table></figure>
<p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbasic/11.jpg" alt=""></p>
<h2 id="undefined类型与null类型"><a href="#undefined类型与null类型" class="headerlink" title="undefined类型与null类型"></a>undefined类型与null类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span>表示一个声明了没有赋值的变量</div><div class="line"><span class="literal">null</span>表示一个空的对象。</div><div class="line"></div><div class="line"><span class="literal">undefined</span>派生自<span class="literal">null</span>。</div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span>  ：<span class="literal">true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">null</span> ：<span class="literal">false</span></div></pre></td></tr></table></figure>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>如何使用谷歌浏览器，快速的查看数据类型？</p>
<p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的，这个在调试过程中时非常有用的。</p>
<h2 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h2><ol>
<li>toString() (undefined和null无法使用此方法)</li>
<li>String()</li>
<li>/+ “”</li>
</ol>
<h2 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h2><ol>
<li>Number() (尝试将任何数据类型进行转换 如果转不了 返回一个NaN)</li>
<li>parseInt</li>
<li>parseFloat</li>
<li>+num, -0等运算 (隐式转换)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//10进制转为16进制</span></div><div class="line">(<span class="number">10</span>).toString(<span class="number">16</span>) <span class="comment">// =&gt;"a"</span></div><div class="line"><span class="comment">//8进制转为16进制</span></div><div class="line">(<span class="number">012</span>).toString(<span class="number">16</span>) <span class="comment">// =&gt;"a"</span></div><div class="line"><span class="comment">//16进制转为10进制</span></div><div class="line">(<span class="number">0x16</span>).toString(<span class="number">10</span>) <span class="comment">// =&gt;"22"</span></div><div class="line"><span class="comment">//16进制转为8进制</span></div><div class="line">(<span class="number">0x16</span>).toString(<span class="number">8</span>) <span class="comment">// =&gt;"26"</span></div><div class="line"><span class="comment">//10进制转为2进制 //=&gt;</span></div><div class="line">(<span class="number">1111</span>).toString(<span class="number">2</span>) <span class="comment">// =&gt; "10001010111"</span></div><div class="line"><span class="comment">//8进制转为2进制 //=&gt;</span></div><div class="line">(<span class="number">01111</span>).toString(<span class="number">2</span>) <span class="comment">//=&gt;"1001001001"</span></div><div class="line"><span class="comment">//16进制转为2进制 //=&gt;</span></div><div class="line">(<span class="number">0x16</span>).toString(<span class="number">2</span>) <span class="comment">// =&gt; "10110"</span></div><div class="line"></div><div class="line"><span class="comment">//2进制到10进制；</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="comment">//=&gt;2</span></div><div class="line"><span class="comment">//2进制到10进制；</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>,<span class="number">2</span>) <span class="comment">//=&gt;4</span></div><div class="line"><span class="comment">//16进制到10进制</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="number">12</span>, <span class="number">16</span>) <span class="comment">//=&gt;18</span></div><div class="line"><span class="comment">//8进制到10进制</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="number">12</span>,<span class="number">8</span>); <span class="comment">//=&gt;10</span></div></pre></td></tr></table></figure>
<h2 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h2><ol>
<li>Boolean (强制类型转换)</li>
<li>!! (隐式类型转换)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS前置知识&quot;&gt;&lt;a href=&quot;#JS前置知识&quot; class=&quot;headerlink&quot; title=&quot;JS前置知识&quot;&gt;&lt;/a&gt;JS前置知识&lt;/h1&gt;&lt;h2 id=&quot;浏览器以及网站相关介绍&quot;&gt;&lt;a href=&quot;#浏览器以及网站相关介绍&quot; class=&quot;header
    
    </summary>
    
      <category term="js基础" scheme="http://sunfeat.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础知识（下篇）</title>
    <link href="http://sunfeat.com/2016/02/10/js%E5%9F%BA%E7%A1%8001/"/>
    <id>http://sunfeat.com/2016/02/10/js基础01/</id>
    <published>2016-02-10T05:00:00.000Z</published>
    <updated>2017-09-08T03:46:24.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a><strong>操作符</strong></h2><p><strong>@运算符</strong></p>
<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a><strong>一元运算符</strong></h3><p><strong>@递增和递减</strong><br>递增++ 递减–<br>a++ 先参与运算 后自加<br>++a 先自加 后参与运算</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><strong>关系运算符</strong></h3><pre><code>alert(&quot;A&quot;&gt;&quot;a&quot;);//false  65 97  字符串之间进行比较 会按照字符编码进行逐位比较
alert(&quot;15&quot;&gt;&quot;1&quot;);//true
</code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><strong>逻辑运算符</strong></h3><p><strong>@逻辑运算符</strong><br><strong>逻辑运算</strong><br>&amp;&amp;和||都采取短路运算，即<strong>第一个能够决定结果就不再看第二个</strong>了<br>&amp;&amp; 的要求比较严格 要<strong>两个都是true才是true</strong> 所以看到第一个是false就没有必要继续完后看了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; 不管了);</div></pre></td></tr></table></figure>
<p>||   的要求比较宽松  要<strong>两个都是false才是false</strong> 所以看到第一个是true就没有必要继续完后看了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || 不管了);</div></pre></td></tr></table></figure>
<p><strong>短路运算</strong><br>&amp;&amp;和||不但可以操作布尔类型的值，对<strong>其他类型的值</strong>也可以进行操作，并<strong>返回可以决定表达式结果的那个值</strong>。</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><strong>赋值运算符</strong></h3><p><strong>@赋值运算符</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">a</span>+=b 等价于 <span class="keyword">a</span>=<span class="keyword">a</span>+b</div></pre></td></tr></table></figure>
<p><strong>@表达式练习</strong></p>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a><strong>运算符的优先级</strong></h3><p>下表按从最高到最低的优先级列出JavaScript运算符。具有相同优先级的运算符按从左至右的顺序求值。</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">. [] ()</td>
<td style="text-align:center">字段访问、数组下标、函数调用以及表达式分组</td>
</tr>
<tr>
<td style="text-align:center">++ – - ~ ! delete new typeof void</td>
<td style="text-align:center">一元运算符、返回数据类型、对象创建、未定义值</td>
</tr>
<tr>
<td style="text-align:center">* / %</td>
<td style="text-align:center">乘法、除法、取模</td>
</tr>
<tr>
<td style="text-align:center">+ - +</td>
<td style="text-align:center">加法、减法、字符串连接</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
<td style="text-align:center">移位</td>
</tr>
<tr>
<td style="text-align:center">&lt; &lt;= &gt; &gt;= instanceof</td>
<td style="text-align:center">小于、小于等于、大于、大于等于、instanceof</td>
</tr>
<tr>
<td style="text-align:center">== != \=== !==</td>
<td style="text-align:center">等于、不等于、严格相等、非严格相等</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">按位异或</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center"></td>
<td>按位或</td>
</tr>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑与</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">\</td>
<td></td>
<td>逻辑或</td>
</tr>
<tr>
<td style="text-align:center">?:</td>
<td style="text-align:center">条件</td>
</tr>
<tr>
<td style="text-align:center">= oP=</td>
<td style="text-align:center">赋值、运算赋值</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">多重求值</td>
</tr>
</tbody>
</table>
<pre><code>一元运算符  ++   --   !
算数运算符  先*  /  %   后 +   -
关系运算符  &gt;   &gt;=   &lt;   &lt;=
相等运算符   ==   !=    ===    !==
逻辑运算符 先&amp;&amp;   后||  
</code></pre><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a><strong>语句</strong></h2><h3 id="选择语句if"><a href="#选择语句if" class="headerlink" title="选择语句if"></a><strong>选择语句if</strong></h3><pre><code>if (condition) {
    statement1
} else if (condition) {
    statement2
} else {
    statement3
}
</code></pre><p><strong>@选择语句If</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断一个年份是闰年还是平年；四年一润,百年不润;四百年再润</span></div><div class="line"><span class="keyword">var</span> year = <span class="number">2016</span>;</div><div class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</div><div class="line">  <span class="built_in">console</span>.log(year+<span class="string">"是闰年"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(year+<span class="string">"是平年"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a><strong>三元表达式</strong></h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式3</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从三个数中找最大值</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">18</span>;</div><div class="line"><span class="keyword">var</span> num2 = <span class="number">22</span>;</div><div class="line"><span class="keyword">var</span> num3 = <span class="number">12</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = (num1&gt;num2?num1:num2)&gt;num3?(num1&gt;num2?num1:num2):num3;</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
<p><strong>@三元表达式</strong></p>
<h3 id="选择语句switch"><a href="#选择语句switch" class="headerlink" title="选择语句switch"></a><strong>选择语句switch</strong></h3><pre><code>switch (expression) {
    case value:
        statement
        break;
    case value:
        statement
        break;
    default:
        statement
}
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示星期几  1  2  3 4 5 6 0</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> week = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();<span class="comment">//3</span></div><div class="line"><span class="comment">/*alert(week);*/</span></div><div class="line"><span class="keyword">switch</span>(week)&#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:alert(<span class="string">"星期一"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:alert(<span class="string">"星期二"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">3</span>:alert(<span class="string">"星期三"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">4</span>:alert(<span class="string">"星期四"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">5</span>:alert(<span class="string">"星期五"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">6</span>:alert(<span class="string">"星期六"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">0</span>:alert(<span class="string">"星期日"</span>);<span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*素质教育（把分数变成ABCDE） A  90 B 80</span></div><div class="line"><span class="comment">		千万不要写100个case哟</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">var</span> score = <span class="number">76</span>;  </div><div class="line"><span class="keyword">switch</span>(<span class="literal">true</span>)&#123;</div><div class="line">  <span class="keyword">case</span> score&gt;=<span class="number">90</span>:alert(<span class="string">"A"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> score&gt;=<span class="number">80</span>:alert(<span class="string">"B"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> score&gt;=<span class="number">60</span>:alert(<span class="string">"C"</span>);<span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:alert(<span class="string">"不及格"</span>);<span class="keyword">break</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>@选择语句switch</strong></p>
<h3 id="循环语句for"><a href="#循环语句for" class="headerlink" title="循环语句for"></a><strong>循环语句for</strong></h3><pre><code>for (initialization; expression; post-loop-expression)｛
    statement 
｝
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印99乘法表</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;table&gt;"</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</div><div class="line">    	<span class="built_in">document</span>.write(<span class="string">"&lt;td style='border:1px solid red'&gt;"</span>+j+<span class="string">"x"</span>+i+<span class="string">"="</span>+i*j+<span class="string">"&lt;/td&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>);</div></pre></td></tr></table></figure>
<p>initialization表示：初始化表达式<br>expression表示：控制表达式<br>post-loop-expression表示：循环后表达式<br>三者都是可选的<br><strong>@循环语句for</strong></p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a><strong>break和continue</strong></h3><p>break跳出当前循环，执行循环后的语句<br>continue跳出当前循环，继续执行循环<br><strong>@break和continue</strong></p>
<h3 id="循环语句while"><a href="#循环语句while" class="headerlink" title="循环语句while"></a><strong>循环语句while</strong></h3><p><strong>while语句 </strong>先判断后执行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">while</span><span class="params">(expression)</span></span> statement</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算1+2+3+……+100之和。</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//定义一个变量 用来求和</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//循环初始值</span></div><div class="line"><span class="keyword">while</span>(i&lt;=<span class="number">5</span>)&#123;<span class="comment">//循环条件</span></div><div class="line">  sum+=i;<span class="comment">//具体的事情</span></div><div class="line">  i++;<span class="comment">//循环变量 自增</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure>
<p><strong>do while 语句</strong> 先执行后判断</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;<span class="keyword">statement</span>&#125; <span class="keyword">while</span> (expression);</div></pre></td></tr></table></figure>
<p><strong>@循环语句while</strong></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a><strong>数组的声明</strong></h3><p>通过构造函数声明</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div></pre></td></tr></table></figure>
<p>通过字面量声明（推荐使用这种方法）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var arr</span> = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div></pre></td></tr></table></figure>
<h3 id="数组的赋值和取值"><a href="#数组的赋值和取值" class="headerlink" title="数组的赋值和取值"></a><strong>数组的赋值和取值</strong></h3><p><strong>赋值</strong></p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数组名<span class="string">[索引号]</span> = 值 //arr<span class="string">[0]</span>=<span class="number">100</span></div></pre></td></tr></table></figure>
<p><strong>取值</strong>（通过数组名和索引即可取到对应的值）</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数组名<span class="string">[索引号]</span>  //console.log(arr<span class="string">[0]</span>)</div></pre></td></tr></table></figure>
<h3 id="数组的遍历（循环-枚举）"><a href="#数组的遍历（循环-枚举）" class="headerlink" title="数组的遍历（循环 枚举）"></a><strong>数组的遍历（循环 枚举）</strong></h3><p><strong>@数组</strong></p>
<p>数组的索引是从0开始的</p>
<p>数组的长度可以通过arr.length获取</p>
<p>由于数组的索引从0开始，所以最后一个值的索引为arr.length-1</p>
<p><strong>通过for循环遍历数组</strong></p>
   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可<strong>简写</strong>为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>@数组练习</strong></p>
<p><strong>@数组length的应用</strong></p>
<p>往数组中添加新元素，数组的length会增加</p>
<p>通过给arr.length赋值可以改变数组的长度</p>
<p><strong>@数组练习</strong></p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h3><p><strong>@冒泡排序</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;<span class="comment">//外层循环控制比较了轮数</span></div><div class="line">  <span class="comment">//对于轮数的优化</span></div><div class="line">  <span class="keyword">var</span> onOff = <span class="literal">true</span>;</div><div class="line">  <span class="comment">//优化一下每轮比较次数</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length<span class="number">-1</span>-i;j++)&#123;<span class="comment">//里面的循环控制的每轮的比较次数</span></div><div class="line">    <span class="comment">//如果前一项比后面一项大 则交换位置</span></div><div class="line">    <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</div><div class="line">      <span class="keyword">var</span> temp = arr[j];</div><div class="line">      arr[j]=arr[j+<span class="number">1</span>];</div><div class="line">      arr[j+<span class="number">1</span>]=temp;</div><div class="line">      onOff=<span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(onOff)&#123;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// returns [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><h3 id="函数的声明和调用"><a href="#函数的声明和调用" class="headerlink" title="函数的声明和调用"></a><strong>函数的声明和调用</strong></h3><p>函数的声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//函数体 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数的调用</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>@函数的声明和调用<em>**</em></strong></p>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a><strong>函数的参数</strong></h3><p>有参数的函数的<strong>声明</strong>（声明中的参数只是一个占位符，没有实际的值，是形式参数，即<strong>形参</strong>）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>) </span>&#123;</div><div class="line">	<span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有参数的函数的<strong>调用</strong>（调用时传入的参数才是有真正数值的参数，是实际参数，即<strong>实参</strong>）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名(参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..);</div></pre></td></tr></table></figure>
<p><strong>@函数的参数</strong></p>
<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a><strong>函数的返回值</strong></h3><p>在函数中通过return关键字将要返回值返回</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> 要返回的值;</div></pre></td></tr></table></figure>
<h3 id="函数高级概念"><a href="#函数高级概念" class="headerlink" title="函数高级概念"></a><strong>函数高级概念</strong></h3><p><strong>@参数详解</strong><br>在JS中实参的个数和形参的个数可以不一致<br><strong>@返回值详解</strong><br>函数的返回值是什么，调用这个函数就相当于调用什么，如果没有回值则为undefined<br>函数在执行完成return语句后便会退出函数，后面的代码不会执行<br><strong>@两种定义方式</strong><br>函数声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数表达式<br>        var fn2 = function () {<br>            //函数体<br>        };<br><strong>@匿名函数</strong><br>匿名函数（没有名字的函数）<br>     function () {<br>        //函数体<br>     }<br><strong>@递归调用</strong><br>程序调用自身的编程技巧称为递归<br><strong>@回调函数</strong><br>函数也是一种普通的数据类型<br>因此函数也可以被当作参数传递<br>被当作参数传递的函数叫做回调函数</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h2><p>从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用<strong>属性</strong>表示，事物的行为可以用<strong>方法</strong>表示<br>从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对<strong>变量</strong>和<strong>函数</strong>进行管理<br>初期我们甚至可以把他简单地理解为一个工具箱</p>
<h3 id="1-2-1-键值对"><a href="#1-2-1-键值对" class="headerlink" title="1.2.1. 键值对"></a>1.2.1. <strong>键值对</strong></h3><p>键值对就是一种对应关系，通过键能够方便地找到值</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">键:值    <span class="selector-tag">key</span><span class="selector-pseudo">:value</span>    <span class="selector-tag">k</span><span class="selector-pseudo">:v</span></div></pre></td></tr></table></figure>
<h3 id="对象的声明"><a href="#对象的声明" class="headerlink" title="对象的声明"></a><strong>对象的声明</strong></h3><p>通过构造函数声明（更加通用）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
<p>通过字面量声明（更加简便）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var obj</span>= &#123;&#125;;</div></pre></td></tr></table></figure>
<p>对象具有属性和方法<br>属性 用来描述对象的特征 一般是名词 对应变量<br>方法 用来描述对象的行为 一般是动词 对应函数</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h3><p>属性的定义<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">对象.属性名 </span>=<span class="string"> 值</span></div></pre></td></tr></table></figure></p>
<p>属性的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>方法的定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//函数体 &#125;</span></div></pre></td></tr></table></figure>
<p>方法的调用</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名<span class="comment">()</span></div></pre></td></tr></table></figure>
<p><strong>@找对象练习</strong></p>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math:js程序当中的一个内置的对象 提供一些方法用于数学计算</p>
<pre><code>//Math.round();//四舍五入
console.log(Math.round(3.9));//4
console.log(Math.round(3.1));//3

console.log(Math.floor(3.9));//3 向下取整
console.log(Math.ceil(3.1));//向上取整4
console.log(Math.ceil(3.0));//向上取整 

console.log(Math.max(9,15,3,1));//求最大值
console.log(Math.min(-8,5,1,0));//求最小值

console.log(Math.PI);//常量 无限不循环小数 圆周率 π 3.141592653989793

//console.log(Math.pow(a,b));//求a的b次方
//
console.log(Math.sqrt(9));//求平方根

/*console.log(Math.tan());*/

console.log(Math.abs(-7));//取绝对值

//console.log(Math.random());//0--1随机小数 不包含1 [0,1)

//求0-100之间的任意随机整数
//Math.round(Math.random()*100);//0--100 [0,100)
//30---60 随机整数
// Math.round(Math.random()*30)+30 [30,60)

//48---72随机整数
// Math.round(Math.random()*24)+48 [48,72)

//求x-y之间的任意随机整数
// Math.round(Math.random()*(y-x))+x; [x,y)
</code></pre><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a><strong>其他概念</strong></h2><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a><strong>对象字面量</strong></h3><p><strong>@对象字面量</strong><br>        var o = {<br>          name : “zs”,<br>            age : 18,<br>            sayHi : function() {<br>                console.log(this.name);<br>            }<br>        };</p>
<h3 id="对象标记法"><a href="#对象标记法" class="headerlink" title="对象标记法"></a><strong>对象标记法</strong></h3><p><strong>@对象标记法</strong><br>JavaScript Object Notation（JavaScript对象标记法）是仿照JS中对象字面量的格式去书写的一串用来记录对象数据的<strong>字符串</strong>，可以用于数据传输。将来学习AJAX会详细学习。</p>
<h3 id="访问属性的两种方式"><a href="#访问属性的两种方式" class="headerlink" title="访问属性的两种方式"></a><strong>访问属性的两种方式</strong></h3><p><strong>@访问属性的两种方式</strong><br>点语法（简单）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure></p>
<p>中括号（灵活）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象<span class="selector-attr">[“属性名”]</span></div></pre></td></tr></table></figure></p>
<h3 id="遍历的两种方式"><a href="#遍历的两种方式" class="headerlink" title="遍历的两种方式"></a><strong>遍历的两种方式</strong></h3><p><strong>@遍历的两种方式</strong><br>通过for可以对集合进行有序的遍历<br>通过forin可以对集合进行有序的遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> json) &#123; 语句 &#125;</div></pre></td></tr></table></figure></p>
<p>k变量代表的是json中的各个属性（key）和 var i = 0中的i是一个意思 名字不同而已</p>
<h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a><strong>对象</strong></h2><h3 id="对象的声明和使用"><a href="#对象的声明和使用" class="headerlink" title="对象的声明和使用"></a><strong>对象的声明和使用</strong></h3><p>通过构造函数声明（更加通用）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
<p>通过字面量声明（更加简便）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var obj</span>= &#123;&#125;;</div></pre></td></tr></table></figure>
<p>对象具有属性和方法<br>属性 用来描述对象的特征 一般是名词 对应变量<br>方法 用来描述对象的行为 一般是动词 对应函数<br><strong>属性</strong><br>属性的定义</p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">对象.属性名 </span>=<span class="string"> 值</span></div></pre></td></tr></table></figure>
<p>属性的调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.属性名</div></pre></td></tr></table></figure>
<p><strong>方法</strong><br>方法的定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//函数体 &#125;</span></div></pre></td></tr></table></figure>
<p>方法的调用</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对象.方法名<span class="comment">()</span></div></pre></td></tr></table></figure>
<h2 id="关于this的指向"><a href="#关于this的指向" class="headerlink" title="关于this的指向"></a><strong>关于this的指向</strong></h2><h3 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a><strong>全局上下文</strong></h3><p>全局运行上下文中（在任何函数体外部），this 指代全局对象</p>
<h3 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文*"></a><strong>函数上下文*</strong></h3><p><strong>对象方法中的this</strong>指的是该方法所属的对象<br><strong>直接调用中的this</strong>指的是全局对象<br>总之，函数上下文中（在函数内部），this指的是当前函数所属的对象</p>
<h3 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a><strong>构造函数中</strong></h3><p>当一个函数被作为构造函数使用时（前面加new关键字），new关键字会让this的指向改变，并让其成为当前函数的返回值</p>
<h2 id="批量创建对象"><a href="#批量创建对象" class="headerlink" title="批量创建对象"></a><strong>批量创建对象</strong></h2><h3 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a><strong>工厂模式创建对象</strong></h3><p><strong>为什么要优化创建对象的方式</strong><br>因为对象在项目中被大规模的使用，所以每一点小小的改进都会对项目整体效率带来很大的提升，现阶段同学们还不可能有深刻的体会，只是让大家了解一下，后面讲项目大家自然就明白了。<br><strong>@工厂模式创建对象</strong><br>同类型对象，只是一些属性的值不同，通过对象字面量创建对象每次都要写那么多东西很费劲，我们可以<strong>将创建对象的过程封装进一个函数，只把发生变化的属性作为参数传入</strong>，从而简化对象创建的过程。<br>但是工厂模式只是创建出来一个普通的对象并将其返回，因此无法判断实例的具体类型。</p>
<h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a><strong>构造函数创建对象</strong></h3><p><strong>@this和new</strong><br>利用new 关键字可以声明的对象。new 关键字可以让构造函数中this的指向改变，并让构造函数把this返回。<br><strong>@构造函数</strong><br>构造函数也是函数，只不过会默认返回一个对象。<br><img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/06.png" alt="img"> <img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/07.png" alt="img"><br><strong>@构造函数创建对象</strong><br>通过构造函数创建对象更方便（不需要创建对象并返回）。更重要的是可以通过instanceof来判断实例的类型了。 </p>
<h2 id="基本类型和复杂类型"><a href="#基本类型和复杂类型" class="headerlink" title="基本类型和复杂类型"></a><strong>基本类型和复杂类型</strong></h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a><strong>分类</strong></h3><p><strong>基本数据类型（值类型）：直接存储值</strong><br>number、string、boolean、undefined、null（基本类型只有这五个）<br><strong>复杂数据类型（引用类型）：存储引用</strong><br>object</p>
<h3 id="基本类型的复制"><a href="#基本类型的复制" class="headerlink" title="基本类型的复制*"></a><strong>基本类型的复制*</strong></h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/08.png" alt="img"> </p>
<h3 id="复杂类型的复制"><a href="#复杂类型的复制" class="headerlink" title="复杂类型的复制"></a><strong>复杂类型的复制</strong></h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/09.png" alt="img"> </p>
<h3 id="基本类型参数"><a href="#基本类型参数" class="headerlink" title="基本类型参数"></a><strong>基本类型参数</strong></h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/10.png" alt="img"> </p>
<h3 id="复杂类型参数"><a href="#复杂类型参数" class="headerlink" title="复杂类型参数"></a><strong>复杂类型参数</strong></h3><p><img src="http://ou0923swf.bkt.clouddn.com/image/jsbas01/11.png" alt="img"><br><strong>@复杂类型参数练习</strong> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;&lt;strong&gt;操作符&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;@运算符&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一元运算符&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="js基础" scheme="http://sunfeat.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js基础" scheme="http://sunfeat.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发</title>
    <link href="http://sunfeat.com/2016/01/10/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://sunfeat.com/2016/01/10/模块化开发/</id>
    <published>2016-01-10T05:00:00.000Z</published>
    <updated>2017-09-06T10:41:42.994Z</updated>
    
    <content type="html"><![CDATA[<p>在前端开发中，起初只需要在<code>&lt;script&gt;&lt;/script&gt;</code>加入很少的代码来实现一些基本的交互效果，后来随着js得到了越发的重视之后，使得前端项目也变得越来越来复杂，需要更好的组织形式来分类、实现业务逻辑，然而，JavaScript本身是没有类（class）的概念的，当然也就没有模块（module）的概念了。  </p>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p>
<p>目前，通行的js模块规范主要有两种：CommonJS和AMD。</p>
<p>根据AMD规范，我们可以使用define定义模块，使用require调用模块。</p>
<p><strong>AMD规范</strong></p>
<p>AMD 即Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是CommonJS</p>
<p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<p><strong>define() 函数</strong></p>
<p>AMD规范只定义了一个函数 define，它是全局变量。函数的描述为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>id：指定义中模块的名字，可选；如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p>
<p>依赖dependencies：是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。<br>依赖参数是可选的，如果忽略此参数，它应该默认为[“require”, “exports”, “module”]。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p>
<p>工厂方法factory，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p>
<p><strong>模块名的格式</strong></p>
<p>模块名用来唯一标识定义中模块，它们同样在依赖性数组中使用：</p>
<p>模块名是用正斜杠分割的有意义单词的字符串<br>单词须为驼峰形式，或者”.”，”..”<br>模块名不允许文件扩展名的形式，如“.js”<br>模块名可以为 “相对的” 或 “顶级的”。如果首字符为“.”或“..”则为相对的模块名<br>顶级的模块名从根命名空间的概念模块解析<br>相对的模块名从 “require” 书写和调用的模块解析</p>
<p><strong>使用 require 和 exports</strong></p>
<p>创建一个名为”alpha”的模块，使用了require，exports，和名为”beta”的模块:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">"alpha"</span>, [<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, beta</span>) </span>&#123;</div><div class="line">   exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> beta.verb();</div><div class="line">     <span class="comment">//Or:</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">"beta"</span>).verb();</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p><a href="https://github.com/amdjs/amdjs-api/wiki/require" target="_blank" rel="external">require API介绍</a><br>[AMD规范中文版]<a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)" target="_blank" rel="external">https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)</a></p>
<p>目前，实现AMD的库有RequireJS 、rl 、Dojo 、Nodules 等。</p>
<p><em>*CommonJS规范</em></p>
<p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。Node.JS首先采用了js模块化的概念。</p>
<p>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。</p>
<p>输出模块变量的最好方法是使用module.exports对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> max = <span class="number">30</span>;</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">for</span> (i -= <span class="number">1</span>; i++ <span class="xml"><span class="tag">&lt; <span class="attr">max</span>; ) &#123;</span></span></div><div class="line"><span class="xml">  console.log(i);</span></div><div class="line"><span class="xml"> &#125;</span></div><div class="line"><span class="xml"> max *= 1.1;</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure>
<p>上面代码通过module.exports对象，定义了一个函数，该函数就是模块外部与内部通信的桥梁。</p>
<p>加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的module.exports对象。</p>
<p>CommonJS 规范：<a href="http://javascript.ruanyifeng.com/nodejs/commonjs.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/nodejs/commonjs.html</a></p>
<p><strong>RequireJS和SeaJS</strong></p>
<p>RequireJS由James Burke创建，他也是AMD规范的创始人。</p>
<p>define方法用于定义模块，RequireJS要求每个模块放在一个单独的文件里。</p>
<p>RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p>
<p><strong>SeaJS与RequireJS最大的区别:</strong></p>
<p>SeaJS对模块的态度是懒执行, 而RequireJS对模块的态度是预执行</p>
<p>不明白？看这篇图文并茂的文章吧：<a href="http://www.douban.com/note/283566440/" target="_blank" rel="external">http://www.douban.com/note/283566440/</a></p>
<p>RequireJS API:<a href="http://www.requirejs.cn/docs/api.html" target="_blank" rel="external">http://www.requirejs.cn/docs/api.html</a></p>
<p>RequireJS的用法：<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></p>
<p><strong>为什么要用requireJS</strong></p>
<p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>RequireJS就是为了解决这两个问题而诞生的：</p>
<p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>
<p>RequireJS文件下载：<a href="http://www.requirejs.cn/docs/download.html" target="_blank" rel="external">http://www.requirejs.cn/docs/download.html</a></p>
<p><strong>AMD和CMD</strong></p>
<p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p>
<p>在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(factory);</div></pre></td></tr></table></figure>
<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"> <span class="comment">// 模块代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require是可以把其他模块导入进来的一个参数，而export是可以把模块内的一些属性和方法导出的。</p>
<p>CMD规范地址：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a></p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p>
<p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）<br>CMD 推崇依赖就近，AMD 推崇依赖前置。看如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</div><div class="line">a.doSomething()</div><div class="line"><span class="comment">// 此处略去 100 行</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写</span></div><div class="line">b.doSomething()</div><div class="line"><span class="comment">// ... </span></div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// AMD 默认推荐的是</span></div><div class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></div><div class="line">a.doSomething()</div><div class="line"><span class="comment">// 此处略去 100 行</span></div><div class="line">b.doSomething()</div><div class="line">...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>另外一个区别是：</p>
<p>AMD:API根据使用范围有区别，但使用同一个api接口<br>CMD:每个API的职责单一<br>AMD的优点是：异步并行加载，在AMD的规范下，同时异步加载是不会产生错误的。<br>CMD的机制则不同，这种加载方式会产生错误，如果能规范化模块内容形式，也可以</p>
<p>jquery1.7以上版本会自动模块化，支持AMD模式：主要是使用define函数，sea.js虽然是CommonJS规范，但却使用了define来<strong>定义模块</strong><br>所以jQuery已经自动模块化了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line"><span class="string">'base'</span>:<span class="string">'/'</span>,</div><div class="line"><span class="string">'alias'</span>:&#123;</div><div class="line">  <span class="string">'jquery'</span>:<span class="string">'jquery.js'</span><span class="comment">//定义jQuery文件</span></div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>define函数和AMD的define类似：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module&#123;</span></span></div><div class="line"><span class="function"><span class="params">   <span class="regexp">//</span>先要载入jQuery的模块</span></span></div><div class="line"><span class="function"><span class="params">   var $ = require(<span class="string">'jquery'</span></span>);</span></div><div class="line"><span class="function">   //然后将<span class="title">jQuery</span>对象传给插件模块</span></div><div class="line"><span class="function">   <span class="title">require</span>(<span class="params"><span class="string">'./cookie'</span></span>)(<span class="params">$</span>);</span></div><div class="line"><span class="function">   //开始使用 <span class="title">$</span>.<span class="title">cookie</span>方法</span></div><div class="line"><span class="function">&#125;);</span></div></pre></td></tr></table></figure>
<p>sea.js如何使用？</p>
<p>引入sea.js的库</p>
<p>如何变成模块？</p>
<p>define</p>
<p>3.如何调用模块？</p>
<p>-exports<br>-sea.js.use<br>4.如何依赖模块？</p>
<p>-require</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    define(<span class="function"><span class="keyword">function</span> <span class="params">(require,exports,module)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">      <span class="comment">//exports : 对外的接口</span></span></div><div class="line"><span class="actionscript">      <span class="comment">//requires : 依赖的接口</span></span></div><div class="line"><span class="javascript">      <span class="built_in">require</span>(<span class="string">'./test.js'</span>);<span class="comment">//如果地址是一个模块的话，那么require的返回值就是模块中的exports</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>sea.js 开发实例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标拖拽的模块化开发实践<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#div1</span>&#123; <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">background</span>:black; <span class="attribute">position</span>:absolute; <span class="attribute">display</span>:none;&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#div2</span>&#123; <span class="attribute">width</span>:<span class="number">30px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; <span class="attribute">background</span>:yellow; <span class="attribute">position</span>:absolute; <span class="attribute">bottom</span>:<span class="number">0</span>; <span class="attribute">right</span>:<span class="number">0</span>;&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#div3</span>&#123; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background</span>:blue; <span class="attribute">position</span>:absolute; <span class="attribute">right</span>:<span class="number">0</span>; <span class="attribute">top</span>:<span class="number">0</span>;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="actionscript"><span class="comment">//A同事 ：</span></span></div><div class="line"><span class="actionscript">seajs.use(<span class="string">'./main.js'</span>);</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">id</span>=<span class="string">"input1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>A同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//A同事写的main.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">'div2'</span>);</div><div class="line">  <span class="keyword">var</span> oDiv3 = <span class="built_in">document</span>.getElementById(<span class="string">'div3'</span>);</div><div class="line"> </div><div class="line">  <span class="built_in">require</span>(<span class="string">'./drag.js'</span>).drag(oDiv3);</div><div class="line">  oInput.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    oDiv1.style.display = <span class="string">'block'</span>;</div><div class="line">    <span class="built_in">require</span>(<span class="string">'./scale.js'</span>).scale(oDiv1,oDiv2);</div><div class="line"> </div><div class="line">    <span class="built_in">require</span>.async(<span class="string">'./scale.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</div><div class="line">      ex.scale(oDiv1,oDiv2);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>B同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//B同事写的drag.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">      disX = ev.clientX - obj.offsetLeft;</div><div class="line">      disY = ev.clientY - obj.offsetTop;</div><div class="line">       </div><div class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line"> </div><div class="line"> </div><div class="line">         <span class="keyword">var</span> L = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX , <span class="built_in">document</span>.documentElement.clientWidth - obj.offsetWidth , <span class="number">0</span> );</div><div class="line">         <span class="keyword">var</span> T = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY , <span class="built_in">document</span>.documentElement.clientHeight - obj.offsetHeight , <span class="number">0</span> );</div><div class="line"> </div><div class="line">         </div><div class="line">        obj.style.left = L + <span class="string">'px'</span>;</div><div class="line">        obj.style.top = T + <span class="string">'px'</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  exports.drag = drag;<span class="comment">//对外提供接口</span></div><div class="line">   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>C同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//C同事写的scale.js:</span></div><div class="line"> </div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">scale</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disW = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> disH = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    obj2.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">      disX = ev.clientX;</div><div class="line">      disY = ev.clientY;</div><div class="line">      disW = obj1.offsetWidth;</div><div class="line">      disH = obj1.offsetHeight;</div><div class="line">       </div><div class="line">      <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">         </div><div class="line">        <span class="keyword">var</span> W = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX + disW , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">        <span class="keyword">var</span> H = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY + disH , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">         </div><div class="line">        obj1.style.width = W + <span class="string">'px'</span>;</div><div class="line">        obj1.style.height = H + <span class="string">'px'</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  exports.scale = scale;</div><div class="line">   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>D同事</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// D同事的range.js--限定拖拽范围</span></div><div class="line"> </div><div class="line">  define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">iNum,iMax,iMin</span>)</span>&#123;</div><div class="line">       </div><div class="line">      <span class="keyword">if</span>( iNum &gt; iMax )&#123;</div><div class="line">        <span class="keyword">return</span> iMax;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>( iNum &lt; iMin )&#123;</div><div class="line">        <span class="keyword">return</span> iMin;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> iNum;</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    exports.range = range;</div><div class="line">     </div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><img src="http://files.jb51.net/file_images/article/201612/20161204001125.png" alt="img"></p>
<p><strong>requirejs开发实例</strong></p>
<p>require.config是用来定义别名的，在paths属性下配置别名。然后通过requirejs(参数一，参数二)；参数一是数组，传入我们需要引用的模块名，第二个参数是个回调函数，回调函数传入一个变量，代替刚才所引入的模块。</p>
<p>main.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//别名配置</span></div><div class="line">requirejs.config(&#123;</div><div class="line">  paths: &#123;</div><div class="line">    jquery: <span class="string">'jquery.min'</span> <span class="comment">//可以省略.js</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//引入模块，用变量$表示jquery模块</span></div><div class="line">requirejs([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">  $(<span class="string">'body'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>引入模块也可以只写require()。requirejs通过define()定义模块，定义的参数上同。在此模块内的方法和变量外部是无法访问的，只有通过return返回才行.</p>
<p><strong>define 模块</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;<span class="comment">//引入jQuery模块</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将该模块命名为math.js保存。</p>
<p><strong>main.js引入模块方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$,math</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//110</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>没有依赖</strong></p>
<p>如果定义的模块不依赖其他模块，则可以：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    name: <span class="string">"trigkit4"</span>,</div><div class="line">    age: <span class="string">"21"</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前端开发中，起初只需要在&lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;加入很少的代码来实现一些基本的交互效果，后来随着js得到了越发的重视之后，使得前端项目也变得越来越来复杂，需要更好的组织形式来分类、实现业务逻辑，然而，JavaSc
    
    </summary>
    
      <category term="模块化开发" scheme="http://sunfeat.com/categories/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="模块化开发" scheme="http://sunfeat.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
